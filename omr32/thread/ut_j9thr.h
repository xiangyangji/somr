/*
 *  Do not edit this file 
 *  Generated by TraceGen
 */
#ifndef UTE_J9THR_MODULE_HEADER
#define UTE_J9THR_MODULE_HEADER
#include "ute_module.h"
#if !defined(UT_DIRECT_TRACE_REGISTRATION)
#include "jni.h"
#endif /* !defined(UT_DIRECT_TRACE_REGISTRATION) */
#ifndef UT_TRACE_OVERHEAD
#define UT_TRACE_OVERHEAD 1
#endif
#ifndef UT_THREAD
#define UT_THREAD(thr) (void *)thr
#endif /* UT_THREAD */
#ifndef UT_STR
#define UT_STR(arg) #arg
#endif
#ifdef __cplusplus
extern "C" {
#endif

#ifdef __clang__
#include <unistd.h>
#define Trace_Unreachable() _exit(-1)
#else
#define Trace_Unreachable()
#endif

#if defined(UT_DIRECT_TRACE_REGISTRATION)
int32_t registerj9thrWithTrace(UtInterface * utIntf, UtModuleInfo* containerName);
int32_t deregisterj9thrWithTrace(UtInterface * utIntf);
#define UT_MODULE_LOADED(utIntf) registerj9thrWithTrace((utIntf), NULL);
#define UT_MODULE_UNLOADED(utIntf) deregisterj9thrWithTrace((utIntf));
#define UT_J9THR_MODULE_LOADED(utIntf) registerj9thrWithTrace((utIntf), NULL);
#define UT_J9THR_MODULE_UNLOADED(utIntf) deregisterj9thrWithTrace((utIntf));
#else /* defined(UT_DIRECT_TRACE_REGISTRATION) */
int32_t registerj9thrWithTrace(JavaVM * vm, UtModuleInfo* containerName);
int32_t deregisterj9thrWithTrace(JavaVM * vm);
#define UT_MODULE_LOADED(vm) registerj9thrWithTrace((JavaVM *)(vm), NULL);
#define UT_MODULE_UNLOADED(vm) deregisterj9thrWithTrace((JavaVM *)(vm));
#define UT_J9THR_MODULE_LOADED(vm) registerj9thrWithTrace((JavaVM *)(vm), NULL);
#define UT_J9THR_MODULE_UNLOADED(vm) deregisterj9thrWithTrace((JavaVM *)(vm));
#endif /* defined(UT_DIRECT_TRACE_REGISTRATION) */

#if UT_TRACE_OVERHEAD >= 1
#define TrcEnabled_Trc_THR_VMInitStages_Event1  (j9thr_UtActive[0] != 0)
#define Trc_THR_VMInitStages_Event1(thr) do { /* tracepoint name: j9thr.0 */ \
	if ((unsigned char) j9thr_UtActive[0] != 0){ \
		j9thr_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9thr_UtModuleInfo, ((0u << 8) | j9thr_UtActive[0]), NULL);} \
	} while(0)
#else
#define TrcEnabled_Trc_THR_VMInitStages_Event1  (0)
#define Trc_THR_VMInitStages_Event1(thr)   /* tracepoint name: j9thr.0 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define TrcEnabled_Trc_THR_Adapt_DisableSpinning  (j9thr_UtActive[1] != 0)
#define Trc_THR_Adapt_DisableSpinning(P1, P2, P3, P4, P5, P6, P7, P8) do { /* tracepoint name: j9thr.1 */ \
	if ((unsigned char) j9thr_UtActive[1] != 0){ \
		j9thr_UtModuleInfo.intf->Trace((void *)NULL, &j9thr_UtModuleInfo, ((1u << 8) | j9thr_UtActive[1]), "\377\6\10\6\10\6\6\6", P1, P2, P3, P4, P5, P6, P7, P8);} \
	} while(0)
#else
#define TrcEnabled_Trc_THR_Adapt_DisableSpinning  (0)
#define Trc_THR_Adapt_DisableSpinning(P1, P2, P3, P4, P5, P6, P7, P8)   /* tracepoint name: j9thr.1 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define TrcEnabled_Trc_THR_Adapt_EnableSpinning  (j9thr_UtActive[2] != 0)
#define Trc_THR_Adapt_EnableSpinning(P1, P2, P3, P4, P5, P6, P7, P8) do { /* tracepoint name: j9thr.2 */ \
	if ((unsigned char) j9thr_UtActive[2] != 0){ \
		j9thr_UtModuleInfo.intf->Trace((void *)NULL, &j9thr_UtModuleInfo, ((2u << 8) | j9thr_UtActive[2]), "\377\6\10\6\10\6\6\6", P1, P2, P3, P4, P5, P6, P7, P8);} \
	} while(0)
#else
#define TrcEnabled_Trc_THR_Adapt_EnableSpinning  (0)
#define Trc_THR_Adapt_EnableSpinning(P1, P2, P3, P4, P5, P6, P7, P8)   /* tracepoint name: j9thr.2 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define TrcEnabled_Trc_THR_Adapt_StopSampling  (j9thr_UtActive[3] != 0)
#define Trc_THR_Adapt_StopSampling(P1, P2, P3, P4, P5, P6, P7, P8) do { /* tracepoint name: j9thr.3 */ \
	if ((unsigned char) j9thr_UtActive[3] != 0){ \
		j9thr_UtModuleInfo.intf->Trace((void *)NULL, &j9thr_UtModuleInfo, ((3u << 8) | j9thr_UtActive[3]), "\377\6\10\6\10\6\6\6", P1, P2, P3, P4, P5, P6, P7, P8);} \
	} while(0)
#else
#define TrcEnabled_Trc_THR_Adapt_StopSampling  (0)
#define Trc_THR_Adapt_StopSampling(P1, P2, P3, P4, P5, P6, P7, P8)   /* tracepoint name: j9thr.3 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define TrcEnabled_Trc_THR_Adapt_StartSampling  (j9thr_UtActive[4] != 0)
#define Trc_THR_Adapt_StartSampling(P1, P2) do { /* tracepoint name: j9thr.4 */ \
	if ((unsigned char) j9thr_UtActive[4] != 0){ \
		j9thr_UtModuleInfo.intf->Trace((void *)NULL, &j9thr_UtModuleInfo, ((4u << 8) | j9thr_UtActive[4]), "\377\6", P1, P2);} \
	} while(0)
#else
#define TrcEnabled_Trc_THR_Adapt_StartSampling  (0)
#define Trc_THR_Adapt_StartSampling(P1, P2)   /* tracepoint name: j9thr.4 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define TrcEnabled_Assert_THR_true  (j9thr_UtActive[5] != 0)
#define Assert_THR_true(P1) do { /* tracepoint name: j9thr.5 */ \
	if ((unsigned char) j9thr_UtActive[5] != 0){ \
		if ((P1)) { /* assertion satisfied */ } else { \
			if (j9thr_UtModuleInfo.intf != NULL) { \
				j9thr_UtModuleInfo.intf->Trace((void *)NULL, &j9thr_UtModuleInfo, (UT_SPECIAL_ASSERTION | (5u << 8) | j9thr_UtActive[5]), "\377\4\377", __FILE__, __LINE__, UT_STR(((P1)))); \
				Trace_Unreachable(); \
			} else { \
				fprintf(stderr, "** ASSERTION FAILED ** j9thr.5 at %s:%d Assert_THR_true%s\n", __FILE__, __LINE__, UT_STR(((P1)))); \
			} \
		}} \
	} while(0)
#else
#define TrcEnabled_Assert_THR_true  (0)
#define Assert_THR_true(P1)   /* tracepoint name: j9thr.5 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define TrcEnabled_Trc_THR_ThreadSuspendEnter  (j9thr_UtActive[6] != 0)
#define Trc_THR_ThreadSuspendEnter(P1) do { /* tracepoint name: j9thr.6 */ \
	if ((unsigned char) j9thr_UtActive[6] != 0){ \
		j9thr_UtModuleInfo.intf->Trace((void *)NULL, &j9thr_UtModuleInfo, ((6u << 8) | j9thr_UtActive[6]), "\6", P1);} \
	} while(0)
#else
#define TrcEnabled_Trc_THR_ThreadSuspendEnter  (0)
#define Trc_THR_ThreadSuspendEnter(P1)   /* tracepoint name: j9thr.6 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define TrcEnabled_Trc_THR_ThreadSuspendExit  (j9thr_UtActive[7] != 0)
#define Trc_THR_ThreadSuspendExit(P1) do { /* tracepoint name: j9thr.7 */ \
	if ((unsigned char) j9thr_UtActive[7] != 0){ \
		j9thr_UtModuleInfo.intf->Trace((void *)NULL, &j9thr_UtModuleInfo, ((7u << 8) | j9thr_UtActive[7]), "\6", P1);} \
	} while(0)
#else
#define TrcEnabled_Trc_THR_ThreadSuspendExit  (0)
#define Trc_THR_ThreadSuspendExit(P1)   /* tracepoint name: j9thr.7 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define TrcEnabled_Trc_THR_ThreadResumed  (j9thr_UtActive[8] != 0)
#define Trc_THR_ThreadResumed(P1, P2) do { /* tracepoint name: j9thr.8 */ \
	if ((unsigned char) j9thr_UtActive[8] != 0){ \
		j9thr_UtModuleInfo.intf->Trace((void *)NULL, &j9thr_UtModuleInfo, ((8u << 8) | j9thr_UtActive[8]), "\6\6", P1, P2);} \
	} while(0)
#else
#define TrcEnabled_Trc_THR_ThreadResumed  (0)
#define Trc_THR_ThreadResumed(P1, P2)   /* tracepoint name: j9thr.8 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define TrcEnabled_Trc_THR_ThreadMonitorNotifyEnter  (j9thr_UtActive[9] != 0)
#define Trc_THR_ThreadMonitorNotifyEnter(P1, P2, P3) do { /* tracepoint name: j9thr.9 */ \
	if ((unsigned char) j9thr_UtActive[9] != 0){ \
		j9thr_UtModuleInfo.intf->Trace((void *)NULL, &j9thr_UtModuleInfo, ((9u << 8) | j9thr_UtActive[9]), "\6\6\4", P1, P2, P3);} \
	} while(0)
#else
#define TrcEnabled_Trc_THR_ThreadMonitorNotifyEnter  (0)
#define Trc_THR_ThreadMonitorNotifyEnter(P1, P2, P3)   /* tracepoint name: j9thr.9 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define TrcEnabled_Trc_THR_ThreadMonitorNotifyThreadNotified  (j9thr_UtActive[10] != 0)
#define Trc_THR_ThreadMonitorNotifyThreadNotified(P1, P2, P3) do { /* tracepoint name: j9thr.10 */ \
	if ((unsigned char) j9thr_UtActive[10] != 0){ \
		j9thr_UtModuleInfo.intf->Trace((void *)NULL, &j9thr_UtModuleInfo, ((10u << 8) | j9thr_UtActive[10]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define TrcEnabled_Trc_THR_ThreadMonitorNotifyThreadNotified  (0)
#define Trc_THR_ThreadMonitorNotifyThreadNotified(P1, P2, P3)   /* tracepoint name: j9thr.10 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define TrcEnabled_Trc_THR_ThreadMonitorNotifyExit  (j9thr_UtActive[11] != 0)
#define Trc_THR_ThreadMonitorNotifyExit(P1, P2, P3) do { /* tracepoint name: j9thr.11 */ \
	if ((unsigned char) j9thr_UtActive[11] != 0){ \
		j9thr_UtModuleInfo.intf->Trace((void *)NULL, &j9thr_UtModuleInfo, ((11u << 8) | j9thr_UtActive[11]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define TrcEnabled_Trc_THR_ThreadMonitorNotifyExit  (0)
#define Trc_THR_ThreadMonitorNotifyExit(P1, P2, P3)   /* tracepoint name: j9thr.11 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define TrcEnabled_Trc_THR_ThreadInterruptEnter  (j9thr_UtActive[12] != 0)
#define Trc_THR_ThreadInterruptEnter(P1, P2) do { /* tracepoint name: j9thr.12 */ \
	if ((unsigned char) j9thr_UtActive[12] != 0){ \
		j9thr_UtModuleInfo.intf->Trace((void *)NULL, &j9thr_UtModuleInfo, ((12u << 8) | j9thr_UtActive[12]), "\6\6", P1, P2);} \
	} while(0)
#else
#define TrcEnabled_Trc_THR_ThreadInterruptEnter  (0)
#define Trc_THR_ThreadInterruptEnter(P1, P2)   /* tracepoint name: j9thr.12 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define TrcEnabled_Trc_THR_ThreadInterruptExit  (j9thr_UtActive[13] != 0)
#define Trc_THR_ThreadInterruptExit(P1) do { /* tracepoint name: j9thr.13 */ \
	if ((unsigned char) j9thr_UtActive[13] != 0){ \
		j9thr_UtModuleInfo.intf->Trace((void *)NULL, &j9thr_UtModuleInfo, ((13u << 8) | j9thr_UtActive[13]), "\6", P1);} \
	} while(0)
#else
#define TrcEnabled_Trc_THR_ThreadInterruptExit  (0)
#define Trc_THR_ThreadInterruptExit(P1)   /* tracepoint name: j9thr.13 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define TrcEnabled_Trc_THR_ThreadSetName  (j9thr_UtActive[14] != 0)
#define Trc_THR_ThreadSetName(P1, P2) do { /* tracepoint name: j9thr.14 */ \
	if ((unsigned char) j9thr_UtActive[14] != 0){ \
		j9thr_UtModuleInfo.intf->Trace((void *)NULL, &j9thr_UtModuleInfo, ((14u << 8) | j9thr_UtActive[14]), "\6\377", P1, P2);} \
	} while(0)
#else
#define TrcEnabled_Trc_THR_ThreadSetName  (0)
#define Trc_THR_ThreadSetName(P1, P2)   /* tracepoint name: j9thr.14 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define TrcEnabled_Trc_THR_ThreadSetPriority  (j9thr_UtActive[15] != 0)
#define Trc_THR_ThreadSetPriority(P1, P2) do { /* tracepoint name: j9thr.15 */ \
	if ((unsigned char) j9thr_UtActive[15] != 0){ \
		j9thr_UtModuleInfo.intf->Trace((void *)NULL, &j9thr_UtModuleInfo, ((15u << 8) | j9thr_UtActive[15]), "\6\6", P1, P2);} \
	} while(0)
#else
#define TrcEnabled_Trc_THR_ThreadSetPriority  (0)
#define Trc_THR_ThreadSetPriority(P1, P2)   /* tracepoint name: j9thr.15 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define TrcEnabled_Trc_THR_ThreadNUMAAffinitySet  (j9thr_UtActive[16] != 0)
#define Trc_THR_ThreadNUMAAffinitySet(P1, P2) do { /* tracepoint name: j9thr.16 */ \
	if ((unsigned char) j9thr_UtActive[16] != 0){ \
		j9thr_UtModuleInfo.intf->Trace((void *)NULL, &j9thr_UtModuleInfo, ((16u << 8) | j9thr_UtActive[16]), "\6\6", P1, P2);} \
	} while(0)
#else
#define TrcEnabled_Trc_THR_ThreadNUMAAffinitySet  (0)
#define Trc_THR_ThreadNUMAAffinitySet(P1, P2)   /* tracepoint name: j9thr.16 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define TrcEnabled_Trc_THR_ThreadSpinLockThreadUnblocked  (j9thr_UtActive[17] != 0)
#define Trc_THR_ThreadSpinLockThreadUnblocked(P1, P2, P3) do { /* tracepoint name: j9thr.17 */ \
	if ((unsigned char) j9thr_UtActive[17] != 0){ \
		j9thr_UtModuleInfo.intf->Trace((void *)NULL, &j9thr_UtModuleInfo, ((17u << 8) | j9thr_UtActive[17]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define TrcEnabled_Trc_THR_ThreadSpinLockThreadUnblocked  (0)
#define Trc_THR_ThreadSpinLockThreadUnblocked(P1, P2, P3)   /* tracepoint name: j9thr.17 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define TrcEnabled_Trc_THR_ThreadGetCpuTime_Bpxgth  (j9thr_UtActive[18] != 0)
#define Trc_THR_ThreadGetCpuTime_Bpxgth(P1, P2, P3, P4) do { /* tracepoint name: j9thr.18 */ \
	if ((unsigned char) j9thr_UtActive[18] != 0){ \
		j9thr_UtModuleInfo.intf->Trace((void *)NULL, &j9thr_UtModuleInfo, ((18u << 8) | j9thr_UtActive[18]), "\6\4\4\4", P1, P2, P3, P4);} \
	} while(0)
#else
#define TrcEnabled_Trc_THR_ThreadGetCpuTime_Bpxgth  (0)
#define Trc_THR_ThreadGetCpuTime_Bpxgth(P1, P2, P3, P4)   /* tracepoint name: j9thr.18 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define TrcEnabled_Trc_THR_ThreadGetCpuTime_BpxgthData  (j9thr_UtActive[19] != 0)
#define Trc_THR_ThreadGetCpuTime_BpxgthData(P1, P2, P3) do { /* tracepoint name: j9thr.19 */ \
	if ((unsigned char) j9thr_UtActive[19] != 0){ \
		j9thr_UtModuleInfo.intf->Trace((void *)NULL, &j9thr_UtModuleInfo, ((19u << 8) | j9thr_UtActive[19]), "\6\4\4", P1, P2, P3);} \
	} while(0)
#else
#define TrcEnabled_Trc_THR_ThreadGetCpuTime_BpxgthData  (0)
#define Trc_THR_ThreadGetCpuTime_BpxgthData(P1, P2, P3)   /* tracepoint name: j9thr.19 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define TrcEnabled_Trc_THR_ThreadGetCpuTime_BpxgthBuffer  (j9thr_UtActive[20] != 0)
#define Trc_THR_ThreadGetCpuTime_BpxgthBuffer(P1, P2, P3, P4, P5) do { /* tracepoint name: j9thr.20 */ \
	if ((unsigned char) j9thr_UtActive[20] != 0){ \
		j9thr_UtModuleInfo.intf->Trace((void *)NULL, &j9thr_UtModuleInfo, ((20u << 8) | j9thr_UtActive[20]), "\6\4\4\4\4", P1, P2, P3, P4, P5);} \
	} while(0)
#else
#define TrcEnabled_Trc_THR_ThreadGetCpuTime_BpxgthBuffer  (0)
#define Trc_THR_ThreadGetCpuTime_BpxgthBuffer(P1, P2, P3, P4, P5)   /* tracepoint name: j9thr.20 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define TrcEnabled_Trc_THR_ThreadGetCpuTime_BpxgthEye  (j9thr_UtActive[21] != 0)
#define Trc_THR_ThreadGetCpuTime_BpxgthEye(P1, P2) do { /* tracepoint name: j9thr.21 */ \
	if ((unsigned char) j9thr_UtActive[21] != 0){ \
		j9thr_UtModuleInfo.intf->Trace((void *)NULL, &j9thr_UtModuleInfo, ((21u << 8) | j9thr_UtActive[21]), "\6\4", P1, P2);} \
	} while(0)
#else
#define TrcEnabled_Trc_THR_ThreadGetCpuTime_BpxgthEye  (0)
#define Trc_THR_ThreadGetCpuTime_BpxgthEye(P1, P2)   /* tracepoint name: j9thr.21 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define TrcEnabled_Trc_THR_ThreadGetProcessTimes_GetProcessTimesFailed  (j9thr_UtActive[22] != 0)
#define Trc_THR_ThreadGetProcessTimes_GetProcessTimesFailed(P1) do { /* tracepoint name: j9thr.22 */ \
	if ((unsigned char) j9thr_UtActive[22] != 0){ \
		j9thr_UtModuleInfo.intf->Trace((void *)NULL, &j9thr_UtModuleInfo, ((22u << 8) | j9thr_UtActive[22]), "\4", P1);} \
	} while(0)
#else
#define TrcEnabled_Trc_THR_ThreadGetProcessTimes_GetProcessTimesFailed  (0)
#define Trc_THR_ThreadGetProcessTimes_GetProcessTimesFailed(P1)   /* tracepoint name: j9thr.22 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define TrcEnabled_Trc_THR_ThreadGetProcessTimes_getrusageFailed  (j9thr_UtActive[23] != 0)
#define Trc_THR_ThreadGetProcessTimes_getrusageFailed(P1) do { /* tracepoint name: j9thr.23 */ \
	if ((unsigned char) j9thr_UtActive[23] != 0){ \
		j9thr_UtModuleInfo.intf->Trace((void *)NULL, &j9thr_UtModuleInfo, ((23u << 8) | j9thr_UtActive[23]), "\4", P1);} \
	} while(0)
#else
#define TrcEnabled_Trc_THR_ThreadGetProcessTimes_getrusageFailed  (0)
#define Trc_THR_ThreadGetProcessTimes_getrusageFailed(P1)   /* tracepoint name: j9thr.23 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define TrcEnabled_Trc_THR_ThreadGetProcessTimes_bpxNgthFailed  (j9thr_UtActive[24] != 0)
#define Trc_THR_ThreadGetProcessTimes_bpxNgthFailed(P1, P2) do { /* tracepoint name: j9thr.24 */ \
	if ((unsigned char) j9thr_UtActive[24] != 0){ \
		j9thr_UtModuleInfo.intf->Trace((void *)NULL, &j9thr_UtModuleInfo, ((24u << 8) | j9thr_UtActive[24]), "\4\4", P1, P2);} \
	} while(0)
#else
#define TrcEnabled_Trc_THR_ThreadGetProcessTimes_bpxNgthFailed  (0)
#define Trc_THR_ThreadGetProcessTimes_bpxNgthFailed(P1, P2)   /* tracepoint name: j9thr.24 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define TrcEnabled_Trc_THR_omrthread_get_jvm_cpu_usage_thread_walk_failed  (j9thr_UtActive[26] != 0)
#define Trc_THR_omrthread_get_jvm_cpu_usage_thread_walk_failed(P1) do { /* tracepoint name: j9thr.26 */ \
	if ((unsigned char) j9thr_UtActive[26] != 0){ \
		j9thr_UtModuleInfo.intf->Trace((void *)NULL, &j9thr_UtModuleInfo, ((26u << 8) | j9thr_UtActive[26]), "\4", P1);} \
	} while(0)
#else
#define TrcEnabled_Trc_THR_omrthread_get_jvm_cpu_usage_thread_walk_failed  (0)
#define Trc_THR_omrthread_get_jvm_cpu_usage_thread_walk_failed(P1)   /* tracepoint name: j9thr.26 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define TrcEnabled_Trc_THR_omrthread_get_jvm_cpu_usage_timestamp_failed  (j9thr_UtActive[27] != 0)
#define Trc_THR_omrthread_get_jvm_cpu_usage_timestamp_failed(P1, P2) do { /* tracepoint name: j9thr.27 */ \
	if ((unsigned char) j9thr_UtActive[27] != 0){ \
		j9thr_UtModuleInfo.intf->Trace((void *)NULL, &j9thr_UtModuleInfo, ((27u << 8) | j9thr_UtActive[27]), "\10\10", P1, P2);} \
	} while(0)
#else
#define TrcEnabled_Trc_THR_omrthread_get_jvm_cpu_usage_timestamp_failed  (0)
#define Trc_THR_omrthread_get_jvm_cpu_usage_timestamp_failed(P1, P2)   /* tracepoint name: j9thr.27 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define TrcEnabled_Trc_THR_omrthread_set_category_invalid_category  (j9thr_UtActive[28] != 0)
#define Trc_THR_omrthread_set_category_invalid_category(P1, P2) do { /* tracepoint name: j9thr.28 */ \
	if ((unsigned char) j9thr_UtActive[28] != 0){ \
		j9thr_UtModuleInfo.intf->Trace((void *)NULL, &j9thr_UtModuleInfo, ((28u << 8) | j9thr_UtActive[28]), "\4\6", P1, P2);} \
	} while(0)
#else
#define TrcEnabled_Trc_THR_omrthread_set_category_invalid_category  (0)
#define Trc_THR_omrthread_set_category_invalid_category(P1, P2)   /* tracepoint name: j9thr.28 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define TrcEnabled_Trc_THR_omrthread_get_cpu_time_ex_nullOSHandle  (j9thr_UtActive[30] != 0)
#define Trc_THR_omrthread_get_cpu_time_ex_nullOSHandle(P1) do { /* tracepoint name: j9thr.30 */ \
	if ((unsigned char) j9thr_UtActive[30] != 0){ \
		j9thr_UtModuleInfo.intf->Trace((void *)NULL, &j9thr_UtModuleInfo, ((30u << 8) | j9thr_UtActive[30]), "\6", P1);} \
	} while(0)
#else
#define TrcEnabled_Trc_THR_omrthread_get_cpu_time_ex_nullOSHandle  (0)
#define Trc_THR_omrthread_get_cpu_time_ex_nullOSHandle(P1)   /* tracepoint name: j9thr.30 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define TrcEnabled_Trc_THR_omrthread_get_cpu_time_ex_GetThreadTimes_failed  (j9thr_UtActive[31] != 0)
#define Trc_THR_omrthread_get_cpu_time_ex_GetThreadTimes_failed(P1, P2) do { /* tracepoint name: j9thr.31 */ \
	if ((unsigned char) j9thr_UtActive[31] != 0){ \
		j9thr_UtModuleInfo.intf->Trace((void *)NULL, &j9thr_UtModuleInfo, ((31u << 8) | j9thr_UtActive[31]), "\4\6", P1, P2);} \
	} while(0)
#else
#define TrcEnabled_Trc_THR_omrthread_get_cpu_time_ex_GetThreadTimes_failed  (0)
#define Trc_THR_omrthread_get_cpu_time_ex_GetThreadTimes_failed(P1, P2)   /* tracepoint name: j9thr.31 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define TrcEnabled_Trc_THR_omrthread_get_cpu_time_ex_pthread_getrusage_np_failed  (j9thr_UtActive[32] != 0)
#define Trc_THR_omrthread_get_cpu_time_ex_pthread_getrusage_np_failed(P1, P2) do { /* tracepoint name: j9thr.32 */ \
	if ((unsigned char) j9thr_UtActive[32] != 0){ \
		j9thr_UtModuleInfo.intf->Trace((void *)NULL, &j9thr_UtModuleInfo, ((32u << 8) | j9thr_UtActive[32]), "\4\6", P1, P2);} \
	} while(0)
#else
#define TrcEnabled_Trc_THR_omrthread_get_cpu_time_ex_pthread_getrusage_np_failed  (0)
#define Trc_THR_omrthread_get_cpu_time_ex_pthread_getrusage_np_failed(P1, P2)   /* tracepoint name: j9thr.32 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define TrcEnabled_Trc_THR_omrthread_get_cpu_time_ex_pthread_getcpuclockid_failed  (j9thr_UtActive[33] != 0)
#define Trc_THR_omrthread_get_cpu_time_ex_pthread_getcpuclockid_failed(P1, P2) do { /* tracepoint name: j9thr.33 */ \
	if ((unsigned char) j9thr_UtActive[33] != 0){ \
		j9thr_UtModuleInfo.intf->Trace((void *)NULL, &j9thr_UtModuleInfo, ((33u << 8) | j9thr_UtActive[33]), "\4\6", P1, P2);} \
	} while(0)
#else
#define TrcEnabled_Trc_THR_omrthread_get_cpu_time_ex_pthread_getcpuclockid_failed  (0)
#define Trc_THR_omrthread_get_cpu_time_ex_pthread_getcpuclockid_failed(P1, P2)   /* tracepoint name: j9thr.33 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define TrcEnabled_Trc_THR_omrthread_get_jvm_cpu_usage_info_get_cpu_time_ex_failed  (j9thr_UtActive[34] != 0)
#define Trc_THR_omrthread_get_jvm_cpu_usage_info_get_cpu_time_ex_failed(P1, P2) do { /* tracepoint name: j9thr.34 */ \
	if ((unsigned char) j9thr_UtActive[34] != 0){ \
		j9thr_UtModuleInfo.intf->Trace((void *)NULL, &j9thr_UtModuleInfo, ((34u << 8) | j9thr_UtActive[34]), "\6\6", P1, P2);} \
	} while(0)
#else
#define TrcEnabled_Trc_THR_omrthread_get_jvm_cpu_usage_info_get_cpu_time_ex_failed  (0)
#define Trc_THR_omrthread_get_jvm_cpu_usage_info_get_cpu_time_ex_failed(P1, P2)   /* tracepoint name: j9thr.34 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define TrcEnabled_Trc_THR_omrthread_get_cpu_time_ex_clock_gettime_failed  (j9thr_UtActive[35] != 0)
#define Trc_THR_omrthread_get_cpu_time_ex_clock_gettime_failed(P1, P2, P3) do { /* tracepoint name: j9thr.35 */ \
	if ((unsigned char) j9thr_UtActive[35] != 0){ \
		j9thr_UtModuleInfo.intf->Trace((void *)NULL, &j9thr_UtModuleInfo, ((35u << 8) | j9thr_UtActive[35]), "\4\6\6", P1, P2, P3);} \
	} while(0)
#else
#define TrcEnabled_Trc_THR_omrthread_get_cpu_time_ex_clock_gettime_failed  (0)
#define Trc_THR_omrthread_get_cpu_time_ex_clock_gettime_failed(P1, P2, P3)   /* tracepoint name: j9thr.35 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define TrcEnabled_Trc_THR_fixupThreadAccounting_omrthread_get_cpu_time_ex_error  (j9thr_UtActive[36] != 0)
#define Trc_THR_fixupThreadAccounting_omrthread_get_cpu_time_ex_error(P1, P2) do { /* tracepoint name: j9thr.36 */ \
	if ((unsigned char) j9thr_UtActive[36] != 0){ \
		j9thr_UtModuleInfo.intf->Trace((void *)NULL, &j9thr_UtModuleInfo, ((36u << 8) | j9thr_UtActive[36]), "\6\6", P1, P2);} \
	} while(0)
#else
#define TrcEnabled_Trc_THR_fixupThreadAccounting_omrthread_get_cpu_time_ex_error  (0)
#define Trc_THR_fixupThreadAccounting_omrthread_get_cpu_time_ex_error(P1, P2)   /* tracepoint name: j9thr.36 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define TrcEnabled_Trc_THR_EnableRawMonitorSpin_CustomSpinOption  (j9thr_UtActive[37] != 0)
#define Trc_THR_EnableRawMonitorSpin_CustomSpinOption(P1, P2, P3, P4, P5, P6) do { /* tracepoint name: j9thr.37 */ \
	if ((unsigned char) j9thr_UtActive[37] != 0){ \
		j9thr_UtModuleInfo.intf->Trace((void *)NULL, &j9thr_UtModuleInfo, ((37u << 8) | j9thr_UtActive[37]), "\377\6\6\6\6\6", P1, P2, P3, P4, P5, P6);} \
	} while(0)
#else
#define TrcEnabled_Trc_THR_EnableRawMonitorSpin_CustomSpinOption  (0)
#define Trc_THR_EnableRawMonitorSpin_CustomSpinOption(P1, P2, P3, P4, P5, P6)   /* tracepoint name: j9thr.37 */
#endif

extern UtModuleInfo j9thr_UtModuleInfo;
extern unsigned char j9thr_UtActive[];

#ifndef UT_MODULE_INFO
#define UT_MODULE_INFO j9thr_UtModuleInfo
#endif /* UT_MODULE_INFO */

#ifndef UT_ACTIVE
#define UT_ACTIVE j9thr_UtActive
#endif /* UT_ACTIVE */

#ifdef __cplusplus
} /* extern "C" */
#endif
#endif /* UTE_J9THR_MODULE_HEADER */
/*
 * End of file
 */
