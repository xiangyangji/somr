/*
 *  Do not edit this file 
 *  Generated by TraceGen
 */
#ifndef UTE_OMRPORT_MODULE_HEADER
#define UTE_OMRPORT_MODULE_HEADER
#include "ute_module.h"
#if !defined(UT_DIRECT_TRACE_REGISTRATION)
#include "jni.h"
#endif /* !defined(UT_DIRECT_TRACE_REGISTRATION) */
#ifndef UT_TRACE_OVERHEAD
#define UT_TRACE_OVERHEAD 1
#endif
#ifndef UT_THREAD
#define UT_THREAD(thr) (void *)thr
#endif /* UT_THREAD */
#ifndef UT_STR
#define UT_STR(arg) #arg
#endif
#ifdef __cplusplus
extern "C" {
#endif

#ifdef __clang__
#include <unistd.h>
#define Trace_Unreachable() _exit(-1)
#else
#define Trace_Unreachable()
#endif

#if defined(UT_DIRECT_TRACE_REGISTRATION)
int32_t registeromrportWithTrace(UtInterface * utIntf, UtModuleInfo* containerName);
int32_t deregisteromrportWithTrace(UtInterface * utIntf);
#define UT_MODULE_LOADED(utIntf) registeromrportWithTrace((utIntf), NULL);
#define UT_MODULE_UNLOADED(utIntf) deregisteromrportWithTrace((utIntf));
#define UT_OMRPORT_MODULE_LOADED(utIntf) registeromrportWithTrace((utIntf), NULL);
#define UT_OMRPORT_MODULE_UNLOADED(utIntf) deregisteromrportWithTrace((utIntf));
#else /* defined(UT_DIRECT_TRACE_REGISTRATION) */
int32_t registeromrportWithTrace(JavaVM * vm, UtModuleInfo* containerName);
int32_t deregisteromrportWithTrace(JavaVM * vm);
#define UT_MODULE_LOADED(vm) registeromrportWithTrace((JavaVM *)(vm), NULL);
#define UT_MODULE_UNLOADED(vm) deregisteromrportWithTrace((JavaVM *)(vm));
#define UT_OMRPORT_MODULE_LOADED(vm) registeromrportWithTrace((JavaVM *)(vm), NULL);
#define UT_OMRPORT_MODULE_UNLOADED(vm) deregisteromrportWithTrace((JavaVM *)(vm));
#endif /* defined(UT_DIRECT_TRACE_REGISTRATION) */

#if UT_TRACE_OVERHEAD >= 1
#define Assert_PRT_true(P1) do { /* tracepoint name: omrport.0 */ \
	if ((unsigned char) omrport_UtActive[0] != 0){ \
		if ((P1)) { /* assertion satisfied */ } else { \
			if (omrport_UtModuleInfo.intf != NULL) { \
				omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, (UT_SPECIAL_ASSERTION | (0u << 8) | omrport_UtActive[0]), "\377\4\377", __FILE__, __LINE__, UT_STR(((P1)))); \
				Trace_Unreachable(); \
			} else { \
				fprintf(stderr, "** ASSERTION FAILED ** omrport.0 at %s:%d Assert_PRT_true%s\n", __FILE__, __LINE__, UT_STR(((P1)))); \
			} \
		}} \
	} while(0)
#else
#define Assert_PRT_true(P1)   /* tracepoint name: omrport.0 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_Assert_ShouldNeverHappen() do { /* tracepoint name: omrport.1 */ \
	if ((unsigned char) omrport_UtActive[1] != 0){ \
		if ((0 /* Fatal port library error */)) { /* assertion satisfied */ } else { \
			if (omrport_UtModuleInfo.intf != NULL) { \
				omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, (UT_SPECIAL_ASSERTION | (1u << 8) | omrport_UtActive[1]), "\377\4\377", __FILE__, __LINE__, UT_STR(((0 /* Fatal port library error */)))); \
				Trace_Unreachable(); \
			} else { \
				fprintf(stderr, "** ASSERTION FAILED ** omrport.1 at %s:%d Trc_PRT_Assert_ShouldNeverHappen%s\n", __FILE__, __LINE__, UT_STR(((0 /* Fatal port library error */)))); \
			} \
		}} \
	} while(0)
#else
#define Trc_PRT_Assert_ShouldNeverHappen()   /* tracepoint name: omrport.1 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_initializeTable_entry() do { /* tracepoint name: omrport.2 */ \
	if ((unsigned char) omrport_UtActive[2] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((2u << 8) | omrport_UtActive[2]), NULL);} \
	} while(0)
#else
#define Trc_PRT_cuda_initializeTable_entry()   /* tracepoint name: omrport.2 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_symbol_found(P1, P2, P3) do { /* tracepoint name: omrport.3 */ \
	if ((unsigned char) omrport_UtActive[3] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((3u << 8) | omrport_UtActive[3]), "\377\377\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_cuda_symbol_found(P1, P2, P3)   /* tracepoint name: omrport.3 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_symbol_not_found(P1, P2) do { /* tracepoint name: omrport.4 */ \
	if ((unsigned char) omrport_UtActive[4] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((4u << 8) | omrport_UtActive[4]), "\377\377", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_cuda_symbol_not_found(P1, P2)   /* tracepoint name: omrport.4 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_initializeTable_exit(P1) do { /* tracepoint name: omrport.5 */ \
	if ((unsigned char) omrport_UtActive[5] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((5u << 8) | omrport_UtActive[5]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_initializeTable_exit(P1)   /* tracepoint name: omrport.5 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_getDeviceData_entry(P1) do { /* tracepoint name: omrport.6 */ \
	if ((unsigned char) omrport_UtActive[6] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((6u << 8) | omrport_UtActive[6]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_getDeviceData_entry(P1)   /* tracepoint name: omrport.6 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_getDeviceData_exit(P1) do { /* tracepoint name: omrport.7 */ \
	if ((unsigned char) omrport_UtActive[7] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((7u << 8) | omrport_UtActive[7]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_getDeviceData_exit(P1)   /* tracepoint name: omrport.7 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_getSummaryData_entry() do { /* tracepoint name: omrport.8 */ \
	if ((unsigned char) omrport_UtActive[8] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((8u << 8) | omrport_UtActive[8]), NULL);} \
	} while(0)
#else
#define Trc_PRT_cuda_getSummaryData_entry()   /* tracepoint name: omrport.8 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_getSummaryData_exit() do { /* tracepoint name: omrport.9 */ \
	if ((unsigned char) omrport_UtActive[9] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((9u << 8) | omrport_UtActive[9]), NULL);} \
	} while(0)
#else
#define Trc_PRT_cuda_getSummaryData_exit()   /* tracepoint name: omrport.9 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_initDeviceData_entry(P1) do { /* tracepoint name: omrport.10 */ \
	if ((unsigned char) omrport_UtActive[10] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((10u << 8) | omrport_UtActive[10]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_initDeviceData_entry(P1)   /* tracepoint name: omrport.10 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_initDeviceData_fail(P1, P2) do { /* tracepoint name: omrport.11 */ \
	if ((unsigned char) omrport_UtActive[11] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((11u << 8) | omrport_UtActive[11]), "\377\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_cuda_initDeviceData_fail(P1, P2)   /* tracepoint name: omrport.11 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_initDeviceData_exit(P1) do { /* tracepoint name: omrport.12 */ \
	if ((unsigned char) omrport_UtActive[12] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((12u << 8) | omrport_UtActive[12]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_initDeviceData_exit(P1)   /* tracepoint name: omrport.12 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_initConfigData_entry(P1) do { /* tracepoint name: omrport.13 */ \
	if ((unsigned char) omrport_UtActive[13] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((13u << 8) | omrport_UtActive[13]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_initConfigData_entry(P1)   /* tracepoint name: omrport.13 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_initConfigData_fail(P1) do { /* tracepoint name: omrport.14 */ \
	if ((unsigned char) omrport_UtActive[14] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((14u << 8) | omrport_UtActive[14]), "\377", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_initConfigData_fail(P1)   /* tracepoint name: omrport.14 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_initConfigData_exit(P1) do { /* tracepoint name: omrport.15 */ \
	if ((unsigned char) omrport_UtActive[15] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((15u << 8) | omrport_UtActive[15]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_initConfigData_exit(P1)   /* tracepoint name: omrport.15 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_getFunctions_entry() do { /* tracepoint name: omrport.16 */ \
	if ((unsigned char) omrport_UtActive[16] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((16u << 8) | omrport_UtActive[16]), NULL);} \
	} while(0)
#else
#define Trc_PRT_cuda_getFunctions_entry()   /* tracepoint name: omrport.16 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_library_not_found(P1) do { /* tracepoint name: omrport.17 */ \
	if ((unsigned char) omrport_UtActive[17] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((17u << 8) | omrport_UtActive[17]), "\377", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_library_not_found(P1)   /* tracepoint name: omrport.17 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_getFunctions_failed() do { /* tracepoint name: omrport.18 */ \
	if ((unsigned char) omrport_UtActive[18] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((18u << 8) | omrport_UtActive[18]), NULL);} \
	} while(0)
#else
#define Trc_PRT_cuda_getFunctions_failed()   /* tracepoint name: omrport.18 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_getFunctions_initialized() do { /* tracepoint name: omrport.19 */ \
	if ((unsigned char) omrport_UtActive[19] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((19u << 8) | omrport_UtActive[19]), NULL);} \
	} while(0)
#else
#define Trc_PRT_cuda_getFunctions_initialized()   /* tracepoint name: omrport.19 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_getFunctions_exit(P1) do { /* tracepoint name: omrport.20 */ \
	if ((unsigned char) omrport_UtActive[20] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((20u << 8) | omrport_UtActive[20]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_getFunctions_exit(P1)   /* tracepoint name: omrport.20 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_ThreadState_finalizer_entry(P1) do { /* tracepoint name: omrport.21 */ \
	if ((unsigned char) omrport_UtActive[21] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((21u << 8) | omrport_UtActive[21]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_ThreadState_finalizer_entry(P1)   /* tracepoint name: omrport.21 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_ThreadState_finalizer_exit() do { /* tracepoint name: omrport.22 */ \
	if ((unsigned char) omrport_UtActive[22] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((22u << 8) | omrport_UtActive[22]), NULL);} \
	} while(0)
#else
#define Trc_PRT_cuda_ThreadState_finalizer_exit()   /* tracepoint name: omrport.22 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_ThreadState_getCurrent_entry() do { /* tracepoint name: omrport.23 */ \
	if ((unsigned char) omrport_UtActive[23] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((23u << 8) | omrport_UtActive[23]), NULL);} \
	} while(0)
#else
#define Trc_PRT_cuda_ThreadState_getCurrent_entry()   /* tracepoint name: omrport.23 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_ThreadState_getCurrent_exit(P1) do { /* tracepoint name: omrport.24 */ \
	if ((unsigned char) omrport_UtActive[24] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((24u << 8) | omrport_UtActive[24]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_ThreadState_getCurrent_exit(P1)   /* tracepoint name: omrport.24 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_ThreadState_clear_entry(P1, P2) do { /* tracepoint name: omrport.25 */ \
	if ((unsigned char) omrport_UtActive[25] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((25u << 8) | omrport_UtActive[25]), "\6\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_cuda_ThreadState_clear_entry(P1, P2)   /* tracepoint name: omrport.25 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_ThreadState_clear_exit() do { /* tracepoint name: omrport.26 */ \
	if ((unsigned char) omrport_UtActive[26] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((26u << 8) | omrport_UtActive[26]), NULL);} \
	} while(0)
#else
#define Trc_PRT_cuda_ThreadState_clear_exit()   /* tracepoint name: omrport.26 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_ThreadState_set_entry(P1, P2) do { /* tracepoint name: omrport.27 */ \
	if ((unsigned char) omrport_UtActive[27] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((27u << 8) | omrport_UtActive[27]), "\6\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_cuda_ThreadState_set_entry(P1, P2)   /* tracepoint name: omrport.27 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_ThreadState_set_exit() do { /* tracepoint name: omrport.28 */ \
	if ((unsigned char) omrport_UtActive[28] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((28u << 8) | omrport_UtActive[28]), NULL);} \
	} while(0)
#else
#define Trc_PRT_cuda_ThreadState_set_exit()   /* tracepoint name: omrport.28 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_ThreadState_test_entry(P1, P2) do { /* tracepoint name: omrport.29 */ \
	if ((unsigned char) omrport_UtActive[29] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((29u << 8) | omrport_UtActive[29]), "\6\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_cuda_ThreadState_test_entry(P1, P2)   /* tracepoint name: omrport.29 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_ThreadState_test_exit(P1) do { /* tracepoint name: omrport.30 */ \
	if ((unsigned char) omrport_UtActive[30] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((30u << 8) | omrport_UtActive[30]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_ThreadState_test_exit(P1)   /* tracepoint name: omrport.30 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_ThreadState_startup_entry(P1) do { /* tracepoint name: omrport.31 */ \
	if ((unsigned char) omrport_UtActive[31] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((31u << 8) | omrport_UtActive[31]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_ThreadState_startup_entry(P1)   /* tracepoint name: omrport.31 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_ThreadState_startup_exit(P1) do { /* tracepoint name: omrport.32 */ \
	if ((unsigned char) omrport_UtActive[32] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((32u << 8) | omrport_UtActive[32]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_ThreadState_startup_exit(P1)   /* tracepoint name: omrport.32 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_ThreadState_shutdown_entry(P1) do { /* tracepoint name: omrport.33 */ \
	if ((unsigned char) omrport_UtActive[33] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((33u << 8) | omrport_UtActive[33]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_ThreadState_shutdown_entry(P1)   /* tracepoint name: omrport.33 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_ThreadState_shutdown_exit() do { /* tracepoint name: omrport.34 */ \
	if ((unsigned char) omrport_UtActive[34] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((34u << 8) | omrport_UtActive[34]), NULL);} \
	} while(0)
#else
#define Trc_PRT_cuda_ThreadState_shutdown_exit()   /* tracepoint name: omrport.34 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_ThreadState_initCurrent_entry(P1) do { /* tracepoint name: omrport.35 */ \
	if ((unsigned char) omrport_UtActive[35] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((35u << 8) | omrport_UtActive[35]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_ThreadState_initCurrent_entry(P1)   /* tracepoint name: omrport.35 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_ThreadState_initCurrent_exit(P1) do { /* tracepoint name: omrport.36 */ \
	if ((unsigned char) omrport_UtActive[36] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((36u << 8) | omrport_UtActive[36]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_ThreadState_initCurrent_exit(P1)   /* tracepoint name: omrport.36 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_ThreadState_markCurrent_entry(P1) do { /* tracepoint name: omrport.37 */ \
	if ((unsigned char) omrport_UtActive[37] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((37u << 8) | omrport_UtActive[37]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_ThreadState_markCurrent_entry(P1)   /* tracepoint name: omrport.37 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_ThreadState_markCurrent_exit(P1) do { /* tracepoint name: omrport.38 */ \
	if ((unsigned char) omrport_UtActive[38] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((38u << 8) | omrport_UtActive[38]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_ThreadState_markCurrent_exit(P1)   /* tracepoint name: omrport.38 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_ThreadState_unmarkCurrent_entry(P1) do { /* tracepoint name: omrport.39 */ \
	if ((unsigned char) omrport_UtActive[39] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((39u << 8) | omrport_UtActive[39]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_ThreadState_unmarkCurrent_entry(P1)   /* tracepoint name: omrport.39 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_ThreadState_unmarkCurrent_exit(P1) do { /* tracepoint name: omrport.40 */ \
	if ((unsigned char) omrport_UtActive[40] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((40u << 8) | omrport_UtActive[40]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_ThreadState_unmarkCurrent_exit(P1)   /* tracepoint name: omrport.40 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_withDevice_entry(P1) do { /* tracepoint name: omrport.41 */ \
	if ((unsigned char) omrport_UtActive[41] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((41u << 8) | omrport_UtActive[41]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_withDevice_entry(P1)   /* tracepoint name: omrport.41 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_withDevice_get_fail(P1) do { /* tracepoint name: omrport.42 */ \
	if ((unsigned char) omrport_UtActive[42] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((42u << 8) | omrport_UtActive[42]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_withDevice_get_fail(P1)   /* tracepoint name: omrport.42 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_withDevice_set_fail(P1) do { /* tracepoint name: omrport.43 */ \
	if ((unsigned char) omrport_UtActive[43] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((43u << 8) | omrport_UtActive[43]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_withDevice_set_fail(P1)   /* tracepoint name: omrport.43 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_withDevice_prepare_fail(P1) do { /* tracepoint name: omrport.44 */ \
	if ((unsigned char) omrport_UtActive[44] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((44u << 8) | omrport_UtActive[44]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_withDevice_prepare_fail(P1)   /* tracepoint name: omrport.44 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_withDevice_execute_fail(P1) do { /* tracepoint name: omrport.45 */ \
	if ((unsigned char) omrport_UtActive[45] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((45u << 8) | omrport_UtActive[45]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_withDevice_execute_fail(P1)   /* tracepoint name: omrport.45 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_withDevice_onSuccess_fail(P1) do { /* tracepoint name: omrport.46 */ \
	if ((unsigned char) omrport_UtActive[46] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((46u << 8) | omrport_UtActive[46]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_withDevice_onSuccess_fail(P1)   /* tracepoint name: omrport.46 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_withDevice_restore_fail(P1) do { /* tracepoint name: omrport.47 */ \
	if ((unsigned char) omrport_UtActive[47] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((47u << 8) | omrport_UtActive[47]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_withDevice_restore_fail(P1)   /* tracepoint name: omrport.47 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_withDevice_exit(P1) do { /* tracepoint name: omrport.48 */ \
	if ((unsigned char) omrport_UtActive[48] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((48u << 8) | omrport_UtActive[48]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_withDevice_exit(P1)   /* tracepoint name: omrport.48 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_shutdown_entry() do { /* tracepoint name: omrport.49 */ \
	if ((unsigned char) omrport_UtActive[49] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((49u << 8) | omrport_UtActive[49]), NULL);} \
	} while(0)
#else
#define Trc_PRT_cuda_shutdown_entry()   /* tracepoint name: omrport.49 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_shutdown_exit() do { /* tracepoint name: omrport.50 */ \
	if ((unsigned char) omrport_UtActive[50] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((50u << 8) | omrport_UtActive[50]), NULL);} \
	} while(0)
#else
#define Trc_PRT_cuda_shutdown_exit()   /* tracepoint name: omrport.50 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_deviceAlloc_entry(P1, P2) do { /* tracepoint name: omrport.51 */ \
	if ((unsigned char) omrport_UtActive[51] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((51u << 8) | omrport_UtActive[51]), "\4\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_cuda_deviceAlloc_entry(P1, P2)   /* tracepoint name: omrport.51 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_deviceAlloc_result(P1) do { /* tracepoint name: omrport.52 */ \
	if ((unsigned char) omrport_UtActive[52] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((52u << 8) | omrport_UtActive[52]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_deviceAlloc_result(P1)   /* tracepoint name: omrport.52 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_deviceAlloc_exit(P1) do { /* tracepoint name: omrport.53 */ \
	if ((unsigned char) omrport_UtActive[53] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((53u << 8) | omrport_UtActive[53]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_deviceAlloc_exit(P1)   /* tracepoint name: omrport.53 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_deviceCanAccessPeer_entry(P1, P2) do { /* tracepoint name: omrport.54 */ \
	if ((unsigned char) omrport_UtActive[54] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((54u << 8) | omrport_UtActive[54]), "\4\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_cuda_deviceCanAccessPeer_entry(P1, P2)   /* tracepoint name: omrport.54 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_deviceCanAccessPeer_result(P1) do { /* tracepoint name: omrport.55 */ \
	if ((unsigned char) omrport_UtActive[55] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((55u << 8) | omrport_UtActive[55]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_deviceCanAccessPeer_result(P1)   /* tracepoint name: omrport.55 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_deviceCanAccessPeer_exit(P1) do { /* tracepoint name: omrport.56 */ \
	if ((unsigned char) omrport_UtActive[56] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((56u << 8) | omrport_UtActive[56]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_deviceCanAccessPeer_exit(P1)   /* tracepoint name: omrport.56 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_deviceDisablePeerAccess_entry(P1, P2) do { /* tracepoint name: omrport.57 */ \
	if ((unsigned char) omrport_UtActive[57] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((57u << 8) | omrport_UtActive[57]), "\4\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_cuda_deviceDisablePeerAccess_entry(P1, P2)   /* tracepoint name: omrport.57 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_deviceDisablePeerAccess_exit(P1) do { /* tracepoint name: omrport.58 */ \
	if ((unsigned char) omrport_UtActive[58] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((58u << 8) | omrport_UtActive[58]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_deviceDisablePeerAccess_exit(P1)   /* tracepoint name: omrport.58 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_deviceEnablePeerAccess_entry(P1, P2) do { /* tracepoint name: omrport.59 */ \
	if ((unsigned char) omrport_UtActive[59] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((59u << 8) | omrport_UtActive[59]), "\4\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_cuda_deviceEnablePeerAccess_entry(P1, P2)   /* tracepoint name: omrport.59 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_deviceEnablePeerAccess_exit(P1) do { /* tracepoint name: omrport.60 */ \
	if ((unsigned char) omrport_UtActive[60] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((60u << 8) | omrport_UtActive[60]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_deviceEnablePeerAccess_exit(P1)   /* tracepoint name: omrport.60 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_deviceFree_entry(P1, P2) do { /* tracepoint name: omrport.61 */ \
	if ((unsigned char) omrport_UtActive[61] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((61u << 8) | omrport_UtActive[61]), "\4\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_cuda_deviceFree_entry(P1, P2)   /* tracepoint name: omrport.61 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_deviceFree_exit(P1) do { /* tracepoint name: omrport.62 */ \
	if ((unsigned char) omrport_UtActive[62] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((62u << 8) | omrport_UtActive[62]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_deviceFree_exit(P1)   /* tracepoint name: omrport.62 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_deviceGetAttribute_entry(P1, P2) do { /* tracepoint name: omrport.63 */ \
	if ((unsigned char) omrport_UtActive[63] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((63u << 8) | omrport_UtActive[63]), "\4\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_cuda_deviceGetAttribute_entry(P1, P2)   /* tracepoint name: omrport.63 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_deviceGetAttribute_result(P1, P2) do { /* tracepoint name: omrport.64 */ \
	if ((unsigned char) omrport_UtActive[64] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((64u << 8) | omrport_UtActive[64]), "\4\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_cuda_deviceGetAttribute_result(P1, P2)   /* tracepoint name: omrport.64 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_deviceGetAttribute_exit(P1) do { /* tracepoint name: omrport.65 */ \
	if ((unsigned char) omrport_UtActive[65] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((65u << 8) | omrport_UtActive[65]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_deviceGetAttribute_exit(P1)   /* tracepoint name: omrport.65 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_deviceGetCacheConfig_entry(P1) do { /* tracepoint name: omrport.66 */ \
	if ((unsigned char) omrport_UtActive[66] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((66u << 8) | omrport_UtActive[66]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_deviceGetCacheConfig_entry(P1)   /* tracepoint name: omrport.66 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_deviceGetCacheConfig_result(P1) do { /* tracepoint name: omrport.67 */ \
	if ((unsigned char) omrport_UtActive[67] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((67u << 8) | omrport_UtActive[67]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_deviceGetCacheConfig_result(P1)   /* tracepoint name: omrport.67 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_deviceGetCacheConfig_exit(P1) do { /* tracepoint name: omrport.68 */ \
	if ((unsigned char) omrport_UtActive[68] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((68u << 8) | omrport_UtActive[68]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_deviceGetCacheConfig_exit(P1)   /* tracepoint name: omrport.68 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_deviceGetCount_entry() do { /* tracepoint name: omrport.69 */ \
	if ((unsigned char) omrport_UtActive[69] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((69u << 8) | omrport_UtActive[69]), NULL);} \
	} while(0)
#else
#define Trc_PRT_cuda_deviceGetCount_entry()   /* tracepoint name: omrport.69 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_deviceGetCount_result(P1) do { /* tracepoint name: omrport.70 */ \
	if ((unsigned char) omrport_UtActive[70] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((70u << 8) | omrport_UtActive[70]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_deviceGetCount_result(P1)   /* tracepoint name: omrport.70 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_deviceGetCount_exit(P1) do { /* tracepoint name: omrport.71 */ \
	if ((unsigned char) omrport_UtActive[71] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((71u << 8) | omrport_UtActive[71]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_deviceGetCount_exit(P1)   /* tracepoint name: omrport.71 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_deviceGetLimit_entry(P1, P2) do { /* tracepoint name: omrport.72 */ \
	if ((unsigned char) omrport_UtActive[72] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((72u << 8) | omrport_UtActive[72]), "\4\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_cuda_deviceGetLimit_entry(P1, P2)   /* tracepoint name: omrport.72 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_deviceGetLimit_result(P1) do { /* tracepoint name: omrport.73 */ \
	if ((unsigned char) omrport_UtActive[73] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((73u << 8) | omrport_UtActive[73]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_deviceGetLimit_result(P1)   /* tracepoint name: omrport.73 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_deviceGetLimit_exit(P1) do { /* tracepoint name: omrport.74 */ \
	if ((unsigned char) omrport_UtActive[74] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((74u << 8) | omrport_UtActive[74]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_deviceGetLimit_exit(P1)   /* tracepoint name: omrport.74 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_deviceGetMemInfo_entry(P1) do { /* tracepoint name: omrport.75 */ \
	if ((unsigned char) omrport_UtActive[75] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((75u << 8) | omrport_UtActive[75]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_deviceGetMemInfo_entry(P1)   /* tracepoint name: omrport.75 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_deviceGetMemInfo_result(P1, P2) do { /* tracepoint name: omrport.76 */ \
	if ((unsigned char) omrport_UtActive[76] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((76u << 8) | omrport_UtActive[76]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_cuda_deviceGetMemInfo_result(P1, P2)   /* tracepoint name: omrport.76 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_deviceGetMemInfo_exit(P1) do { /* tracepoint name: omrport.77 */ \
	if ((unsigned char) omrport_UtActive[77] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((77u << 8) | omrport_UtActive[77]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_deviceGetMemInfo_exit(P1)   /* tracepoint name: omrport.77 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_deviceGetName_entry(P1) do { /* tracepoint name: omrport.78 */ \
	if ((unsigned char) omrport_UtActive[78] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((78u << 8) | omrport_UtActive[78]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_deviceGetName_entry(P1)   /* tracepoint name: omrport.78 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_deviceGetName_result(P1) do { /* tracepoint name: omrport.79 */ \
	if ((unsigned char) omrport_UtActive[79] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((79u << 8) | omrport_UtActive[79]), "\377", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_deviceGetName_result(P1)   /* tracepoint name: omrport.79 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_deviceGetName_exit(P1) do { /* tracepoint name: omrport.80 */ \
	if ((unsigned char) omrport_UtActive[80] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((80u << 8) | omrport_UtActive[80]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_deviceGetName_exit(P1)   /* tracepoint name: omrport.80 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_deviceGetSharedMemConfig_entry(P1) do { /* tracepoint name: omrport.81 */ \
	if ((unsigned char) omrport_UtActive[81] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((81u << 8) | omrport_UtActive[81]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_deviceGetSharedMemConfig_entry(P1)   /* tracepoint name: omrport.81 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_deviceGetSharedMemConfig_result(P1) do { /* tracepoint name: omrport.82 */ \
	if ((unsigned char) omrport_UtActive[82] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((82u << 8) | omrport_UtActive[82]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_deviceGetSharedMemConfig_result(P1)   /* tracepoint name: omrport.82 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_deviceGetSharedMemConfig_exit(P1) do { /* tracepoint name: omrport.83 */ \
	if ((unsigned char) omrport_UtActive[83] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((83u << 8) | omrport_UtActive[83]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_deviceGetSharedMemConfig_exit(P1)   /* tracepoint name: omrport.83 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_deviceGetStreamPriorityRange_entry(P1) do { /* tracepoint name: omrport.84 */ \
	if ((unsigned char) omrport_UtActive[84] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((84u << 8) | omrport_UtActive[84]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_deviceGetStreamPriorityRange_entry(P1)   /* tracepoint name: omrport.84 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_deviceGetStreamPriorityRange_result(P1, P2) do { /* tracepoint name: omrport.85 */ \
	if ((unsigned char) omrport_UtActive[85] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((85u << 8) | omrport_UtActive[85]), "\4\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_cuda_deviceGetStreamPriorityRange_result(P1, P2)   /* tracepoint name: omrport.85 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_deviceGetStreamPriorityRange_exit(P1) do { /* tracepoint name: omrport.86 */ \
	if ((unsigned char) omrport_UtActive[86] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((86u << 8) | omrport_UtActive[86]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_deviceGetStreamPriorityRange_exit(P1)   /* tracepoint name: omrport.86 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_deviceReset_entry(P1) do { /* tracepoint name: omrport.87 */ \
	if ((unsigned char) omrport_UtActive[87] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((87u << 8) | omrport_UtActive[87]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_deviceReset_entry(P1)   /* tracepoint name: omrport.87 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_deviceReset_exit(P1) do { /* tracepoint name: omrport.88 */ \
	if ((unsigned char) omrport_UtActive[88] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((88u << 8) | omrport_UtActive[88]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_deviceReset_exit(P1)   /* tracepoint name: omrport.88 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_deviceSetCacheConfig_entry(P1, P2) do { /* tracepoint name: omrport.89 */ \
	if ((unsigned char) omrport_UtActive[89] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((89u << 8) | omrport_UtActive[89]), "\4\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_cuda_deviceSetCacheConfig_entry(P1, P2)   /* tracepoint name: omrport.89 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_deviceSetCacheConfig_exit(P1) do { /* tracepoint name: omrport.90 */ \
	if ((unsigned char) omrport_UtActive[90] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((90u << 8) | omrport_UtActive[90]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_deviceSetCacheConfig_exit(P1)   /* tracepoint name: omrport.90 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_deviceSetLimit_entry(P1, P2, P3) do { /* tracepoint name: omrport.91 */ \
	if ((unsigned char) omrport_UtActive[91] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((91u << 8) | omrport_UtActive[91]), "\4\4\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_cuda_deviceSetLimit_entry(P1, P2, P3)   /* tracepoint name: omrport.91 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_deviceSetLimit_exit(P1) do { /* tracepoint name: omrport.92 */ \
	if ((unsigned char) omrport_UtActive[92] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((92u << 8) | omrport_UtActive[92]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_deviceSetLimit_exit(P1)   /* tracepoint name: omrport.92 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_deviceSetSharedMemConfig_entry(P1, P2) do { /* tracepoint name: omrport.93 */ \
	if ((unsigned char) omrport_UtActive[93] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((93u << 8) | omrport_UtActive[93]), "\4\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_cuda_deviceSetSharedMemConfig_entry(P1, P2)   /* tracepoint name: omrport.93 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_deviceSetSharedMemConfig_exit(P1) do { /* tracepoint name: omrport.94 */ \
	if ((unsigned char) omrport_UtActive[94] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((94u << 8) | omrport_UtActive[94]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_deviceSetSharedMemConfig_exit(P1)   /* tracepoint name: omrport.94 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_deviceSynchronize_entry(P1) do { /* tracepoint name: omrport.95 */ \
	if ((unsigned char) omrport_UtActive[95] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((95u << 8) | omrport_UtActive[95]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_deviceSynchronize_entry(P1)   /* tracepoint name: omrport.95 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_deviceSynchronize_exit(P1) do { /* tracepoint name: omrport.96 */ \
	if ((unsigned char) omrport_UtActive[96] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((96u << 8) | omrport_UtActive[96]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_deviceSynchronize_exit(P1)   /* tracepoint name: omrport.96 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_driverGetVersion_entry() do { /* tracepoint name: omrport.97 */ \
	if ((unsigned char) omrport_UtActive[97] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((97u << 8) | omrport_UtActive[97]), NULL);} \
	} while(0)
#else
#define Trc_PRT_cuda_driverGetVersion_entry()   /* tracepoint name: omrport.97 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_driverGetVersion_result(P1) do { /* tracepoint name: omrport.98 */ \
	if ((unsigned char) omrport_UtActive[98] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((98u << 8) | omrport_UtActive[98]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_driverGetVersion_result(P1)   /* tracepoint name: omrport.98 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_driverGetVersion_exit(P1) do { /* tracepoint name: omrport.99 */ \
	if ((unsigned char) omrport_UtActive[99] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((99u << 8) | omrport_UtActive[99]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_driverGetVersion_exit(P1)   /* tracepoint name: omrport.99 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_eventCreate_entry(P1, P2) do { /* tracepoint name: omrport.100 */ \
	if ((unsigned char) omrport_UtActive[100] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((100u << 8) | omrport_UtActive[100]), "\4\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_cuda_eventCreate_entry(P1, P2)   /* tracepoint name: omrport.100 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_eventCreate_result(P1) do { /* tracepoint name: omrport.101 */ \
	if ((unsigned char) omrport_UtActive[101] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((101u << 8) | omrport_UtActive[101]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_eventCreate_result(P1)   /* tracepoint name: omrport.101 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_eventCreate_exit(P1) do { /* tracepoint name: omrport.102 */ \
	if ((unsigned char) omrport_UtActive[102] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((102u << 8) | omrport_UtActive[102]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_eventCreate_exit(P1)   /* tracepoint name: omrport.102 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_eventDestroy_entry(P1, P2) do { /* tracepoint name: omrport.103 */ \
	if ((unsigned char) omrport_UtActive[103] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((103u << 8) | omrport_UtActive[103]), "\4\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_cuda_eventDestroy_entry(P1, P2)   /* tracepoint name: omrport.103 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_eventDestroy_exit(P1) do { /* tracepoint name: omrport.104 */ \
	if ((unsigned char) omrport_UtActive[104] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((104u << 8) | omrport_UtActive[104]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_eventDestroy_exit(P1)   /* tracepoint name: omrport.104 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_eventElapsedTime_entry(P1, P2) do { /* tracepoint name: omrport.105 */ \
	if ((unsigned char) omrport_UtActive[105] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((105u << 8) | omrport_UtActive[105]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_cuda_eventElapsedTime_entry(P1, P2)   /* tracepoint name: omrport.105 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_eventElapsedTime_result(P1) do { /* tracepoint name: omrport.106 */ \
	if ((unsigned char) omrport_UtActive[106] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((106u << 8) | omrport_UtActive[106]), "\7", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_eventElapsedTime_result(P1)   /* tracepoint name: omrport.106 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_eventElapsedTime_exit(P1) do { /* tracepoint name: omrport.107 */ \
	if ((unsigned char) omrport_UtActive[107] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((107u << 8) | omrport_UtActive[107]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_eventElapsedTime_exit(P1)   /* tracepoint name: omrport.107 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_eventQuery_entry(P1) do { /* tracepoint name: omrport.108 */ \
	if ((unsigned char) omrport_UtActive[108] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((108u << 8) | omrport_UtActive[108]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_eventQuery_entry(P1)   /* tracepoint name: omrport.108 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_eventQuery_exit(P1) do { /* tracepoint name: omrport.109 */ \
	if ((unsigned char) omrport_UtActive[109] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((109u << 8) | omrport_UtActive[109]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_eventQuery_exit(P1)   /* tracepoint name: omrport.109 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_eventRecord_entry(P1, P2, P3) do { /* tracepoint name: omrport.110 */ \
	if ((unsigned char) omrport_UtActive[110] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((110u << 8) | omrport_UtActive[110]), "\4\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_cuda_eventRecord_entry(P1, P2, P3)   /* tracepoint name: omrport.110 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_eventRecord_exit(P1) do { /* tracepoint name: omrport.111 */ \
	if ((unsigned char) omrport_UtActive[111] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((111u << 8) | omrport_UtActive[111]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_eventRecord_exit(P1)   /* tracepoint name: omrport.111 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_eventSynchronize_entry(P1) do { /* tracepoint name: omrport.112 */ \
	if ((unsigned char) omrport_UtActive[112] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((112u << 8) | omrport_UtActive[112]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_eventSynchronize_entry(P1)   /* tracepoint name: omrport.112 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_eventSynchronize_exit(P1) do { /* tracepoint name: omrport.113 */ \
	if ((unsigned char) omrport_UtActive[113] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((113u << 8) | omrport_UtActive[113]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_eventSynchronize_exit(P1)   /* tracepoint name: omrport.113 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_funcGetAttribute_entry(P1, P2, P3) do { /* tracepoint name: omrport.114 */ \
	if ((unsigned char) omrport_UtActive[114] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((114u << 8) | omrport_UtActive[114]), "\4\6\4", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_cuda_funcGetAttribute_entry(P1, P2, P3)   /* tracepoint name: omrport.114 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_funcGetAttribute_result(P1) do { /* tracepoint name: omrport.115 */ \
	if ((unsigned char) omrport_UtActive[115] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((115u << 8) | omrport_UtActive[115]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_funcGetAttribute_result(P1)   /* tracepoint name: omrport.115 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_funcGetAttribute_exit(P1) do { /* tracepoint name: omrport.116 */ \
	if ((unsigned char) omrport_UtActive[116] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((116u << 8) | omrport_UtActive[116]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_funcGetAttribute_exit(P1)   /* tracepoint name: omrport.116 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_funcSetCacheConfig_entry(P1, P2, P3) do { /* tracepoint name: omrport.117 */ \
	if ((unsigned char) omrport_UtActive[117] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((117u << 8) | omrport_UtActive[117]), "\4\6\4", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_cuda_funcSetCacheConfig_entry(P1, P2, P3)   /* tracepoint name: omrport.117 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_funcSetCacheConfig_exit(P1) do { /* tracepoint name: omrport.118 */ \
	if ((unsigned char) omrport_UtActive[118] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((118u << 8) | omrport_UtActive[118]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_funcSetCacheConfig_exit(P1)   /* tracepoint name: omrport.118 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_funcSetSharedMemConfig_entry(P1, P2, P3) do { /* tracepoint name: omrport.119 */ \
	if ((unsigned char) omrport_UtActive[119] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((119u << 8) | omrport_UtActive[119]), "\4\6\4", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_cuda_funcSetSharedMemConfig_entry(P1, P2, P3)   /* tracepoint name: omrport.119 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_funcSetSharedMemConfig_exit(P1) do { /* tracepoint name: omrport.120 */ \
	if ((unsigned char) omrport_UtActive[120] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((120u << 8) | omrport_UtActive[120]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_funcSetSharedMemConfig_exit(P1)   /* tracepoint name: omrport.120 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_getErrorString_entry(P1) do { /* tracepoint name: omrport.121 */ \
	if ((unsigned char) omrport_UtActive[121] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((121u << 8) | omrport_UtActive[121]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_getErrorString_entry(P1)   /* tracepoint name: omrport.121 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_getErrorString_exit(P1) do { /* tracepoint name: omrport.122 */ \
	if ((unsigned char) omrport_UtActive[122] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((122u << 8) | omrport_UtActive[122]), "\377", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_getErrorString_exit(P1)   /* tracepoint name: omrport.122 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_hostAlloc_entry(P1, P2) do { /* tracepoint name: omrport.123 */ \
	if ((unsigned char) omrport_UtActive[123] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((123u << 8) | omrport_UtActive[123]), "\6\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_cuda_hostAlloc_entry(P1, P2)   /* tracepoint name: omrport.123 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_hostAlloc_result(P1) do { /* tracepoint name: omrport.124 */ \
	if ((unsigned char) omrport_UtActive[124] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((124u << 8) | omrport_UtActive[124]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_hostAlloc_result(P1)   /* tracepoint name: omrport.124 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_hostAlloc_exit(P1) do { /* tracepoint name: omrport.125 */ \
	if ((unsigned char) omrport_UtActive[125] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((125u << 8) | omrport_UtActive[125]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_hostAlloc_exit(P1)   /* tracepoint name: omrport.125 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_hostFree_entry(P1) do { /* tracepoint name: omrport.126 */ \
	if ((unsigned char) omrport_UtActive[126] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((126u << 8) | omrport_UtActive[126]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_hostFree_entry(P1)   /* tracepoint name: omrport.126 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_hostFree_exit(P1) do { /* tracepoint name: omrport.127 */ \
	if ((unsigned char) omrport_UtActive[127] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((127u << 8) | omrport_UtActive[127]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_hostFree_exit(P1)   /* tracepoint name: omrport.127 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_launchKernel_entry(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11) do { /* tracepoint name: omrport.128 */ \
	if ((unsigned char) omrport_UtActive[128] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((128u << 8) | omrport_UtActive[128]), "\4\6\4\4\4\4\4\4\4\6\6", P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11);} \
	} while(0)
#else
#define Trc_PRT_cuda_launchKernel_entry(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11)   /* tracepoint name: omrport.128 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_launchKernel_exit(P1) do { /* tracepoint name: omrport.129 */ \
	if ((unsigned char) omrport_UtActive[129] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((129u << 8) | omrport_UtActive[129]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_launchKernel_exit(P1)   /* tracepoint name: omrport.129 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_JitOptions_entry(P1) do { /* tracepoint name: omrport.130 */ \
	if ((unsigned char) omrport_UtActive[130] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((130u << 8) | omrport_UtActive[130]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_JitOptions_entry(P1)   /* tracepoint name: omrport.130 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_JitOptions_exit(P1) do { /* tracepoint name: omrport.131 */ \
	if ((unsigned char) omrport_UtActive[131] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((131u << 8) | omrport_UtActive[131]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_JitOptions_exit(P1)   /* tracepoint name: omrport.131 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_JitOptions_exit_invalid() do { /* tracepoint name: omrport.132 */ \
	if ((unsigned char) omrport_UtActive[132] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((132u << 8) | omrport_UtActive[132]), NULL);} \
	} while(0)
#else
#define Trc_PRT_cuda_JitOptions_exit_invalid()   /* tracepoint name: omrport.132 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_linkerAddData_entry(P1, P2, P3, P4, P5, P6, P7) do { /* tracepoint name: omrport.133 */ \
	if ((unsigned char) omrport_UtActive[133] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((133u << 8) | omrport_UtActive[133]), "\4\6\4\6\6\377\6", P1, P2, P3, P4, P5, P6, P7);} \
	} while(0)
#else
#define Trc_PRT_cuda_linkerAddData_entry(P1, P2, P3, P4, P5, P6, P7)   /* tracepoint name: omrport.133 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_linkerAddData_exit(P1) do { /* tracepoint name: omrport.134 */ \
	if ((unsigned char) omrport_UtActive[134] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((134u << 8) | omrport_UtActive[134]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_linkerAddData_exit(P1)   /* tracepoint name: omrport.134 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_linkerComplete_entry(P1, P2) do { /* tracepoint name: omrport.135 */ \
	if ((unsigned char) omrport_UtActive[135] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((135u << 8) | omrport_UtActive[135]), "\4\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_cuda_linkerComplete_entry(P1, P2)   /* tracepoint name: omrport.135 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_linkerComplete_result(P1, P2) do { /* tracepoint name: omrport.136 */ \
	if ((unsigned char) omrport_UtActive[136] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((136u << 8) | omrport_UtActive[136]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_cuda_linkerComplete_result(P1, P2)   /* tracepoint name: omrport.136 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_linkerComplete_exit(P1) do { /* tracepoint name: omrport.137 */ \
	if ((unsigned char) omrport_UtActive[137] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((137u << 8) | omrport_UtActive[137]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_linkerComplete_exit(P1)   /* tracepoint name: omrport.137 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_linkerCreate_entry(P1, P2) do { /* tracepoint name: omrport.138 */ \
	if ((unsigned char) omrport_UtActive[138] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((138u << 8) | omrport_UtActive[138]), "\4\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_cuda_linkerCreate_entry(P1, P2)   /* tracepoint name: omrport.138 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_linkerCreate_nomem() do { /* tracepoint name: omrport.139 */ \
	if ((unsigned char) omrport_UtActive[139] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((139u << 8) | omrport_UtActive[139]), NULL);} \
	} while(0)
#else
#define Trc_PRT_cuda_linkerCreate_nomem()   /* tracepoint name: omrport.139 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_linkerCreate_result(P1) do { /* tracepoint name: omrport.140 */ \
	if ((unsigned char) omrport_UtActive[140] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((140u << 8) | omrport_UtActive[140]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_linkerCreate_result(P1)   /* tracepoint name: omrport.140 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_linkerCreate_exit(P1) do { /* tracepoint name: omrport.141 */ \
	if ((unsigned char) omrport_UtActive[141] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((141u << 8) | omrport_UtActive[141]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_linkerCreate_exit(P1)   /* tracepoint name: omrport.141 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_linkerDestroy_entry(P1, P2) do { /* tracepoint name: omrport.142 */ \
	if ((unsigned char) omrport_UtActive[142] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((142u << 8) | omrport_UtActive[142]), "\4\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_cuda_linkerDestroy_entry(P1, P2)   /* tracepoint name: omrport.142 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_linkerDestroy_exit(P1) do { /* tracepoint name: omrport.143 */ \
	if ((unsigned char) omrport_UtActive[143] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((143u << 8) | omrport_UtActive[143]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_linkerDestroy_exit(P1)   /* tracepoint name: omrport.143 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_memcpy_entry(P1, P2, P3, P4, P5) do { /* tracepoint name: omrport.144 */ \
	if ((unsigned char) omrport_UtActive[144] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((144u << 8) | omrport_UtActive[144]), "\4\6\6\6\4", P1, P2, P3, P4, P5);} \
	} while(0)
#else
#define Trc_PRT_cuda_memcpy_entry(P1, P2, P3, P4, P5)   /* tracepoint name: omrport.144 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_memcpy_exit(P1) do { /* tracepoint name: omrport.145 */ \
	if ((unsigned char) omrport_UtActive[145] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((145u << 8) | omrport_UtActive[145]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_memcpy_exit(P1)   /* tracepoint name: omrport.145 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_memcpyPeer_entry(P1, P2, P3, P4, P5) do { /* tracepoint name: omrport.146 */ \
	if ((unsigned char) omrport_UtActive[146] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((146u << 8) | omrport_UtActive[146]), "\4\6\4\6\6", P1, P2, P3, P4, P5);} \
	} while(0)
#else
#define Trc_PRT_cuda_memcpyPeer_entry(P1, P2, P3, P4, P5)   /* tracepoint name: omrport.146 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_memcpyPeer_exit(P1) do { /* tracepoint name: omrport.147 */ \
	if ((unsigned char) omrport_UtActive[147] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((147u << 8) | omrport_UtActive[147]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_memcpyPeer_exit(P1)   /* tracepoint name: omrport.147 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_memset8_exit(P1) do { /* tracepoint name: omrport.148 */ \
	if ((unsigned char) omrport_UtActive[148] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((148u << 8) | omrport_UtActive[148]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_memset8_exit(P1)   /* tracepoint name: omrport.148 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_memset16_exit(P1) do { /* tracepoint name: omrport.149 */ \
	if ((unsigned char) omrport_UtActive[149] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((149u << 8) | omrport_UtActive[149]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_memset16_exit(P1)   /* tracepoint name: omrport.149 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_memset32_exit(P1) do { /* tracepoint name: omrport.150 */ \
	if ((unsigned char) omrport_UtActive[150] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((150u << 8) | omrport_UtActive[150]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_memset32_exit(P1)   /* tracepoint name: omrport.150 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_moduleGetFunction_entry(P1, P2, P3) do { /* tracepoint name: omrport.151 */ \
	if ((unsigned char) omrport_UtActive[151] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((151u << 8) | omrport_UtActive[151]), "\4\6\377", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_cuda_moduleGetFunction_entry(P1, P2, P3)   /* tracepoint name: omrport.151 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_moduleGetFunction_result(P1) do { /* tracepoint name: omrport.152 */ \
	if ((unsigned char) omrport_UtActive[152] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((152u << 8) | omrport_UtActive[152]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_moduleGetFunction_result(P1)   /* tracepoint name: omrport.152 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_moduleGetFunction_exit(P1) do { /* tracepoint name: omrport.153 */ \
	if ((unsigned char) omrport_UtActive[153] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((153u << 8) | omrport_UtActive[153]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_moduleGetFunction_exit(P1)   /* tracepoint name: omrport.153 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_moduleGetGlobal_entry(P1, P2, P3) do { /* tracepoint name: omrport.154 */ \
	if ((unsigned char) omrport_UtActive[154] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((154u << 8) | omrport_UtActive[154]), "\4\6\377", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_cuda_moduleGetGlobal_entry(P1, P2, P3)   /* tracepoint name: omrport.154 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_moduleGetGlobal_result(P1, P2) do { /* tracepoint name: omrport.155 */ \
	if ((unsigned char) omrport_UtActive[155] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((155u << 8) | omrport_UtActive[155]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_cuda_moduleGetGlobal_result(P1, P2)   /* tracepoint name: omrport.155 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_moduleGetGlobal_exit(P1) do { /* tracepoint name: omrport.156 */ \
	if ((unsigned char) omrport_UtActive[156] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((156u << 8) | omrport_UtActive[156]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_moduleGetGlobal_exit(P1)   /* tracepoint name: omrport.156 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_moduleGetSurfRef_entry(P1, P2, P3) do { /* tracepoint name: omrport.157 */ \
	if ((unsigned char) omrport_UtActive[157] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((157u << 8) | omrport_UtActive[157]), "\4\6\377", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_cuda_moduleGetSurfRef_entry(P1, P2, P3)   /* tracepoint name: omrport.157 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_moduleGetSurfRef_result(P1) do { /* tracepoint name: omrport.158 */ \
	if ((unsigned char) omrport_UtActive[158] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((158u << 8) | omrport_UtActive[158]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_moduleGetSurfRef_result(P1)   /* tracepoint name: omrport.158 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_moduleGetSurfRef_exit(P1) do { /* tracepoint name: omrport.159 */ \
	if ((unsigned char) omrport_UtActive[159] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((159u << 8) | omrport_UtActive[159]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_moduleGetSurfRef_exit(P1)   /* tracepoint name: omrport.159 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_moduleGetTexRef_entry(P1, P2, P3) do { /* tracepoint name: omrport.160 */ \
	if ((unsigned char) omrport_UtActive[160] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((160u << 8) | omrport_UtActive[160]), "\4\6\377", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_cuda_moduleGetTexRef_entry(P1, P2, P3)   /* tracepoint name: omrport.160 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_moduleGetTexRef_result(P1) do { /* tracepoint name: omrport.161 */ \
	if ((unsigned char) omrport_UtActive[161] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((161u << 8) | omrport_UtActive[161]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_moduleGetTexRef_result(P1)   /* tracepoint name: omrport.161 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_moduleGetTexRef_exit(P1) do { /* tracepoint name: omrport.162 */ \
	if ((unsigned char) omrport_UtActive[162] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((162u << 8) | omrport_UtActive[162]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_moduleGetTexRef_exit(P1)   /* tracepoint name: omrport.162 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_moduleLoad_entry(P1, P2, P3) do { /* tracepoint name: omrport.163 */ \
	if ((unsigned char) omrport_UtActive[163] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((163u << 8) | omrport_UtActive[163]), "\4\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_cuda_moduleLoad_entry(P1, P2, P3)   /* tracepoint name: omrport.163 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_moduleLoad_result(P1) do { /* tracepoint name: omrport.164 */ \
	if ((unsigned char) omrport_UtActive[164] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((164u << 8) | omrport_UtActive[164]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_moduleLoad_result(P1)   /* tracepoint name: omrport.164 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_moduleLoad_exit(P1) do { /* tracepoint name: omrport.165 */ \
	if ((unsigned char) omrport_UtActive[165] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((165u << 8) | omrport_UtActive[165]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_moduleLoad_exit(P1)   /* tracepoint name: omrport.165 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_moduleUnload_entry(P1, P2) do { /* tracepoint name: omrport.166 */ \
	if ((unsigned char) omrport_UtActive[166] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((166u << 8) | omrport_UtActive[166]), "\4\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_cuda_moduleUnload_entry(P1, P2)   /* tracepoint name: omrport.166 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_moduleUnload_exit(P1) do { /* tracepoint name: omrport.167 */ \
	if ((unsigned char) omrport_UtActive[167] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((167u << 8) | omrport_UtActive[167]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_moduleUnload_exit(P1)   /* tracepoint name: omrport.167 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_runtimeGetVersion_entry() do { /* tracepoint name: omrport.168 */ \
	if ((unsigned char) omrport_UtActive[168] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((168u << 8) | omrport_UtActive[168]), NULL);} \
	} while(0)
#else
#define Trc_PRT_cuda_runtimeGetVersion_entry()   /* tracepoint name: omrport.168 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_runtimeGetVersion_result(P1) do { /* tracepoint name: omrport.169 */ \
	if ((unsigned char) omrport_UtActive[169] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((169u << 8) | omrport_UtActive[169]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_runtimeGetVersion_result(P1)   /* tracepoint name: omrport.169 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_runtimeGetVersion_exit(P1) do { /* tracepoint name: omrport.170 */ \
	if ((unsigned char) omrport_UtActive[170] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((170u << 8) | omrport_UtActive[170]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_runtimeGetVersion_exit(P1)   /* tracepoint name: omrport.170 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_StreamCallback_handler_entry(P1, P2, P3) do { /* tracepoint name: omrport.171 */ \
	if ((unsigned char) omrport_UtActive[171] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((171u << 8) | omrport_UtActive[171]), "\6\4\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_cuda_StreamCallback_handler_entry(P1, P2, P3)   /* tracepoint name: omrport.171 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_StreamCallback_handler_exit() do { /* tracepoint name: omrport.172 */ \
	if ((unsigned char) omrport_UtActive[172] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((172u << 8) | omrport_UtActive[172]), NULL);} \
	} while(0)
#else
#define Trc_PRT_cuda_StreamCallback_handler_exit()   /* tracepoint name: omrport.172 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_streamAddCallback_entry(P1, P2, P3, P4) do { /* tracepoint name: omrport.173 */ \
	if ((unsigned char) omrport_UtActive[173] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((173u << 8) | omrport_UtActive[173]), "\4\6\6\6", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_PRT_cuda_streamAddCallback_entry(P1, P2, P3, P4)   /* tracepoint name: omrport.173 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_streamAddCallback_nomem() do { /* tracepoint name: omrport.174 */ \
	if ((unsigned char) omrport_UtActive[174] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((174u << 8) | omrport_UtActive[174]), NULL);} \
	} while(0)
#else
#define Trc_PRT_cuda_streamAddCallback_nomem()   /* tracepoint name: omrport.174 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_streamAddCallback_instance(P1) do { /* tracepoint name: omrport.175 */ \
	if ((unsigned char) omrport_UtActive[175] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((175u << 8) | omrport_UtActive[175]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_streamAddCallback_instance(P1)   /* tracepoint name: omrport.175 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_streamAddCallback_exit(P1) do { /* tracepoint name: omrport.176 */ \
	if ((unsigned char) omrport_UtActive[176] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((176u << 8) | omrport_UtActive[176]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_streamAddCallback_exit(P1)   /* tracepoint name: omrport.176 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_streamCreate_entry(P1) do { /* tracepoint name: omrport.177 */ \
	if ((unsigned char) omrport_UtActive[177] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((177u << 8) | omrport_UtActive[177]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_streamCreate_entry(P1)   /* tracepoint name: omrport.177 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_streamCreate_result(P1) do { /* tracepoint name: omrport.178 */ \
	if ((unsigned char) omrport_UtActive[178] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((178u << 8) | omrport_UtActive[178]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_streamCreate_result(P1)   /* tracepoint name: omrport.178 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_streamCreate_exit(P1) do { /* tracepoint name: omrport.179 */ \
	if ((unsigned char) omrport_UtActive[179] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((179u << 8) | omrport_UtActive[179]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_streamCreate_exit(P1)   /* tracepoint name: omrport.179 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_streamCreateWithPriority_entry(P1, P2, P3) do { /* tracepoint name: omrport.180 */ \
	if ((unsigned char) omrport_UtActive[180] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((180u << 8) | omrport_UtActive[180]), "\4\4\4", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_cuda_streamCreateWithPriority_entry(P1, P2, P3)   /* tracepoint name: omrport.180 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_streamCreateWithPriority_result(P1) do { /* tracepoint name: omrport.181 */ \
	if ((unsigned char) omrport_UtActive[181] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((181u << 8) | omrport_UtActive[181]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_streamCreateWithPriority_result(P1)   /* tracepoint name: omrport.181 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_streamCreateWithPriority_exit(P1) do { /* tracepoint name: omrport.182 */ \
	if ((unsigned char) omrport_UtActive[182] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((182u << 8) | omrport_UtActive[182]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_streamCreateWithPriority_exit(P1)   /* tracepoint name: omrport.182 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_streamDestroy_entry(P1, P2) do { /* tracepoint name: omrport.183 */ \
	if ((unsigned char) omrport_UtActive[183] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((183u << 8) | omrport_UtActive[183]), "\4\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_cuda_streamDestroy_entry(P1, P2)   /* tracepoint name: omrport.183 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_streamDestroy_exit(P1) do { /* tracepoint name: omrport.184 */ \
	if ((unsigned char) omrport_UtActive[184] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((184u << 8) | omrport_UtActive[184]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_streamDestroy_exit(P1)   /* tracepoint name: omrport.184 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_streamGetFlags_entry(P1, P2) do { /* tracepoint name: omrport.185 */ \
	if ((unsigned char) omrport_UtActive[185] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((185u << 8) | omrport_UtActive[185]), "\4\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_cuda_streamGetFlags_entry(P1, P2)   /* tracepoint name: omrport.185 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_streamGetFlags_result(P1) do { /* tracepoint name: omrport.186 */ \
	if ((unsigned char) omrport_UtActive[186] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((186u << 8) | omrport_UtActive[186]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_streamGetFlags_result(P1)   /* tracepoint name: omrport.186 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_streamGetFlags_exit(P1) do { /* tracepoint name: omrport.187 */ \
	if ((unsigned char) omrport_UtActive[187] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((187u << 8) | omrport_UtActive[187]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_streamGetFlags_exit(P1)   /* tracepoint name: omrport.187 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_streamGetPriority_entry(P1, P2) do { /* tracepoint name: omrport.188 */ \
	if ((unsigned char) omrport_UtActive[188] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((188u << 8) | omrport_UtActive[188]), "\4\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_cuda_streamGetPriority_entry(P1, P2)   /* tracepoint name: omrport.188 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_streamGetPriority_result(P1) do { /* tracepoint name: omrport.189 */ \
	if ((unsigned char) omrport_UtActive[189] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((189u << 8) | omrport_UtActive[189]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_streamGetPriority_result(P1)   /* tracepoint name: omrport.189 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_streamGetPriority_exit(P1) do { /* tracepoint name: omrport.190 */ \
	if ((unsigned char) omrport_UtActive[190] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((190u << 8) | omrport_UtActive[190]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_streamGetPriority_exit(P1)   /* tracepoint name: omrport.190 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_streamQuery_entry(P1, P2) do { /* tracepoint name: omrport.191 */ \
	if ((unsigned char) omrport_UtActive[191] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((191u << 8) | omrport_UtActive[191]), "\4\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_cuda_streamQuery_entry(P1, P2)   /* tracepoint name: omrport.191 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_streamQuery_exit(P1) do { /* tracepoint name: omrport.192 */ \
	if ((unsigned char) omrport_UtActive[192] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((192u << 8) | omrport_UtActive[192]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_streamQuery_exit(P1)   /* tracepoint name: omrport.192 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_streamSynchronize_entry(P1, P2) do { /* tracepoint name: omrport.193 */ \
	if ((unsigned char) omrport_UtActive[193] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((193u << 8) | omrport_UtActive[193]), "\4\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_cuda_streamSynchronize_entry(P1, P2)   /* tracepoint name: omrport.193 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_streamSynchronize_exit(P1) do { /* tracepoint name: omrport.194 */ \
	if ((unsigned char) omrport_UtActive[194] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((194u << 8) | omrport_UtActive[194]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_streamSynchronize_exit(P1)   /* tracepoint name: omrport.194 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_streamWaitEvent_entry(P1, P2, P3) do { /* tracepoint name: omrport.195 */ \
	if ((unsigned char) omrport_UtActive[195] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((195u << 8) | omrport_UtActive[195]), "\4\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_cuda_streamWaitEvent_entry(P1, P2, P3)   /* tracepoint name: omrport.195 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_streamWaitEvent_exit(P1) do { /* tracepoint name: omrport.196 */ \
	if ((unsigned char) omrport_UtActive[196] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((196u << 8) | omrport_UtActive[196]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_streamWaitEvent_exit(P1)   /* tracepoint name: omrport.196 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_funcMaxActiveBlocksPerMultiprocessor_entry(P1, P2, P3, P4, P5) do { /* tracepoint name: omrport.197 */ \
	if ((unsigned char) omrport_UtActive[197] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((197u << 8) | omrport_UtActive[197]), "\4\6\4\4\4", P1, P2, P3, P4, P5);} \
	} while(0)
#else
#define Trc_PRT_cuda_funcMaxActiveBlocksPerMultiprocessor_entry(P1, P2, P3, P4, P5)   /* tracepoint name: omrport.197 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_funcMaxActiveBlocksPerMultiprocessor_result(P1) do { /* tracepoint name: omrport.198 */ \
	if ((unsigned char) omrport_UtActive[198] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((198u << 8) | omrport_UtActive[198]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_funcMaxActiveBlocksPerMultiprocessor_result(P1)   /* tracepoint name: omrport.198 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_funcMaxActiveBlocksPerMultiprocessor_exit(P1) do { /* tracepoint name: omrport.199 */ \
	if ((unsigned char) omrport_UtActive[199] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((199u << 8) | omrport_UtActive[199]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_funcMaxActiveBlocksPerMultiprocessor_exit(P1)   /* tracepoint name: omrport.199 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_funcMaxPotentialBlockSize_entry(P1, P2, P3, P4, P5, P6) do { /* tracepoint name: omrport.200 */ \
	if ((unsigned char) omrport_UtActive[200] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((200u << 8) | omrport_UtActive[200]), "\4\6\6\6\4\4", P1, P2, P3, P4, P5, P6);} \
	} while(0)
#else
#define Trc_PRT_cuda_funcMaxPotentialBlockSize_entry(P1, P2, P3, P4, P5, P6)   /* tracepoint name: omrport.200 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_funcMaxPotentialBlockSize_result(P1, P2) do { /* tracepoint name: omrport.201 */ \
	if ((unsigned char) omrport_UtActive[201] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((201u << 8) | omrport_UtActive[201]), "\4\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_cuda_funcMaxPotentialBlockSize_result(P1, P2)   /* tracepoint name: omrport.201 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_funcMaxPotentialBlockSize_exit(P1) do { /* tracepoint name: omrport.202 */ \
	if ((unsigned char) omrport_UtActive[202] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((202u << 8) | omrport_UtActive[202]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_funcMaxPotentialBlockSize_exit(P1)   /* tracepoint name: omrport.202 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_memcpyAsync_entry(P1, P2, P3, P4, P5, P6) do { /* tracepoint name: omrport.203 */ \
	if ((unsigned char) omrport_UtActive[203] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((203u << 8) | omrport_UtActive[203]), "\4\6\6\6\4\6", P1, P2, P3, P4, P5, P6);} \
	} while(0)
#else
#define Trc_PRT_cuda_memcpyAsync_entry(P1, P2, P3, P4, P5, P6)   /* tracepoint name: omrport.203 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_memcpyAsync_exit(P1) do { /* tracepoint name: omrport.204 */ \
	if ((unsigned char) omrport_UtActive[204] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((204u << 8) | omrport_UtActive[204]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_memcpyAsync_exit(P1)   /* tracepoint name: omrport.204 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_memcpyPeerAsync_entry(P1, P2, P3, P4, P5, P6) do { /* tracepoint name: omrport.205 */ \
	if ((unsigned char) omrport_UtActive[205] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((205u << 8) | omrport_UtActive[205]), "\4\6\4\6\6\6", P1, P2, P3, P4, P5, P6);} \
	} while(0)
#else
#define Trc_PRT_cuda_memcpyPeerAsync_entry(P1, P2, P3, P4, P5, P6)   /* tracepoint name: omrport.205 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_memcpyPeerAsync_exit(P1) do { /* tracepoint name: omrport.206 */ \
	if ((unsigned char) omrport_UtActive[206] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((206u << 8) | omrport_UtActive[206]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_memcpyPeerAsync_exit(P1)   /* tracepoint name: omrport.206 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_memcpy2D_entry(P1, P2, P3, P4, P5, P6, P7, P8) do { /* tracepoint name: omrport.207 */ \
	if ((unsigned char) omrport_UtActive[207] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((207u << 8) | omrport_UtActive[207]), "\4\6\6\6\6\6\6\4", P1, P2, P3, P4, P5, P6, P7, P8);} \
	} while(0)
#else
#define Trc_PRT_cuda_memcpy2D_entry(P1, P2, P3, P4, P5, P6, P7, P8)   /* tracepoint name: omrport.207 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_memcpy2D_exit(P1) do { /* tracepoint name: omrport.208 */ \
	if ((unsigned char) omrport_UtActive[208] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((208u << 8) | omrport_UtActive[208]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_memcpy2D_exit(P1)   /* tracepoint name: omrport.208 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_memcpy2DAsync_entry(P1, P2, P3, P4, P5, P6, P7, P8, P9) do { /* tracepoint name: omrport.209 */ \
	if ((unsigned char) omrport_UtActive[209] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((209u << 8) | omrport_UtActive[209]), "\4\6\6\6\6\6\6\4\6", P1, P2, P3, P4, P5, P6, P7, P8, P9);} \
	} while(0)
#else
#define Trc_PRT_cuda_memcpy2DAsync_entry(P1, P2, P3, P4, P5, P6, P7, P8, P9)   /* tracepoint name: omrport.209 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_memcpy2DAsync_exit(P1) do { /* tracepoint name: omrport.210 */ \
	if ((unsigned char) omrport_UtActive[210] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((210u << 8) | omrport_UtActive[210]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_cuda_memcpy2DAsync_exit(P1)   /* tracepoint name: omrport.210 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_memset8_entry(P1, P2, P3, P4, P5) do { /* tracepoint name: omrport.211 */ \
	if ((unsigned char) omrport_UtActive[211] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((211u << 8) | omrport_UtActive[211]), "\4\6\4\6\6", P1, P2, P3, P4, P5);} \
	} while(0)
#else
#define Trc_PRT_cuda_memset8_entry(P1, P2, P3, P4, P5)   /* tracepoint name: omrport.211 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_memset16_entry(P1, P2, P3, P4, P5) do { /* tracepoint name: omrport.212 */ \
	if ((unsigned char) omrport_UtActive[212] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((212u << 8) | omrport_UtActive[212]), "\4\6\4\6\6", P1, P2, P3, P4, P5);} \
	} while(0)
#else
#define Trc_PRT_cuda_memset16_entry(P1, P2, P3, P4, P5)   /* tracepoint name: omrport.212 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_memset32_entry(P1, P2, P3, P4, P5) do { /* tracepoint name: omrport.213 */ \
	if ((unsigned char) omrport_UtActive[213] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((213u << 8) | omrport_UtActive[213]), "\4\6\4\6\6", P1, P2, P3, P4, P5);} \
	} while(0)
#else
#define Trc_PRT_cuda_memset32_entry(P1, P2, P3, P4, P5)   /* tracepoint name: omrport.213 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_open_Entry(P1, P2, P3) do { /* tracepoint name: omrport.214 */ \
	if ((unsigned char) omrport_UtActive[214] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((214u << 8) | omrport_UtActive[214]), "\377\4\4", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_file_open_Entry(P1, P2, P3)   /* tracepoint name: omrport.214 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_open_Exit(P1) do { /* tracepoint name: omrport.215 */ \
	if ((unsigned char) omrport_UtActive[215] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((215u << 8) | omrport_UtActive[215]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_file_open_Exit(P1)   /* tracepoint name: omrport.215 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_read_Entry(P1, P2, P3) do { /* tracepoint name: omrport.216 */ \
	if ((unsigned char) omrport_UtActive[216] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((216u << 8) | omrport_UtActive[216]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_file_read_Entry(P1, P2, P3)   /* tracepoint name: omrport.216 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_read_Exit(P1) do { /* tracepoint name: omrport.217 */ \
	if ((unsigned char) omrport_UtActive[217] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((217u << 8) | omrport_UtActive[217]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_file_read_Exit(P1)   /* tracepoint name: omrport.217 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_write_Entry(P1, P2, P3) do { /* tracepoint name: omrport.218 */ \
	if ((unsigned char) omrport_UtActive[218] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((218u << 8) | omrport_UtActive[218]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_file_write_Entry(P1, P2, P3)   /* tracepoint name: omrport.218 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_write_Exit(P1) do { /* tracepoint name: omrport.219 */ \
	if ((unsigned char) omrport_UtActive[219] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((219u << 8) | omrport_UtActive[219]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_file_write_Exit(P1)   /* tracepoint name: omrport.219 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_attr_Entry(P1) do { /* tracepoint name: omrport.220 */ \
	if ((unsigned char) omrport_UtActive[220] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((220u << 8) | omrport_UtActive[220]), "\377", P1);} \
	} while(0)
#else
#define Trc_PRT_file_attr_Entry(P1)   /* tracepoint name: omrport.220 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_attr_ExitFail(P1) do { /* tracepoint name: omrport.221 */ \
	if ((unsigned char) omrport_UtActive[221] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((221u << 8) | omrport_UtActive[221]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_file_attr_ExitFail(P1)   /* tracepoint name: omrport.221 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_attr_ExitDir(P1) do { /* tracepoint name: omrport.222 */ \
	if ((unsigned char) omrport_UtActive[222] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((222u << 8) | omrport_UtActive[222]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_file_attr_ExitDir(P1)   /* tracepoint name: omrport.222 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_attr_ExitFile(P1) do { /* tracepoint name: omrport.223 */ \
	if ((unsigned char) omrport_UtActive[223] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((223u << 8) | omrport_UtActive[223]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_file_attr_ExitFile(P1)   /* tracepoint name: omrport.223 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_close_Entry(P1) do { /* tracepoint name: omrport.224 */ \
	if ((unsigned char) omrport_UtActive[224] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((224u << 8) | omrport_UtActive[224]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_file_close_Entry(P1)   /* tracepoint name: omrport.224 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_close_ExitFail(P1) do { /* tracepoint name: omrport.225 */ \
	if ((unsigned char) omrport_UtActive[225] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((225u << 8) | omrport_UtActive[225]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_file_close_ExitFail(P1)   /* tracepoint name: omrport.225 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_close_Exit(P1) do { /* tracepoint name: omrport.226 */ \
	if ((unsigned char) omrport_UtActive[226] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((226u << 8) | omrport_UtActive[226]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_file_close_Exit(P1)   /* tracepoint name: omrport.226 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_findfirst_Exit(P1) do { /* tracepoint name: omrport.227 */ \
	if ((unsigned char) omrport_UtActive[227] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((227u << 8) | omrport_UtActive[227]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_file_findfirst_Exit(P1)   /* tracepoint name: omrport.227 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_findnext_Exit(P1) do { /* tracepoint name: omrport.228 */ \
	if ((unsigned char) omrport_UtActive[228] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((228u << 8) | omrport_UtActive[228]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_file_findnext_Exit(P1)   /* tracepoint name: omrport.228 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_findclose_Entry(P1) do { /* tracepoint name: omrport.229 */ \
	if ((unsigned char) omrport_UtActive[229] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((229u << 8) | omrport_UtActive[229]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_file_findclose_Entry(P1)   /* tracepoint name: omrport.229 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_findclose_Exit(P1) do { /* tracepoint name: omrport.230 */ \
	if ((unsigned char) omrport_UtActive[230] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((230u << 8) | omrport_UtActive[230]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_file_findclose_Exit(P1)   /* tracepoint name: omrport.230 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_lastmod_Entry(P1) do { /* tracepoint name: omrport.231 */ \
	if ((unsigned char) omrport_UtActive[231] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((231u << 8) | omrport_UtActive[231]), "\377", P1);} \
	} while(0)
#else
#define Trc_PRT_file_lastmod_Entry(P1)   /* tracepoint name: omrport.231 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_lastmod_Exit(P1) do { /* tracepoint name: omrport.232 */ \
	if ((unsigned char) omrport_UtActive[232] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((232u << 8) | omrport_UtActive[232]), "\10", P1);} \
	} while(0)
#else
#define Trc_PRT_file_lastmod_Exit(P1)   /* tracepoint name: omrport.232 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_length_Entry(P1) do { /* tracepoint name: omrport.233 */ \
	if ((unsigned char) omrport_UtActive[233] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((233u << 8) | omrport_UtActive[233]), "\377", P1);} \
	} while(0)
#else
#define Trc_PRT_file_length_Entry(P1)   /* tracepoint name: omrport.233 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_length_Exit(P1) do { /* tracepoint name: omrport.234 */ \
	if ((unsigned char) omrport_UtActive[234] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((234u << 8) | omrport_UtActive[234]), "\10", P1);} \
	} while(0)
#else
#define Trc_PRT_file_length_Exit(P1)   /* tracepoint name: omrport.234 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_seek_Entry(P1, P2, P3) do { /* tracepoint name: omrport.235 */ \
	if ((unsigned char) omrport_UtActive[235] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((235u << 8) | omrport_UtActive[235]), "\6\10\4", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_file_seek_Entry(P1, P2, P3)   /* tracepoint name: omrport.235 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_seek_Exit(P1) do { /* tracepoint name: omrport.236 */ \
	if ((unsigned char) omrport_UtActive[236] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((236u << 8) | omrport_UtActive[236]), "\10", P1);} \
	} while(0)
#else
#define Trc_PRT_file_seek_Exit(P1)   /* tracepoint name: omrport.236 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_sync_Entry(P1) do { /* tracepoint name: omrport.237 */ \
	if ((unsigned char) omrport_UtActive[237] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((237u << 8) | omrport_UtActive[237]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_file_sync_Entry(P1)   /* tracepoint name: omrport.237 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_sync_Exit(P1) do { /* tracepoint name: omrport.238 */ \
	if ((unsigned char) omrport_UtActive[238] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((238u << 8) | omrport_UtActive[238]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_file_sync_Exit(P1)   /* tracepoint name: omrport.238 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_printf_Entry(P1, P2) do { /* tracepoint name: omrport.239 */ \
	if ((unsigned char) omrport_UtActive[239] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((239u << 8) | omrport_UtActive[239]), "\6\377", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_file_printf_Entry(P1, P2)   /* tracepoint name: omrport.239 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_printf_Exit() do { /* tracepoint name: omrport.240 */ \
	if ((unsigned char) omrport_UtActive[240] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((240u << 8) | omrport_UtActive[240]), NULL);} \
	} while(0)
#else
#define Trc_PRT_file_printf_Exit()   /* tracepoint name: omrport.240 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_setlength_Entry(P1, P2) do { /* tracepoint name: omrport.241 */ \
	if ((unsigned char) omrport_UtActive[241] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((241u << 8) | omrport_UtActive[241]), "\6\10", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_file_setlength_Entry(P1, P2)   /* tracepoint name: omrport.241 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_setlength_Exit(P1) do { /* tracepoint name: omrport.242 */ \
	if ((unsigned char) omrport_UtActive[242] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((242u << 8) | omrport_UtActive[242]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_file_setlength_Exit(P1)   /* tracepoint name: omrport.242 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_lock_bytes_win32_entered(P1, P2, P3, P4) do { /* tracepoint name: omrport.243 */ \
	if ((unsigned char) omrport_UtActive[243] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((243u << 8) | omrport_UtActive[243]), "\6\4\10\10", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_PRT_file_lock_bytes_win32_entered(P1, P2, P3, P4)   /* tracepoint name: omrport.243 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_lock_bytes_win32_callingLockFileEx(P1, P2, P3, P4, P5) do { /* tracepoint name: omrport.244 */ \
	if ((unsigned char) omrport_UtActive[244] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((244u << 8) | omrport_UtActive[244]), "\4\4\4\4\4", P1, P2, P3, P4, P5);} \
	} while(0)
#else
#define Trc_PRT_file_lock_bytes_win32_callingLockFileEx(P1, P2, P3, P4, P5)   /* tracepoint name: omrport.244 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_lock_bytes_win32_exiting() do { /* tracepoint name: omrport.245 */ \
	if ((unsigned char) omrport_UtActive[245] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((245u << 8) | omrport_UtActive[245]), NULL);} \
	} while(0)
#else
#define Trc_PRT_file_lock_bytes_win32_exiting()   /* tracepoint name: omrport.245 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_lock_bytes_unix_entered(P1, P2, P3, P4) do { /* tracepoint name: omrport.246 */ \
	if ((unsigned char) omrport_UtActive[246] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((246u << 8) | omrport_UtActive[246]), "\6\4\10\10", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_PRT_file_lock_bytes_unix_entered(P1, P2, P3, P4)   /* tracepoint name: omrport.246 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_lock_bytes_unix_callingFcntl(P1, P2, P3, P4, P5) do { /* tracepoint name: omrport.247 */ \
	if ((unsigned char) omrport_UtActive[247] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((247u << 8) | omrport_UtActive[247]), "\4\4\4\10\10", P1, P2, P3, P4, P5);} \
	} while(0)
#else
#define Trc_PRT_file_lock_bytes_unix_callingFcntl(P1, P2, P3, P4, P5)   /* tracepoint name: omrport.247 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_lock_bytes_unix_exiting() do { /* tracepoint name: omrport.248 */ \
	if ((unsigned char) omrport_UtActive[248] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((248u << 8) | omrport_UtActive[248]), NULL);} \
	} while(0)
#else
#define Trc_PRT_file_lock_bytes_unix_exiting()   /* tracepoint name: omrport.248 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_unlock_bytes_win32_entered(P1, P2, P3) do { /* tracepoint name: omrport.249 */ \
	if ((unsigned char) omrport_UtActive[249] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((249u << 8) | omrport_UtActive[249]), "\6\10\10", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_file_unlock_bytes_win32_entered(P1, P2, P3)   /* tracepoint name: omrport.249 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_unlock_bytes_win32_callingUnlockFileEx(P1, P2, P3, P4) do { /* tracepoint name: omrport.250 */ \
	if ((unsigned char) omrport_UtActive[250] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((250u << 8) | omrport_UtActive[250]), "\4\4\4\4", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_PRT_file_unlock_bytes_win32_callingUnlockFileEx(P1, P2, P3, P4)   /* tracepoint name: omrport.250 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_unlock_bytes_win32_exiting() do { /* tracepoint name: omrport.251 */ \
	if ((unsigned char) omrport_UtActive[251] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((251u << 8) | omrport_UtActive[251]), NULL);} \
	} while(0)
#else
#define Trc_PRT_file_unlock_bytes_win32_exiting()   /* tracepoint name: omrport.251 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_unlock_bytes_unix_entered(P1, P2, P3) do { /* tracepoint name: omrport.252 */ \
	if ((unsigned char) omrport_UtActive[252] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((252u << 8) | omrport_UtActive[252]), "\6\10\10", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_file_unlock_bytes_unix_entered(P1, P2, P3)   /* tracepoint name: omrport.252 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_unlock_bytes_unix_callingFcntl(P1, P2, P3, P4, P5) do { /* tracepoint name: omrport.253 */ \
	if ((unsigned char) omrport_UtActive[253] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((253u << 8) | omrport_UtActive[253]), "\4\4\4\10\10", P1, P2, P3, P4, P5);} \
	} while(0)
#else
#define Trc_PRT_file_unlock_bytes_unix_callingFcntl(P1, P2, P3, P4, P5)   /* tracepoint name: omrport.253 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_unlock_bytes_unix_exiting() do { /* tracepoint name: omrport.254 */ \
	if ((unsigned char) omrport_UtActive[254] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((254u << 8) | omrport_UtActive[254]), NULL);} \
	} while(0)
#else
#define Trc_PRT_file_unlock_bytes_unix_exiting()   /* tracepoint name: omrport.254 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_open_Exception1(P1, P2) do { /* tracepoint name: omrport.255 */ \
	if ((unsigned char) omrport_UtActive[255] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((255u << 8) | omrport_UtActive[255]), "\377\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_file_open_Exception1(P1, P2)   /* tracepoint name: omrport.255 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_open_Exception2(P1, P2, P3) do { /* tracepoint name: omrport.256 */ \
	if ((unsigned char) omrport_UtActive[256] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((256u << 8) | omrport_UtActive[256]), "\377\4\4", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_file_open_Exception2(P1, P2, P3)   /* tracepoint name: omrport.256 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_open_Exception3(P1, P2, P3) do { /* tracepoint name: omrport.257 */ \
	if ((unsigned char) omrport_UtActive[257] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((257u << 8) | omrport_UtActive[257]), "\377\4\4", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_file_open_Exception3(P1, P2, P3)   /* tracepoint name: omrport.257 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_open_Exception4(P1) do { /* tracepoint name: omrport.258 */ \
	if ((unsigned char) omrport_UtActive[258] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((258u << 8) | omrport_UtActive[258]), "\377", P1);} \
	} while(0)
#else
#define Trc_PRT_file_open_Exception4(P1)   /* tracepoint name: omrport.258 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_chmod_Entry(P1, P2) do { /* tracepoint name: omrport.259 */ \
	if ((unsigned char) omrport_UtActive[259] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((259u << 8) | omrport_UtActive[259]), "\377\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_file_chmod_Entry(P1, P2)   /* tracepoint name: omrport.259 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_chmod_Exit(P1) do { /* tracepoint name: omrport.260 */ \
	if ((unsigned char) omrport_UtActive[260] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((260u << 8) | omrport_UtActive[260]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_file_chmod_Exit(P1)   /* tracepoint name: omrport.260 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_chmod_getAttributesFailed(P1) do { /* tracepoint name: omrport.261 */ \
	if ((unsigned char) omrport_UtActive[261] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((261u << 8) | omrport_UtActive[261]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_file_chmod_getAttributesFailed(P1)   /* tracepoint name: omrport.261 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_chmod_setAttributesFailed(P1) do { /* tracepoint name: omrport.262 */ \
	if ((unsigned char) omrport_UtActive[262] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((262u << 8) | omrport_UtActive[262]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_file_chmod_setAttributesFailed(P1)   /* tracepoint name: omrport.262 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_chown_entry(P1, P2, P3) do { /* tracepoint name: omrport.263 */ \
	if ((unsigned char) omrport_UtActive[263] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((263u << 8) | omrport_UtActive[263]), "\377\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_file_chown_entry(P1, P2, P3)   /* tracepoint name: omrport.263 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_chown_exit(P1, P2, P3, P4) do { /* tracepoint name: omrport.264 */ \
	if ((unsigned char) omrport_UtActive[264] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((264u << 8) | omrport_UtActive[264]), "\377\6\6\4", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_PRT_file_chown_exit(P1, P2, P3, P4)   /* tracepoint name: omrport.264 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_mkdir_entry2(P1) do { /* tracepoint name: omrport.265 */ \
	if ((unsigned char) omrport_UtActive[265] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((265u << 8) | omrport_UtActive[265]), "\377", P1);} \
	} while(0)
#else
#define Trc_PRT_file_mkdir_entry2(P1)   /* tracepoint name: omrport.265 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_mkdir_exit2(P1) do { /* tracepoint name: omrport.266 */ \
	if ((unsigned char) omrport_UtActive[266] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((266u << 8) | omrport_UtActive[266]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_file_mkdir_exit2(P1)   /* tracepoint name: omrport.266 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_lock_bytes_win32_failed_noReadWrite() do { /* tracepoint name: omrport.267 */ \
	if ((unsigned char) omrport_UtActive[267] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((267u << 8) | omrport_UtActive[267]), NULL);} \
	} while(0)
#else
#define Trc_PRT_file_lock_bytes_win32_failed_noReadWrite()   /* tracepoint name: omrport.267 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_lock_bytes_win32_failed_noWaitNoWait() do { /* tracepoint name: omrport.268 */ \
	if ((unsigned char) omrport_UtActive[268] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((268u << 8) | omrport_UtActive[268]), NULL);} \
	} while(0)
#else
#define Trc_PRT_file_lock_bytes_win32_failed_noWaitNoWait()   /* tracepoint name: omrport.268 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_lock_bytes_unix_failed_noReadWrite() do { /* tracepoint name: omrport.269 */ \
	if ((unsigned char) omrport_UtActive[269] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((269u << 8) | omrport_UtActive[269]), NULL);} \
	} while(0)
#else
#define Trc_PRT_file_lock_bytes_unix_failed_noReadWrite()   /* tracepoint name: omrport.269 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_lock_bytes_unix_failed_noWaitNoWait() do { /* tracepoint name: omrport.270 */ \
	if ((unsigned char) omrport_UtActive[270] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((270u << 8) | omrport_UtActive[270]), NULL);} \
	} while(0)
#else
#define Trc_PRT_file_lock_bytes_unix_failed_noWaitNoWait()   /* tracepoint name: omrport.270 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_lock_bytes_unix_failed_badFcntl(P1) do { /* tracepoint name: omrport.271 */ \
	if ((unsigned char) omrport_UtActive[271] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((271u << 8) | omrport_UtActive[271]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_file_lock_bytes_unix_failed_badFcntl(P1)   /* tracepoint name: omrport.271 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_unlock_bytes_unix_failed_badFcntl(P1) do { /* tracepoint name: omrport.272 */ \
	if ((unsigned char) omrport_UtActive[272] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((272u << 8) | omrport_UtActive[272]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_file_unlock_bytes_unix_failed_badFcntl(P1)   /* tracepoint name: omrport.272 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_fstat_Entry(P1) do { /* tracepoint name: omrport.273 */ \
	if ((unsigned char) omrport_UtActive[273] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((273u << 8) | omrport_UtActive[273]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_file_fstat_Entry(P1)   /* tracepoint name: omrport.273 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_fstat_fstatFailed(P1) do { /* tracepoint name: omrport.274 */ \
	if ((unsigned char) omrport_UtActive[274] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((274u << 8) | omrport_UtActive[274]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_file_fstat_fstatFailed(P1)   /* tracepoint name: omrport.274 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_fstat_fstatfsFailed(P1) do { /* tracepoint name: omrport.275 */ \
	if ((unsigned char) omrport_UtActive[275] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((275u << 8) | omrport_UtActive[275]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_file_fstat_fstatfsFailed(P1)   /* tracepoint name: omrport.275 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_fstat_fstatvfsFailed(P1) do { /* tracepoint name: omrport.276 */ \
	if ((unsigned char) omrport_UtActive[276] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((276u << 8) | omrport_UtActive[276]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_file_fstat_fstatvfsFailed(P1)   /* tracepoint name: omrport.276 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_fstat_Exit(P1) do { /* tracepoint name: omrport.277 */ \
	if ((unsigned char) omrport_UtActive[277] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((277u << 8) | omrport_UtActive[277]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_file_fstat_Exit(P1)   /* tracepoint name: omrport.277 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_blockingasync_read_Entry(P1, P2, P3) do { /* tracepoint name: omrport.278 */ \
	if ((unsigned char) omrport_UtActive[278] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((278u << 8) | omrport_UtActive[278]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_file_blockingasync_read_Entry(P1, P2, P3)   /* tracepoint name: omrport.278 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_blockingasync_read_Exit(P1) do { /* tracepoint name: omrport.279 */ \
	if ((unsigned char) omrport_UtActive[279] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((279u << 8) | omrport_UtActive[279]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_file_blockingasync_read_Exit(P1)   /* tracepoint name: omrport.279 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_blockingasync_write_Entry(P1, P2, P3) do { /* tracepoint name: omrport.280 */ \
	if ((unsigned char) omrport_UtActive[280] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((280u << 8) | omrport_UtActive[280]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_file_blockingasync_write_Entry(P1, P2, P3)   /* tracepoint name: omrport.280 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_blockingasync_write_Exit(P1) do { /* tracepoint name: omrport.281 */ \
	if ((unsigned char) omrport_UtActive[281] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((281u << 8) | omrport_UtActive[281]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_file_blockingasync_write_Exit(P1)   /* tracepoint name: omrport.281 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_findfirst_ExitFail(P1) do { /* tracepoint name: omrport.282 */ \
	if ((unsigned char) omrport_UtActive[282] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((282u << 8) | omrport_UtActive[282]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_file_findfirst_ExitFail(P1)   /* tracepoint name: omrport.282 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_findnext_ExitFail(P1) do { /* tracepoint name: omrport.283 */ \
	if ((unsigned char) omrport_UtActive[283] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((283u << 8) | omrport_UtActive[283]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_file_findnext_ExitFail(P1)   /* tracepoint name: omrport.283 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_flength_Entry(P1) do { /* tracepoint name: omrport.284 */ \
	if ((unsigned char) omrport_UtActive[284] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((284u << 8) | omrport_UtActive[284]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_file_flength_Entry(P1)   /* tracepoint name: omrport.284 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_flength_Exit(P1) do { /* tracepoint name: omrport.285 */ \
	if ((unsigned char) omrport_UtActive[285] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((285u << 8) | omrport_UtActive[285]), "\10", P1);} \
	} while(0)
#else
#define Trc_PRT_file_flength_Exit(P1)   /* tracepoint name: omrport.285 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_flength_ExitFail(P1) do { /* tracepoint name: omrport.286 */ \
	if ((unsigned char) omrport_UtActive[286] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((286u << 8) | omrport_UtActive[286]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_file_flength_ExitFail(P1)   /* tracepoint name: omrport.286 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_findfirst_Entry2(P1, P2) do { /* tracepoint name: omrport.287 */ \
	if ((unsigned char) omrport_UtActive[287] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((287u << 8) | omrport_UtActive[287]), "\377\377", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_file_findfirst_Entry2(P1, P2)   /* tracepoint name: omrport.287 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_findnext_Entry2(P1, P2) do { /* tracepoint name: omrport.288 */ \
	if ((unsigned char) omrport_UtActive[288] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((288u << 8) | omrport_UtActive[288]), "\6\377", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_file_findnext_Entry2(P1, P2)   /* tracepoint name: omrport.288 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_blockingasync_startup_Entry() do { /* tracepoint name: omrport.289 */ \
	if ((unsigned char) omrport_UtActive[289] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((289u << 8) | omrport_UtActive[289]), NULL);} \
	} while(0)
#else
#define Trc_PRT_file_blockingasync_startup_Entry()   /* tracepoint name: omrport.289 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_blockingasync_startup_Exit() do { /* tracepoint name: omrport.290 */ \
	if ((unsigned char) omrport_UtActive[290] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((290u << 8) | omrport_UtActive[290]), NULL);} \
	} while(0)
#else
#define Trc_PRT_file_blockingasync_startup_Exit()   /* tracepoint name: omrport.290 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_blockingasync_startup_alloc_tls_failure(P1) do { /* tracepoint name: omrport.291 */ \
	if ((unsigned char) omrport_UtActive[291] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((291u << 8) | omrport_UtActive[291]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_file_blockingasync_startup_alloc_tls_failure(P1)   /* tracepoint name: omrport.291 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_blockingasync_shutdown_Entry() do { /* tracepoint name: omrport.292 */ \
	if ((unsigned char) omrport_UtActive[292] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((292u << 8) | omrport_UtActive[292]), NULL);} \
	} while(0)
#else
#define Trc_PRT_file_blockingasync_shutdown_Entry()   /* tracepoint name: omrport.292 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_blockingasync_shutdown_Exit() do { /* tracepoint name: omrport.293 */ \
	if ((unsigned char) omrport_UtActive[293] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((293u << 8) | omrport_UtActive[293]), NULL);} \
	} while(0)
#else
#define Trc_PRT_file_blockingasync_shutdown_Exit()   /* tracepoint name: omrport.293 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_unlock_bytes_win32_exiting_with_error(P1) do { /* tracepoint name: omrport.294 */ \
	if ((unsigned char) omrport_UtActive[294] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((294u << 8) | omrport_UtActive[294]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_file_unlock_bytes_win32_exiting_with_error(P1)   /* tracepoint name: omrport.294 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_lock_bytes_win32_exiting_with_error(P1) do { /* tracepoint name: omrport.295 */ \
	if ((unsigned char) omrport_UtActive[295] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((295u << 8) | omrport_UtActive[295]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_file_lock_bytes_win32_exiting_with_error(P1)   /* tracepoint name: omrport.295 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_file_close_invalidFileHandle() do { /* tracepoint name: omrport.296 */ \
	if ((unsigned char) omrport_UtActive[296] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((296u << 8) | omrport_UtActive[296]), NULL);} \
	} while(0)
#else
#define Trc_PRT_file_close_invalidFileHandle()   /* tracepoint name: omrport.296 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_heap_port_omrheap_create_entry(P1, P2, P3) do { /* tracepoint name: omrport.297 */ \
	if ((unsigned char) omrport_UtActive[297] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((297u << 8) | omrport_UtActive[297]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_heap_port_omrheap_create_entry(P1, P2, P3)   /* tracepoint name: omrport.297 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_heap_port_omrheap_create_null_heapBase_exit() do { /* tracepoint name: omrport.298 */ \
	if ((unsigned char) omrport_UtActive[298] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((298u << 8) | omrport_UtActive[298]), NULL);} \
	} while(0)
#else
#define Trc_PRT_heap_port_omrheap_create_null_heapBase_exit()   /* tracepoint name: omrport.298 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_heap_port_omrheap_create_insufficient_heapSize_exit() do { /* tracepoint name: omrport.299 */ \
	if ((unsigned char) omrport_UtActive[299] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((299u << 8) | omrport_UtActive[299]), NULL);} \
	} while(0)
#else
#define Trc_PRT_heap_port_omrheap_create_insufficient_heapSize_exit()   /* tracepoint name: omrport.299 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_heap_port_omrheap_create_exit(P1) do { /* tracepoint name: omrport.300 */ \
	if ((unsigned char) omrport_UtActive[300] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((300u << 8) | omrport_UtActive[300]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_heap_port_omrheap_create_exit(P1)   /* tracepoint name: omrport.300 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_heap_port_omrheap_free_entry(P1, P2) do { /* tracepoint name: omrport.301 */ \
	if ((unsigned char) omrport_UtActive[301] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((301u << 8) | omrport_UtActive[301]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_heap_port_omrheap_free_entry(P1, P2)   /* tracepoint name: omrport.301 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_heap_port_omrheap_free_null_memptr_exit() do { /* tracepoint name: omrport.302 */ \
	if ((unsigned char) omrport_UtActive[302] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((302u << 8) | omrport_UtActive[302]), NULL);} \
	} while(0)
#else
#define Trc_PRT_heap_port_omrheap_free_null_memptr_exit()   /* tracepoint name: omrport.302 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_heap_port_omrheap_free_exit() do { /* tracepoint name: omrport.303 */ \
	if ((unsigned char) omrport_UtActive[303] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((303u << 8) | omrport_UtActive[303]), NULL);} \
	} while(0)
#else
#define Trc_PRT_heap_port_omrheap_free_exit()   /* tracepoint name: omrport.303 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_heap_port_omrheap_allocate_entry(P1, P2) do { /* tracepoint name: omrport.304 */ \
	if ((unsigned char) omrport_UtActive[304] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((304u << 8) | omrport_UtActive[304]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_heap_port_omrheap_allocate_entry(P1, P2)   /* tracepoint name: omrport.304 */
#endif

#if UT_TRACE_OVERHEAD >= 10
#define Trc_PRT_heap_port_omrheap_allocate_heap_full_exit() do { /* tracepoint name: omrport.305 */ \
	if ((unsigned char) omrport_UtActive[305] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((305u << 8) | omrport_UtActive[305]), NULL);} \
	} while(0)
#else
#define Trc_PRT_heap_port_omrheap_allocate_heap_full_exit()   /* tracepoint name: omrport.305 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_heap_port_omrheap_allocate_cannot_satisfy_reuqest_exit() do { /* tracepoint name: omrport.306 */ \
	if ((unsigned char) omrport_UtActive[306] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((306u << 8) | omrport_UtActive[306]), NULL);} \
	} while(0)
#else
#define Trc_PRT_heap_port_omrheap_allocate_cannot_satisfy_reuqest_exit()   /* tracepoint name: omrport.306 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_heap_port_omrheap_allocate_exit(P1) do { /* tracepoint name: omrport.307 */ \
	if ((unsigned char) omrport_UtActive[307] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((307u << 8) | omrport_UtActive[307]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_heap_port_omrheap_allocate_exit(P1)   /* tracepoint name: omrport.307 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_heap_port_omrheap_query_size_Entry(P1, P2, P3) do { /* tracepoint name: omrport.308 */ \
	if ((unsigned char) omrport_UtActive[308] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((308u << 8) | omrport_UtActive[308]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_heap_port_omrheap_query_size_Entry(P1, P2, P3)   /* tracepoint name: omrport.308 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_heap_port_omrheap_query_size_Exit(P1) do { /* tracepoint name: omrport.309 */ \
	if ((unsigned char) omrport_UtActive[309] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((309u << 8) | omrport_UtActive[309]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_heap_port_omrheap_query_size_Exit(P1)   /* tracepoint name: omrport.309 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_heap_port_omrheap_reallocate_entry(P1, P2, P3) do { /* tracepoint name: omrport.310 */ \
	if ((unsigned char) omrport_UtActive[310] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((310u << 8) | omrport_UtActive[310]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_heap_port_omrheap_reallocate_entry(P1, P2, P3)   /* tracepoint name: omrport.310 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_heap_port_omrheap_reallocate_null_address() do { /* tracepoint name: omrport.311 */ \
	if ((unsigned char) omrport_UtActive[311] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((311u << 8) | omrport_UtActive[311]), NULL);} \
	} while(0)
#else
#define Trc_PRT_heap_port_omrheap_reallocate_null_address()   /* tracepoint name: omrport.311 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_heap_port_omrheap_reallocate_no_realloc_necessary() do { /* tracepoint name: omrport.312 */ \
	if ((unsigned char) omrport_UtActive[312] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((312u << 8) | omrport_UtActive[312]), NULL);} \
	} while(0)
#else
#define Trc_PRT_heap_port_omrheap_reallocate_no_realloc_necessary()   /* tracepoint name: omrport.312 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_heap_port_omrheap_reallocate_relocating() do { /* tracepoint name: omrport.313 */ \
	if ((unsigned char) omrport_UtActive[313] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((313u << 8) | omrport_UtActive[313]), NULL);} \
	} while(0)
#else
#define Trc_PRT_heap_port_omrheap_reallocate_relocating()   /* tracepoint name: omrport.313 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_heap_port_omrheap_reallocate_grow(P1, P2) do { /* tracepoint name: omrport.314 */ \
	if ((unsigned char) omrport_UtActive[314] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((314u << 8) | omrport_UtActive[314]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_heap_port_omrheap_reallocate_grow(P1, P2)   /* tracepoint name: omrport.314 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_heap_port_omrheap_reallocate_shrink(P1) do { /* tracepoint name: omrport.315 */ \
	if ((unsigned char) omrport_UtActive[315] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((315u << 8) | omrport_UtActive[315]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_heap_port_omrheap_reallocate_shrink(P1)   /* tracepoint name: omrport.315 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_heap_port_omrheap_reallocate_exit(P1) do { /* tracepoint name: omrport.316 */ \
	if ((unsigned char) omrport_UtActive[316] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((316u << 8) | omrport_UtActive[316]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_heap_port_omrheap_reallocate_exit(P1)   /* tracepoint name: omrport.316 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_heap_port_omrheap_reallocate_arithmetic_overflow(P1) do { /* tracepoint name: omrport.317 */ \
	if ((unsigned char) omrport_UtActive[317] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((317u << 8) | omrport_UtActive[317]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_heap_port_omrheap_reallocate_arithmetic_overflow(P1)   /* tracepoint name: omrport.317 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_heap_port_omrheap_allocate_arithmetic_overflow(P1) do { /* tracepoint name: omrport.318 */ \
	if ((unsigned char) omrport_UtActive[318] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((318u << 8) | omrport_UtActive[318]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_heap_port_omrheap_allocate_arithmetic_overflow(P1)   /* tracepoint name: omrport.318 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_heap_port_omrheap_grow_entry(P1, P2) do { /* tracepoint name: omrport.319 */ \
	if ((unsigned char) omrport_UtActive[319] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((319u << 8) | omrport_UtActive[319]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_heap_port_omrheap_grow_entry(P1, P2)   /* tracepoint name: omrport.319 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_heap_port_omrheap_grow_insufficient_heapSize_exit() do { /* tracepoint name: omrport.320 */ \
	if ((unsigned char) omrport_UtActive[320] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((320u << 8) | omrport_UtActive[320]), NULL);} \
	} while(0)
#else
#define Trc_PRT_heap_port_omrheap_grow_insufficient_heapSize_exit()   /* tracepoint name: omrport.320 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_heap_port_omrheap_grow_exit(P1) do { /* tracepoint name: omrport.321 */ \
	if ((unsigned char) omrport_UtActive[321] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((321u << 8) | omrport_UtActive[321]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_heap_port_omrheap_grow_exit(P1)   /* tracepoint name: omrport.321 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_omrmem_allocate_memory_Exit(P1) do { /* tracepoint name: omrport.322 */ \
	if ((unsigned char) omrport_UtActive[322] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((322u << 8) | omrport_UtActive[322]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_mem_omrmem_allocate_memory_Exit(P1)   /* tracepoint name: omrport.322 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_omrmem_free_memory_Entry(P1) do { /* tracepoint name: omrport.323 */ \
	if ((unsigned char) omrport_UtActive[323] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((323u << 8) | omrport_UtActive[323]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_mem_omrmem_free_memory_Entry(P1)   /* tracepoint name: omrport.323 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_omrmem_free_memory_Exit() do { /* tracepoint name: omrport.324 */ \
	if ((unsigned char) omrport_UtActive[324] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((324u << 8) | omrport_UtActive[324]), NULL);} \
	} while(0)
#else
#define Trc_PRT_mem_omrmem_free_memory_Exit()   /* tracepoint name: omrport.324 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_omrmem_reallocate_memory_Exit(P1) do { /* tracepoint name: omrport.325 */ \
	if ((unsigned char) omrport_UtActive[325] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((325u << 8) | omrport_UtActive[325]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_mem_omrmem_reallocate_memory_Exit(P1)   /* tracepoint name: omrport.325 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_omrmem_allocate_memory32_Entry(P1) do { /* tracepoint name: omrport.326 */ \
	if ((unsigned char) omrport_UtActive[326] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((326u << 8) | omrport_UtActive[326]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_mem_omrmem_allocate_memory32_Entry(P1)   /* tracepoint name: omrport.326 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_omrmem_allocate_memory32_Exit(P1) do { /* tracepoint name: omrport.327 */ \
	if ((unsigned char) omrport_UtActive[327] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((327u << 8) | omrport_UtActive[327]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_mem_omrmem_allocate_memory32_Exit(P1)   /* tracepoint name: omrport.327 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_omrmem_free_memory32_Entry(P1) do { /* tracepoint name: omrport.328 */ \
	if ((unsigned char) omrport_UtActive[328] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((328u << 8) | omrport_UtActive[328]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_mem_omrmem_free_memory32_Entry(P1)   /* tracepoint name: omrport.328 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_omrmem_free_memory32_Exit() do { /* tracepoint name: omrport.329 */ \
	if ((unsigned char) omrport_UtActive[329] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((329u << 8) | omrport_UtActive[329]), NULL);} \
	} while(0)
#else
#define Trc_PRT_mem_omrmem_free_memory32_Exit()   /* tracepoint name: omrport.329 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_allocate_memory32_failed_vmemID(P1) do { /* tracepoint name: omrport.330 */ \
	if ((unsigned char) omrport_UtActive[330] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((330u << 8) | omrport_UtActive[330]), "\377", P1);} \
	} while(0)
#else
#define Trc_PRT_mem_allocate_memory32_failed_vmemID(P1)   /* tracepoint name: omrport.330 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_allocate_memory32_failed_page(P1) do { /* tracepoint name: omrport.331 */ \
	if ((unsigned char) omrport_UtActive[331] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((331u << 8) | omrport_UtActive[331]), "\377", P1);} \
	} while(0)
#else
#define Trc_PRT_mem_allocate_memory32_failed_page(P1)   /* tracepoint name: omrport.331 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_allocate_memory32_failed_alloc(P1, P2) do { /* tracepoint name: omrport.332 */ \
	if ((unsigned char) omrport_UtActive[332] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((332u << 8) | omrport_UtActive[332]), "\4\377", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_mem_allocate_memory32_failed_alloc(P1, P2)   /* tracepoint name: omrport.332 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_omrmem_allocate_memory_Entry(P1, P2) do { /* tracepoint name: omrport.333 */ \
	if ((unsigned char) omrport_UtActive[333] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((333u << 8) | omrport_UtActive[333]), "\6\377", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_mem_omrmem_allocate_memory_Entry(P1, P2)   /* tracepoint name: omrport.333 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_allocate_memory32_Entry(P1) do { /* tracepoint name: omrport.334 */ \
	if ((unsigned char) omrport_UtActive[334] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((334u << 8) | omrport_UtActive[334]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_mem_allocate_memory32_Entry(P1)   /* tracepoint name: omrport.334 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_allocate_memory32_Exit(P1) do { /* tracepoint name: omrport.335 */ \
	if ((unsigned char) omrport_UtActive[335] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((335u << 8) | omrport_UtActive[335]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_mem_allocate_memory32_Exit(P1)   /* tracepoint name: omrport.335 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_allocate_memory32_alloc_large_region(P1, P2) do { /* tracepoint name: omrport.336 */ \
	if ((unsigned char) omrport_UtActive[336] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((336u << 8) | omrport_UtActive[336]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_mem_allocate_memory32_alloc_large_region(P1, P2)   /* tracepoint name: omrport.336 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_allocate_memory32_suballoc_block(P1, P2, P3) do { /* tracepoint name: omrport.337 */ \
	if ((unsigned char) omrport_UtActive[337] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((337u << 8) | omrport_UtActive[337]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_mem_allocate_memory32_suballoc_block(P1, P2, P3)   /* tracepoint name: omrport.337 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_allocate_memory32_alloc_normal_region_suballoc(P1, P2, P3, P4) do { /* tracepoint name: omrport.338 */ \
	if ((unsigned char) omrport_UtActive[338] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((338u << 8) | omrport_UtActive[338]), "\6\6\6\6", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_PRT_mem_allocate_memory32_alloc_normal_region_suballoc(P1, P2, P3, P4)   /* tracepoint name: omrport.338 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_allocate_memory32_alloc_normal_region_consumed(P1, P2) do { /* tracepoint name: omrport.339 */ \
	if ((unsigned char) omrport_UtActive[339] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((339u << 8) | omrport_UtActive[339]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_mem_allocate_memory32_alloc_normal_region_consumed(P1, P2)   /* tracepoint name: omrport.339 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_allocate_memory32_failed_heapWrapper(P1) do { /* tracepoint name: omrport.340 */ \
	if ((unsigned char) omrport_UtActive[340] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((340u << 8) | omrport_UtActive[340]), "\377", P1);} \
	} while(0)
#else
#define Trc_PRT_mem_allocate_memory32_failed_heapWrapper(P1)   /* tracepoint name: omrport.340 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_free_memory32_Entry(P1) do { /* tracepoint name: omrport.341 */ \
	if ((unsigned char) omrport_UtActive[341] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((341u << 8) | omrport_UtActive[341]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_mem_free_memory32_Entry(P1)   /* tracepoint name: omrport.341 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_free_memory32_Exit() do { /* tracepoint name: omrport.342 */ \
	if ((unsigned char) omrport_UtActive[342] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((342u << 8) | omrport_UtActive[342]), NULL);} \
	} while(0)
#else
#define Trc_PRT_mem_free_memory32_Exit()   /* tracepoint name: omrport.342 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_free_memory32_no_matching_heap_found(P1) do { /* tracepoint name: omrport.343 */ \
	if ((unsigned char) omrport_UtActive[343] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((343u << 8) | omrport_UtActive[343]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_mem_free_memory32_no_matching_heap_found(P1)   /* tracepoint name: omrport.343 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_free_memory32_found_omrheap(P1) do { /* tracepoint name: omrport.344 */ \
	if ((unsigned char) omrport_UtActive[344] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((344u << 8) | omrport_UtActive[344]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_mem_free_memory32_found_omrheap(P1)   /* tracepoint name: omrport.344 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_free_memory32_found_vmem_heap(P1) do { /* tracepoint name: omrport.345 */ \
	if ((unsigned char) omrport_UtActive[345] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((345u << 8) | omrport_UtActive[345]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_mem_free_memory32_found_vmem_heap(P1)   /* tracepoint name: omrport.345 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_omrmem_ensure_capacity32_Entry(P1) do { /* tracepoint name: omrport.346 */ \
	if ((unsigned char) omrport_UtActive[346] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((346u << 8) | omrport_UtActive[346]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_mem_omrmem_ensure_capacity32_Entry(P1)   /* tracepoint name: omrport.346 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_omrmem_ensure_capacity32_Exit(P1) do { /* tracepoint name: omrport.347 */ \
	if ((unsigned char) omrport_UtActive[347] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((347u << 8) | omrport_UtActive[347]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_mem_omrmem_ensure_capacity32_Exit(P1)   /* tracepoint name: omrport.347 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_ensure_capacity32_Entry(P1) do { /* tracepoint name: omrport.348 */ \
	if ((unsigned char) omrport_UtActive[348] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((348u << 8) | omrport_UtActive[348]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_mem_ensure_capacity32_Entry(P1)   /* tracepoint name: omrport.348 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_ensure_capacity32_Exit(P1) do { /* tracepoint name: omrport.349 */ \
	if ((unsigned char) omrport_UtActive[349] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((349u << 8) | omrport_UtActive[349]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_mem_ensure_capacity32_Exit(P1)   /* tracepoint name: omrport.349 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_ensure_capacity32_already_initialized(P1, P2) do { /* tracepoint name: omrport.350 */ \
	if ((unsigned char) omrport_UtActive[350] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((350u << 8) | omrport_UtActive[350]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_mem_ensure_capacity32_already_initialized(P1, P2)   /* tracepoint name: omrport.350 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_ensure_capacity32_uninitialized() do { /* tracepoint name: omrport.351 */ \
	if ((unsigned char) omrport_UtActive[351] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((351u << 8) | omrport_UtActive[351]), NULL);} \
	} while(0)
#else
#define Trc_PRT_mem_ensure_capacity32_uninitialized()   /* tracepoint name: omrport.351 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_Assert_PRT_mem_categories_already_set(P1) do { /* tracepoint name: omrport.352 */ \
	if ((unsigned char) omrport_UtActive[352] != 0){ \
		if ((P1)) { /* assertion satisfied */ } else { \
			if (omrport_UtModuleInfo.intf != NULL) { \
				omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, (UT_SPECIAL_ASSERTION | (352u << 8) | omrport_UtActive[352]), "\377\4\377", __FILE__, __LINE__, UT_STR(((P1)))); \
				Trace_Unreachable(); \
			} else { \
				fprintf(stderr, "** ASSERTION FAILED ** omrport.352 at %s:%d Trc_Assert_PRT_mem_categories_already_set%s\n", __FILE__, __LINE__, UT_STR(((P1)))); \
			} \
		}} \
	} while(0)
#else
#define Trc_Assert_PRT_mem_categories_already_set(P1)   /* tracepoint name: omrport.352 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_omrmem_reallocate_memory_Entry(P1, P2, P3, P4) do { /* tracepoint name: omrport.353 */ \
	if ((unsigned char) omrport_UtActive[353] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((353u << 8) | omrport_UtActive[353]), "\6\4\6\4", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_PRT_mem_omrmem_reallocate_memory_Entry(P1, P2, P3, P4)   /* tracepoint name: omrport.353 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_Assert_PTR_mem_categories_increment_counters_NULL_category(P1) do { /* tracepoint name: omrport.354 */ \
	if ((unsigned char) omrport_UtActive[354] != 0){ \
		if ((P1)) { /* assertion satisfied */ } else { \
			if (omrport_UtModuleInfo.intf != NULL) { \
				omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, (UT_SPECIAL_ASSERTION | (354u << 8) | omrport_UtActive[354]), "\377\4\377", __FILE__, __LINE__, UT_STR(((P1)))); \
				Trace_Unreachable(); \
			} else { \
				fprintf(stderr, "** ASSERTION FAILED ** omrport.354 at %s:%d Trc_Assert_PTR_mem_categories_increment_counters_NULL_category%s\n", __FILE__, __LINE__, UT_STR(((P1)))); \
			} \
		}} \
	} while(0)
#else
#define Trc_Assert_PTR_mem_categories_increment_counters_NULL_category(P1)   /* tracepoint name: omrport.354 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_Assert_PTR_mem_categories_decrement_counters_NULL_category(P1) do { /* tracepoint name: omrport.355 */ \
	if ((unsigned char) omrport_UtActive[355] != 0){ \
		if ((P1)) { /* assertion satisfied */ } else { \
			if (omrport_UtModuleInfo.intf != NULL) { \
				omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, (UT_SPECIAL_ASSERTION | (355u << 8) | omrport_UtActive[355]), "\377\4\377", __FILE__, __LINE__, UT_STR(((P1)))); \
				Trace_Unreachable(); \
			} else { \
				fprintf(stderr, "** ASSERTION FAILED ** omrport.355 at %s:%d Trc_Assert_PTR_mem_categories_decrement_counters_NULL_category%s\n", __FILE__, __LINE__, UT_STR(((P1)))); \
			} \
		}} \
	} while(0)
#else
#define Trc_Assert_PTR_mem_categories_decrement_counters_NULL_category(P1)   /* tracepoint name: omrport.355 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_Assert_PTR_mem_categories_increment_bytes_NULL_category(P1) do { /* tracepoint name: omrport.356 */ \
	if ((unsigned char) omrport_UtActive[356] != 0){ \
		if ((P1)) { /* assertion satisfied */ } else { \
			if (omrport_UtModuleInfo.intf != NULL) { \
				omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, (UT_SPECIAL_ASSERTION | (356u << 8) | omrport_UtActive[356]), "\377\4\377", __FILE__, __LINE__, UT_STR(((P1)))); \
				Trace_Unreachable(); \
			} else { \
				fprintf(stderr, "** ASSERTION FAILED ** omrport.356 at %s:%d Trc_Assert_PTR_mem_categories_increment_bytes_NULL_category%s\n", __FILE__, __LINE__, UT_STR(((P1)))); \
			} \
		}} \
	} while(0)
#else
#define Trc_Assert_PTR_mem_categories_increment_bytes_NULL_category(P1)   /* tracepoint name: omrport.356 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_Assert_PTR_mem_categories_decrement_bytes_NULL_category(P1) do { /* tracepoint name: omrport.357 */ \
	if ((unsigned char) omrport_UtActive[357] != 0){ \
		if ((P1)) { /* assertion satisfied */ } else { \
			if (omrport_UtModuleInfo.intf != NULL) { \
				omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, (UT_SPECIAL_ASSERTION | (357u << 8) | omrport_UtActive[357]), "\377\4\377", __FILE__, __LINE__, UT_STR(((P1)))); \
				Trace_Unreachable(); \
			} else { \
				fprintf(stderr, "** ASSERTION FAILED ** omrport.357 at %s:%d Trc_Assert_PTR_mem_categories_decrement_bytes_NULL_category%s\n", __FILE__, __LINE__, UT_STR(((P1)))); \
			} \
		}} \
	} while(0)
#else
#define Trc_Assert_PTR_mem_categories_decrement_bytes_NULL_category(P1)   /* tracepoint name: omrport.357 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_advise_and_free_memory_basic_madvise_failed(P1, P2, P3) do { /* tracepoint name: omrport.358 */ \
	if ((unsigned char) omrport_UtActive[358] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((358u << 8) | omrport_UtActive[358]), "\6\6\4", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_mem_advise_and_free_memory_basic_madvise_failed(P1, P2, P3)   /* tracepoint name: omrport.358 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_Assert_PRT_memory_corruption_detected(P1) do { /* tracepoint name: omrport.359 */ \
	if ((unsigned char) omrport_UtActive[359] != 0){ \
		if ((P1)) { /* assertion satisfied */ } else { \
			if (omrport_UtModuleInfo.intf != NULL) { \
				omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, (UT_SPECIAL_ASSERTION | (359u << 8) | omrport_UtActive[359]), "\377\4\377", __FILE__, __LINE__, UT_STR(((P1)))); \
				Trace_Unreachable(); \
			} else { \
				fprintf(stderr, "** ASSERTION FAILED ** omrport.359 at %s:%d Trc_Assert_PRT_memory_corruption_detected%s\n", __FILE__, __LINE__, UT_STR(((P1)))); \
			} \
		}} \
	} while(0)
#else
#define Trc_Assert_PRT_memory_corruption_detected(P1)   /* tracepoint name: omrport.359 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_reserveAndCommitRegion_reserveMemoryFailure(P1) do { /* tracepoint name: omrport.360 */ \
	if ((unsigned char) omrport_UtActive[360] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((360u << 8) | omrport_UtActive[360]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_mem_reserveAndCommitRegion_reserveMemoryFailure(P1)   /* tracepoint name: omrport.360 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_reserveAndCommitRegion_commitMemoryFailure(P1, P2, P3) do { /* tracepoint name: omrport.361 */ \
	if ((unsigned char) omrport_UtActive[361] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((361u << 8) | omrport_UtActive[361]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_mem_reserveAndCommitRegion_commitMemoryFailure(P1, P2, P3)   /* tracepoint name: omrport.361 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_iterateHeapsAndSubAllocate_commitMemoryFailure(P1, P2, P3) do { /* tracepoint name: omrport.362 */ \
	if ((unsigned char) omrport_UtActive[362] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((362u << 8) | omrport_UtActive[362]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_mem_iterateHeapsAndSubAllocate_commitMemoryFailure(P1, P2, P3)   /* tracepoint name: omrport.362 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_iterateHeapsAndSubAllocate_heap_grow_successful(P1, P2) do { /* tracepoint name: omrport.363 */ \
	if ((unsigned char) omrport_UtActive[363] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((363u << 8) | omrport_UtActive[363]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_mem_iterateHeapsAndSubAllocate_heap_grow_successful(P1, P2)   /* tracepoint name: omrport.363 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_iterateHeapsAndSubAllocate_heap_grow_failed(P1, P2) do { /* tracepoint name: omrport.364 */ \
	if ((unsigned char) omrport_UtActive[364] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((364u << 8) | omrport_UtActive[364]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_mem_iterateHeapsAndSubAllocate_heap_grow_failed(P1, P2)   /* tracepoint name: omrport.364 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_iterateHeapsAndSubAllocate_failed_to_suballoc(P1) do { /* tracepoint name: omrport.365 */ \
	if ((unsigned char) omrport_UtActive[365] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((365u << 8) | omrport_UtActive[365]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_mem_iterateHeapsAndSubAllocate_failed_to_suballoc(P1)   /* tracepoint name: omrport.365 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_ensure_capacity32_NotRequired_Exit() do { /* tracepoint name: omrport.366 */ \
	if ((unsigned char) omrport_UtActive[366] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((366u << 8) | omrport_UtActive[366]), NULL);} \
	} while(0)
#else
#define Trc_PRT_mem_ensure_capacity32_NotRequired_Exit()   /* tracepoint name: omrport.366 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Assert_AddressAbove4GBBar(P1) do { /* tracepoint name: omrport.367 */ \
	if ((unsigned char) omrport_UtActive[367] != 0){ \
		if ((P1)) { /* assertion satisfied */ } else { \
			if (omrport_UtModuleInfo.intf != NULL) { \
				omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, (UT_SPECIAL_ASSERTION | (367u << 8) | omrport_UtActive[367]), "\377\4\377", __FILE__, __LINE__, UT_STR(((P1)))); \
				Trace_Unreachable(); \
			} else { \
				fprintf(stderr, "** ASSERTION FAILED ** omrport.367 at %s:%d Assert_AddressAbove4GBBar%s\n", __FILE__, __LINE__, UT_STR(((P1)))); \
			} \
		}} \
	} while(0)
#else
#define Assert_AddressAbove4GBBar(P1)   /* tracepoint name: omrport.367 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_memory_alloc_returned_null_2(P1, P2) do { /* tracepoint name: omrport.368 */ \
	if ((unsigned char) omrport_UtActive[368] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((368u << 8) | omrport_UtActive[368]), "\377\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_memory_alloc_returned_null_2(P1, P2)   /* tracepoint name: omrport.368 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_omrmem_allocate_memory32_returned_null(P1, P2) do { /* tracepoint name: omrport.369 */ \
	if ((unsigned char) omrport_UtActive[369] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((369u << 8) | omrport_UtActive[369]), "\377\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_mem_omrmem_allocate_memory32_returned_null(P1, P2)   /* tracepoint name: omrport.369 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_allocate_memory32_alloc_large_region_failed_2(P1, P2) do { /* tracepoint name: omrport.370 */ \
	if ((unsigned char) omrport_UtActive[370] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((370u << 8) | omrport_UtActive[370]), "\377\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_mem_allocate_memory32_alloc_large_region_failed_2(P1, P2)   /* tracepoint name: omrport.370 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_allocate_memory32_suballoc_block_failed(P1, P2) do { /* tracepoint name: omrport.371 */ \
	if ((unsigned char) omrport_UtActive[371] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((371u << 8) | omrport_UtActive[371]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_mem_allocate_memory32_suballoc_block_failed(P1, P2)   /* tracepoint name: omrport.371 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_allocate_memory32_alloc_normal_region_failed_2(P1, P2) do { /* tracepoint name: omrport.372 */ \
	if ((unsigned char) omrport_UtActive[372] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((372u << 8) | omrport_UtActive[372]), "\377\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_mem_allocate_memory32_alloc_normal_region_failed_2(P1, P2)   /* tracepoint name: omrport.372 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_omrmem_reallocate_memory_failed_2(P1, P2, P3) do { /* tracepoint name: omrport.373 */ \
	if ((unsigned char) omrport_UtActive[373] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((373u << 8) | omrport_UtActive[373]), "\377\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_mem_omrmem_reallocate_memory_failed_2(P1, P2, P3)   /* tracepoint name: omrport.373 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_omrmem_advise_and_free_memory_Entry(P1) do { /* tracepoint name: omrport.374 */ \
	if ((unsigned char) omrport_UtActive[374] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((374u << 8) | omrport_UtActive[374]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_mem_omrmem_advise_and_free_memory_Entry(P1)   /* tracepoint name: omrport.374 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_omrmem_advise_and_free_memory_Exit() do { /* tracepoint name: omrport.375 */ \
	if ((unsigned char) omrport_UtActive[375] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((375u << 8) | omrport_UtActive[375]), NULL);} \
	} while(0)
#else
#define Trc_PRT_mem_omrmem_advise_and_free_memory_Exit()   /* tracepoint name: omrport.375 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_advise_and_free_memory_basic_disclaim64_failed(P1, P2, P3) do { /* tracepoint name: omrport.376 */ \
	if ((unsigned char) omrport_UtActive[376] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((376u << 8) | omrport_UtActive[376]), "\6\6\4", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_mem_advise_and_free_memory_basic_disclaim64_failed(P1, P2, P3)   /* tracepoint name: omrport.376 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_advise_and_free_memory_basic_vmgetinfo_failed(P1) do { /* tracepoint name: omrport.377 */ \
	if ((unsigned char) omrport_UtActive[377] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((377u << 8) | omrport_UtActive[377]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_mem_advise_and_free_memory_basic_vmgetinfo_failed(P1)   /* tracepoint name: omrport.377 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_advise_and_free_memory_basic_j9discard_data_failed(P1, P2) do { /* tracepoint name: omrport.378 */ \
	if ((unsigned char) omrport_UtActive[378] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((378u << 8) | omrport_UtActive[378]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_mem_advise_and_free_memory_basic_j9discard_data_failed(P1, P2)   /* tracepoint name: omrport.378 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_advise_and_free_memory_basic_Pgser_Release_failed(P1, P2) do { /* tracepoint name: omrport.379 */ \
	if ((unsigned char) omrport_UtActive[379] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((379u << 8) | omrport_UtActive[379]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_mem_advise_and_free_memory_basic_Pgser_Release_failed(P1, P2)   /* tracepoint name: omrport.379 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_advise_and_free_memory_basic_params(P1, P2, P3) do { /* tracepoint name: omrport.380 */ \
	if ((unsigned char) omrport_UtActive[380] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((380u << 8) | omrport_UtActive[380]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_mem_advise_and_free_memory_basic_params(P1, P2, P3)   /* tracepoint name: omrport.380 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mem_advise_and_free_memory_basic_oscall(P1, P2) do { /* tracepoint name: omrport.381 */ \
	if ((unsigned char) omrport_UtActive[381] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((381u << 8) | omrport_UtActive[381]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_mem_advise_and_free_memory_basic_oscall(P1, P2)   /* tracepoint name: omrport.381 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mmap_map_file_default_entered(P1, P2) do { /* tracepoint name: omrport.382 */ \
	if ((unsigned char) omrport_UtActive[382] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((382u << 8) | omrport_UtActive[382]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_mmap_map_file_default_entered(P1, P2)   /* tracepoint name: omrport.382 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mmap_map_file_default_badfile() do { /* tracepoint name: omrport.383 */ \
	if ((unsigned char) omrport_UtActive[383] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((383u << 8) | omrport_UtActive[383]), NULL);} \
	} while(0)
#else
#define Trc_PRT_mmap_map_file_default_badfile()   /* tracepoint name: omrport.383 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mmap_map_file_default_allocPointer(P1, P2) do { /* tracepoint name: omrport.384 */ \
	if ((unsigned char) omrport_UtActive[384] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((384u << 8) | omrport_UtActive[384]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_mmap_map_file_default_allocPointer(P1, P2)   /* tracepoint name: omrport.384 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mmap_map_file_default_badallocPointer() do { /* tracepoint name: omrport.385 */ \
	if ((unsigned char) omrport_UtActive[385] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((385u << 8) | omrport_UtActive[385]), NULL);} \
	} while(0)
#else
#define Trc_PRT_mmap_map_file_default_badallocPointer()   /* tracepoint name: omrport.385 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mmap_map_file_default_mappedMemory(P1) do { /* tracepoint name: omrport.386 */ \
	if ((unsigned char) omrport_UtActive[386] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((386u << 8) | omrport_UtActive[386]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_mmap_map_file_default_mappedMemory(P1)   /* tracepoint name: omrport.386 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mmap_map_file_default_badread() do { /* tracepoint name: omrport.387 */ \
	if ((unsigned char) omrport_UtActive[387] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((387u << 8) | omrport_UtActive[387]), NULL);} \
	} while(0)
#else
#define Trc_PRT_mmap_map_file_default_badread()   /* tracepoint name: omrport.387 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mmap_map_file_default_readingFile(P1) do { /* tracepoint name: omrport.388 */ \
	if ((unsigned char) omrport_UtActive[388] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((388u << 8) | omrport_UtActive[388]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_mmap_map_file_default_readingFile(P1)   /* tracepoint name: omrport.388 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mmap_map_file_default_exit() do { /* tracepoint name: omrport.389 */ \
	if ((unsigned char) omrport_UtActive[389] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((389u << 8) | omrport_UtActive[389]), NULL);} \
	} while(0)
#else
#define Trc_PRT_mmap_map_file_default_exit()   /* tracepoint name: omrport.389 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mmap_map_file_win32_entered(P1, P2, P3, P4, P5) do { /* tracepoint name: omrport.390 */ \
	if ((unsigned char) omrport_UtActive[390] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((390u << 8) | omrport_UtActive[390]), "\6\10\6\377\4", P1, P2, P3, P4, P5);} \
	} while(0)
#else
#define Trc_PRT_mmap_map_file_win32_entered(P1, P2, P3, P4, P5)   /* tracepoint name: omrport.390 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mmap_map_file_win32_invalidFile() do { /* tracepoint name: omrport.391 */ \
	if ((unsigned char) omrport_UtActive[391] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((391u << 8) | omrport_UtActive[391]), NULL);} \
	} while(0)
#else
#define Trc_PRT_mmap_map_file_win32_invalidFile()   /* tracepoint name: omrport.391 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mmap_map_file_win32_writeUnsupported() do { /* tracepoint name: omrport.392 */ \
	if ((unsigned char) omrport_UtActive[392] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((392u << 8) | omrport_UtActive[392]), NULL);} \
	} while(0)
#else
#define Trc_PRT_mmap_map_file_win32_writeUnsupported()   /* tracepoint name: omrport.392 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mmap_map_file_win32_invalidFlags() do { /* tracepoint name: omrport.393 */ \
	if ((unsigned char) omrport_UtActive[393] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((393u << 8) | omrport_UtActive[393]), NULL);} \
	} while(0)
#else
#define Trc_PRT_mmap_map_file_win32_invalidFlags()   /* tracepoint name: omrport.393 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mmap_map_file_win32_flagsSet(P1, P2) do { /* tracepoint name: omrport.394 */ \
	if ((unsigned char) omrport_UtActive[394] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((394u << 8) | omrport_UtActive[394]), "\4\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_mmap_map_file_win32_flagsSet(P1, P2)   /* tracepoint name: omrport.394 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mmap_map_file_win32_mappingName(P1, P2) do { /* tracepoint name: omrport.395 */ \
	if ((unsigned char) omrport_UtActive[395] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((395u << 8) | omrport_UtActive[395]), "\377\377", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_mmap_map_file_win32_mappingName(P1, P2)   /* tracepoint name: omrport.395 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mmap_map_file_win32_badCreateFileMapping(P1) do { /* tracepoint name: omrport.396 */ \
	if ((unsigned char) omrport_UtActive[396] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((396u << 8) | omrport_UtActive[396]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_mmap_map_file_win32_badCreateFileMapping(P1)   /* tracepoint name: omrport.396 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mmap_map_file_win32_callingMapViewOfFile(P1, P2, P3) do { /* tracepoint name: omrport.397 */ \
	if ((unsigned char) omrport_UtActive[397] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((397u << 8) | omrport_UtActive[397]), "\4\4\4", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_mmap_map_file_win32_callingMapViewOfFile(P1, P2, P3)   /* tracepoint name: omrport.397 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mmap_map_file_win32_badMapViewOfFile(P1) do { /* tracepoint name: omrport.398 */ \
	if ((unsigned char) omrport_UtActive[398] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((398u << 8) | omrport_UtActive[398]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_mmap_map_file_win32_badMapViewOfFile(P1)   /* tracepoint name: omrport.398 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mmap_map_file_win32_exiting(P1, P2) do { /* tracepoint name: omrport.399 */ \
	if ((unsigned char) omrport_UtActive[399] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((399u << 8) | omrport_UtActive[399]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_mmap_map_file_win32_exiting(P1, P2)   /* tracepoint name: omrport.399 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mmap_map_file_unix_entered(P1, P2, P3, P4, P5) do { /* tracepoint name: omrport.400 */ \
	if ((unsigned char) omrport_UtActive[400] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((400u << 8) | omrport_UtActive[400]), "\6\10\6\377\4", P1, P2, P3, P4, P5);} \
	} while(0)
#else
#define Trc_PRT_mmap_map_file_unix_entered(P1, P2, P3, P4, P5)   /* tracepoint name: omrport.400 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mmap_map_file_unix_invalidFlags() do { /* tracepoint name: omrport.401 */ \
	if ((unsigned char) omrport_UtActive[401] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((401u << 8) | omrport_UtActive[401]), NULL);} \
	} while(0)
#else
#define Trc_PRT_mmap_map_file_unix_invalidFlags()   /* tracepoint name: omrport.401 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mmap_map_file_unix_flagsSet(P1, P2) do { /* tracepoint name: omrport.402 */ \
	if ((unsigned char) omrport_UtActive[402] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((402u << 8) | omrport_UtActive[402]), "\4\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_mmap_map_file_unix_flagsSet(P1, P2)   /* tracepoint name: omrport.402 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mmap_map_file_unix_badMmap(P1) do { /* tracepoint name: omrport.403 */ \
	if ((unsigned char) omrport_UtActive[403] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((403u << 8) | omrport_UtActive[403]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_mmap_map_file_unix_badMmap(P1)   /* tracepoint name: omrport.403 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mmap_map_file_unix_exiting(P1, P2) do { /* tracepoint name: omrport.404 */ \
	if ((unsigned char) omrport_UtActive[404] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((404u << 8) | omrport_UtActive[404]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_mmap_map_file_unix_exiting(P1, P2)   /* tracepoint name: omrport.404 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mmap_msync_default_entered(P1, P2, P3) do { /* tracepoint name: omrport.405 */ \
	if ((unsigned char) omrport_UtActive[405] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((405u << 8) | omrport_UtActive[405]), "\6\6\4", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_mmap_msync_default_entered(P1, P2, P3)   /* tracepoint name: omrport.405 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mmap_msync_win32_entered(P1, P2, P3) do { /* tracepoint name: omrport.406 */ \
	if ((unsigned char) omrport_UtActive[406] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((406u << 8) | omrport_UtActive[406]), "\6\6\4", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_mmap_msync_win32_entered(P1, P2, P3)   /* tracepoint name: omrport.406 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mmap_msync_win32_badFlushViewOfFile(P1) do { /* tracepoint name: omrport.407 */ \
	if ((unsigned char) omrport_UtActive[407] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((407u << 8) | omrport_UtActive[407]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_mmap_msync_win32_badFlushViewOfFile(P1)   /* tracepoint name: omrport.407 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mmap_msync_win32_exiting() do { /* tracepoint name: omrport.408 */ \
	if ((unsigned char) omrport_UtActive[408] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((408u << 8) | omrport_UtActive[408]), NULL);} \
	} while(0)
#else
#define Trc_PRT_mmap_msync_win32_exiting()   /* tracepoint name: omrport.408 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mmap_msync_unix_entered(P1, P2, P3) do { /* tracepoint name: omrport.409 */ \
	if ((unsigned char) omrport_UtActive[409] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((409u << 8) | omrport_UtActive[409]), "\6\6\4", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_mmap_msync_unix_entered(P1, P2, P3)   /* tracepoint name: omrport.409 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mmap_msync_unix_invalidFlags() do { /* tracepoint name: omrport.410 */ \
	if ((unsigned char) omrport_UtActive[410] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((410u << 8) | omrport_UtActive[410]), NULL);} \
	} while(0)
#else
#define Trc_PRT_mmap_msync_unix_invalidFlags()   /* tracepoint name: omrport.410 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mmap_msync_unix_flagsSet(P1) do { /* tracepoint name: omrport.411 */ \
	if ((unsigned char) omrport_UtActive[411] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((411u << 8) | omrport_UtActive[411]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_mmap_msync_unix_flagsSet(P1)   /* tracepoint name: omrport.411 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mmap_msync_unix_badMsync(P1) do { /* tracepoint name: omrport.412 */ \
	if ((unsigned char) omrport_UtActive[412] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((412u << 8) | omrport_UtActive[412]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_mmap_msync_unix_badMsync(P1)   /* tracepoint name: omrport.412 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mmap_msync_unix_exiting() do { /* tracepoint name: omrport.413 */ \
	if ((unsigned char) omrport_UtActive[413] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((413u << 8) | omrport_UtActive[413]), NULL);} \
	} while(0)
#else
#define Trc_PRT_mmap_msync_unix_exiting()   /* tracepoint name: omrport.413 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mmap_map_file_cannotallocatehandle() do { /* tracepoint name: omrport.414 */ \
	if ((unsigned char) omrport_UtActive[414] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((414u << 8) | omrport_UtActive[414]), NULL);} \
	} while(0)
#else
#define Trc_PRT_mmap_map_file_cannotallocatehandle()   /* tracepoint name: omrport.414 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mmap_unmap_file_unix_entering(P1) do { /* tracepoint name: omrport.415 */ \
	if ((unsigned char) omrport_UtActive[415] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((415u << 8) | omrport_UtActive[415]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_mmap_unmap_file_unix_entering(P1)   /* tracepoint name: omrport.415 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mmap_unmap_file_unix_values(P1, P2) do { /* tracepoint name: omrport.416 */ \
	if ((unsigned char) omrport_UtActive[416] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((416u << 8) | omrport_UtActive[416]), "\6\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_mmap_unmap_file_unix_values(P1, P2)   /* tracepoint name: omrport.416 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mmap_unmap_file_unix_exiting(P1) do { /* tracepoint name: omrport.417 */ \
	if ((unsigned char) omrport_UtActive[417] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((417u << 8) | omrport_UtActive[417]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_mmap_unmap_file_unix_exiting(P1)   /* tracepoint name: omrport.417 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mmap_map_file_unix_filestatfailed() do { /* tracepoint name: omrport.418 */ \
	if ((unsigned char) omrport_UtActive[418] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((418u << 8) | omrport_UtActive[418]), NULL);} \
	} while(0)
#else
#define Trc_PRT_mmap_map_file_unix_filestatfailed()   /* tracepoint name: omrport.418 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mmap_dont_need(P1, P2, P3) do { /* tracepoint name: omrport.419 */ \
	if ((unsigned char) omrport_UtActive[419] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((419u << 8) | omrport_UtActive[419]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_mmap_dont_need(P1, P2, P3)   /* tracepoint name: omrport.419 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mmap_dont_need_oscall(P1, P2) do { /* tracepoint name: omrport.420 */ \
	if ((unsigned char) omrport_UtActive[420] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((420u << 8) | omrport_UtActive[420]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_mmap_dont_need_oscall(P1, P2)   /* tracepoint name: omrport.420 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mmap_dont_need_madvise_failed(P1, P2, P3) do { /* tracepoint name: omrport.421 */ \
	if ((unsigned char) omrport_UtActive[421] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((421u << 8) | omrport_UtActive[421]), "\6\6\4", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_mmap_dont_need_madvise_failed(P1, P2, P3)   /* tracepoint name: omrport.421 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mmap_dont_need_disclaim64_failed(P1, P2, P3) do { /* tracepoint name: omrport.422 */ \
	if ((unsigned char) omrport_UtActive[422] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((422u << 8) | omrport_UtActive[422]), "\6\6\4", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_mmap_dont_need_disclaim64_failed(P1, P2, P3)   /* tracepoint name: omrport.422 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mmap_dont_need_j9discard_data_failed(P1, P2) do { /* tracepoint name: omrport.423 */ \
	if ((unsigned char) omrport_UtActive[423] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((423u << 8) | omrport_UtActive[423]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_mmap_dont_need_j9discard_data_failed(P1, P2)   /* tracepoint name: omrport.423 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mmap_dont_need_Pgser_Release_failed(P1, P2) do { /* tracepoint name: omrport.424 */ \
	if ((unsigned char) omrport_UtActive[424] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((424u << 8) | omrport_UtActive[424]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_mmap_dont_need_Pgser_Release_failed(P1, P2)   /* tracepoint name: omrport.424 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_mmap_dont_need_virtual_unlock_failed(P1, P2, P3) do { /* tracepoint name: omrport.425 */ \
	if ((unsigned char) omrport_UtActive[425] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((425u << 8) | omrport_UtActive[425]), "\6\6\4", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_mmap_dont_need_virtual_unlock_failed(P1, P2, P3)   /* tracepoint name: omrport.425 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_signal_omrsig_protect_entered(P1, P2, P3, P4, P5) do { /* tracepoint name: omrport.426 */ \
	if ((unsigned char) omrport_UtActive[426] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((426u << 8) | omrport_UtActive[426]), "\6\6\6\6\4", P1, P2, P3, P4, P5);} \
	} while(0)
#else
#define Trc_PRT_signal_omrsig_protect_entered(P1, P2, P3, P4, P5)   /* tracepoint name: omrport.426 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_signal_omrsig_protect_cannot_protect_dueto_Xrs(P1, P2, P3) do { /* tracepoint name: omrport.427 */ \
	if ((unsigned char) omrport_UtActive[427] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((427u << 8) | omrport_UtActive[427]), "\6\6\4", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_signal_omrsig_protect_cannot_protect_dueto_Xrs(P1, P2, P3)   /* tracepoint name: omrport.427 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_signal_omrsig_protect_exiting_did_not_protect_due_to_Xrs(P1, P2, P3, P4, P5) do { /* tracepoint name: omrport.428 */ \
	if ((unsigned char) omrport_UtActive[428] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((428u << 8) | omrport_UtActive[428]), "\6\6\6\6\4", P1, P2, P3, P4, P5);} \
	} while(0)
#else
#define Trc_PRT_signal_omrsig_protect_exiting_did_not_protect_due_to_Xrs(P1, P2, P3, P4, P5)   /* tracepoint name: omrport.428 */
#endif

#if UT_TRACE_OVERHEAD >= 2
#define Trc_PRT_signal_omrsignal_sig_protect_Exit_long_jumped_back_to_omrsig_protect(P1, P2, P3, P4, P5) do { /* tracepoint name: omrport.429 */ \
	if ((unsigned char) omrport_UtActive[429] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((429u << 8) | omrport_UtActive[429]), "\6\6\6\6\4", P1, P2, P3, P4, P5);} \
	} while(0)
#else
#define Trc_PRT_signal_omrsignal_sig_protect_Exit_long_jumped_back_to_omrsig_protect(P1, P2, P3, P4, P5)   /* tracepoint name: omrport.429 */
#endif

#if UT_TRACE_OVERHEAD >= 2
#define Trc_PRT_signal_omrsignal_sig_protect_Exit_ERROR_accessing_tls(P1, P2, P3, P4, P5) do { /* tracepoint name: omrport.430 */ \
	if ((unsigned char) omrport_UtActive[430] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((430u << 8) | omrport_UtActive[430]), "\6\6\6\6\4", P1, P2, P3, P4, P5);} \
	} while(0)
#else
#define Trc_PRT_signal_omrsignal_sig_protect_Exit_ERROR_accessing_tls(P1, P2, P3, P4, P5)   /* tracepoint name: omrport.430 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_signal_omrsignal_sig_protect_Exit_after_returning_from_fn(P1, P2, P3, P4, P5, P6) do { /* tracepoint name: omrport.431 */ \
	if ((unsigned char) omrport_UtActive[431] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((431u << 8) | omrport_UtActive[431]), "\6\6\6\6\4\4", P1, P2, P3, P4, P5, P6);} \
	} while(0)
#else
#define Trc_PRT_signal_omrsignal_sig_protect_Exit_after_returning_from_fn(P1, P2, P3, P4, P5, P6)   /* tracepoint name: omrport.431 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_signal_registerSignalHandlerWithOS_registeredHandler(P1, P2, P3) do { /* tracepoint name: omrport.432 */ \
	if ((unsigned char) omrport_UtActive[432] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((432u << 8) | omrport_UtActive[432]), "\4\4\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_signal_registerSignalHandlerWithOS_registeredHandler(P1, P2, P3)   /* tracepoint name: omrport.432 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_signal_registerSignalHandlerWithOS_failed_to_registerHandler(P1, P2, P3) do { /* tracepoint name: omrport.433 */ \
	if ((unsigned char) omrport_UtActive[433] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((433u << 8) | omrport_UtActive[433]), "\4\4\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_signal_registerSignalHandlerWithOS_failed_to_registerHandler(P1, P2, P3)   /* tracepoint name: omrport.433 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_signal_omrsig_set_async_signal_handler_entered(P1, P2, P3) do { /* tracepoint name: omrport.434 */ \
	if ((unsigned char) omrport_UtActive[434] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((434u << 8) | omrport_UtActive[434]), "\6\6\4", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_signal_omrsig_set_async_signal_handler_entered(P1, P2, P3)   /* tracepoint name: omrport.434 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_signal_omrsig_set_async_signal_handler_will_not_set_handler_due_to_Xrs(P1, P2, P3) do { /* tracepoint name: omrport.435 */ \
	if ((unsigned char) omrport_UtActive[435] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((435u << 8) | omrport_UtActive[435]), "\6\6\4", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_signal_omrsig_set_async_signal_handler_will_not_set_handler_due_to_Xrs(P1, P2, P3)   /* tracepoint name: omrport.435 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_signal_omrsig_set_async_signal_handler_exiting_did_nothing_possible_error(P1, P2, P3) do { /* tracepoint name: omrport.436 */ \
	if ((unsigned char) omrport_UtActive[436] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((436u << 8) | omrport_UtActive[436]), "\6\6\4", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_signal_omrsig_set_async_signal_handler_exiting_did_nothing_possible_error(P1, P2, P3)   /* tracepoint name: omrport.436 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_signal_omrsig_set_async_signal_handler_user_handler_removed(P1, P2, P3) do { /* tracepoint name: omrport.437 */ \
	if ((unsigned char) omrport_UtActive[437] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((437u << 8) | omrport_UtActive[437]), "\6\6\4", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_signal_omrsig_set_async_signal_handler_user_handler_removed(P1, P2, P3)   /* tracepoint name: omrport.437 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_signal_omrsig_set_async_signal_handler_user_handler_added_1(P1, P2, P3) do { /* tracepoint name: omrport.438 */ \
	if ((unsigned char) omrport_UtActive[438] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((438u << 8) | omrport_UtActive[438]), "\6\6\4", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_signal_omrsig_set_async_signal_handler_user_handler_added_1(P1, P2, P3)   /* tracepoint name: omrport.438 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_signal_omrsig_set_async_signal_handler_user_handler_added_2(P1, P2, P3) do { /* tracepoint name: omrport.439 */ \
	if ((unsigned char) omrport_UtActive[439] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((439u << 8) | omrport_UtActive[439]), "\6\6\4", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_signal_omrsig_set_async_signal_handler_user_handler_added_2(P1, P2, P3)   /* tracepoint name: omrport.439 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_signal_omrsig_set_async_signal_handler_exiting(P1, P2, P3) do { /* tracepoint name: omrport.440 */ \
	if ((unsigned char) omrport_UtActive[440] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((440u << 8) | omrport_UtActive[440]), "\6\6\4", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_signal_omrsig_set_async_signal_handler_exiting(P1, P2, P3)   /* tracepoint name: omrport.440 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_signal_omrsig_shutdown_empty_routine(P1) do { /* tracepoint name: omrport.441 */ \
	if ((unsigned char) omrport_UtActive[441] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((441u << 8) | omrport_UtActive[441]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_signal_omrsig_shutdown_empty_routine(P1)   /* tracepoint name: omrport.441 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_signal_omrsig_set_options(P1) do { /* tracepoint name: omrport.442 */ \
	if ((unsigned char) omrport_UtActive[442] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((442u << 8) | omrport_UtActive[442]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_signal_omrsig_set_options(P1)   /* tracepoint name: omrport.442 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_signal_omrsig_set_options_too_late_handlers_installed(P1) do { /* tracepoint name: omrport.443 */ \
	if ((unsigned char) omrport_UtActive[443] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((443u << 8) | omrport_UtActive[443]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_signal_omrsig_set_options_too_late_handlers_installed(P1)   /* tracepoint name: omrport.443 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_signal_mapPortLibSignalToUnix_ERROR_unknown_signal(P1) do { /* tracepoint name: omrport.444 */ \
	if ((unsigned char) omrport_UtActive[444] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((444u << 8) | omrport_UtActive[444]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_signal_mapPortLibSignalToUnix_ERROR_unknown_signal(P1)   /* tracepoint name: omrport.444 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_signal_omrsig_asynchSignalReporterThread_going_to_sleep() do { /* tracepoint name: omrport.445 */ \
	if ((unsigned char) omrport_UtActive[445] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((445u << 8) | omrport_UtActive[445]), NULL);} \
	} while(0)
#else
#define Trc_PRT_signal_omrsig_asynchSignalReporterThread_going_to_sleep()   /* tracepoint name: omrport.445 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_signal_omrsig_asynchSignalReporter_woken_up() do { /* tracepoint name: omrport.446 */ \
	if ((unsigned char) omrport_UtActive[446] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((446u << 8) | omrport_UtActive[446]), NULL);} \
	} while(0)
#else
#define Trc_PRT_signal_omrsig_asynchSignalReporter_woken_up()   /* tracepoint name: omrport.446 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_signal_omrsig_asynchSignalReporter_woken_up_for_SIGQUIT() do { /* tracepoint name: omrport.447 */ \
	if ((unsigned char) omrport_UtActive[447] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((447u << 8) | omrport_UtActive[447]), NULL);} \
	} while(0)
#else
#define Trc_PRT_signal_omrsig_asynchSignalReporter_woken_up_for_SIGQUIT()   /* tracepoint name: omrport.447 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_signal_omrsig_asynchSignalReporter_woken_up_for_SIGABRT() do { /* tracepoint name: omrport.448 */ \
	if ((unsigned char) omrport_UtActive[448] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((448u << 8) | omrport_UtActive[448]), NULL);} \
	} while(0)
#else
#define Trc_PRT_signal_omrsig_asynchSignalReporter_woken_up_for_SIGABRT()   /* tracepoint name: omrport.448 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_signal_omrsig_asynchSignalReporter_woken_up_for_SIGTERM() do { /* tracepoint name: omrport.449 */ \
	if ((unsigned char) omrport_UtActive[449] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((449u << 8) | omrport_UtActive[449]), NULL);} \
	} while(0)
#else
#define Trc_PRT_signal_omrsig_asynchSignalReporter_woken_up_for_SIGTERM()   /* tracepoint name: omrport.449 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_signal_omrsig_asynchSignalReporter_woken_up_for_SIGRECONFIG() do { /* tracepoint name: omrport.450 */ \
	if ((unsigned char) omrport_UtActive[450] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((450u << 8) | omrport_UtActive[450]), NULL);} \
	} while(0)
#else
#define Trc_PRT_signal_omrsig_asynchSignalReporter_woken_up_for_SIGRECONFIG()   /* tracepoint name: omrport.450 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_signal_omrsig_asynchSignalReporter_woken_up_for_shutdown() do { /* tracepoint name: omrport.451 */ \
	if ((unsigned char) omrport_UtActive[451] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((451u << 8) | omrport_UtActive[451]), NULL);} \
	} while(0)
#else
#define Trc_PRT_signal_omrsig_asynchSignalReporter_woken_up_for_shutdown()   /* tracepoint name: omrport.451 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_signal_omrsig_asynchSignalReporter_calling_handler(P1, P2, P3) do { /* tracepoint name: omrport.452 */ \
	if ((unsigned char) omrport_UtActive[452] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((452u << 8) | omrport_UtActive[452]), "\6\4\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_signal_omrsig_asynchSignalReporter_calling_handler(P1, P2, P3)   /* tracepoint name: omrport.452 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_signal_setReporterPriority(P1, P2) do { /* tracepoint name: omrport.453 */ \
	if ((unsigned char) omrport_UtActive[453] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((453u << 8) | omrport_UtActive[453]), "\6\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_signal_setReporterPriority(P1, P2)   /* tracepoint name: omrport.453 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_signal_omrsig_startup_entered(P1) do { /* tracepoint name: omrport.454 */ \
	if ((unsigned char) omrport_UtActive[454] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((454u << 8) | omrport_UtActive[454]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_signal_omrsig_startup_entered(P1)   /* tracepoint name: omrport.454 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_signal_omrsig_startup_exiting(P1, P2) do { /* tracepoint name: omrport.455 */ \
	if ((unsigned char) omrport_UtActive[455] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((455u << 8) | omrport_UtActive[455]), "\6\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_signal_omrsig_startup_exiting(P1, P2)   /* tracepoint name: omrport.455 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_signal_omrsig_can_protect_entered(P1) do { /* tracepoint name: omrport.456 */ \
	if ((unsigned char) omrport_UtActive[456] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((456u << 8) | omrport_UtActive[456]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_signal_omrsig_can_protect_entered(P1)   /* tracepoint name: omrport.456 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_signal_omrsig_can_protect_exiting_is_able_to_protect(P1) do { /* tracepoint name: omrport.457 */ \
	if ((unsigned char) omrport_UtActive[457] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((457u << 8) | omrport_UtActive[457]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_signal_omrsig_can_protect_exiting_is_able_to_protect(P1)   /* tracepoint name: omrport.457 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_signal_omrsig_can_protect_exiting_is_not_able_to_protect(P1) do { /* tracepoint name: omrport.458 */ \
	if ((unsigned char) omrport_UtActive[458] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((458u << 8) | omrport_UtActive[458]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_signal_omrsig_can_protect_exiting_is_not_able_to_protect(P1)   /* tracepoint name: omrport.458 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_signal_sig_full_shutdown_enter(P1) do { /* tracepoint name: omrport.459 */ \
	if ((unsigned char) omrport_UtActive[459] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((459u << 8) | omrport_UtActive[459]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_signal_sig_full_shutdown_enter(P1)   /* tracepoint name: omrport.459 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_signal_sig_full_shutdown_deregistered_handler_with_OS(P1, P2) do { /* tracepoint name: omrport.460 */ \
	if ((unsigned char) omrport_UtActive[460] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((460u << 8) | omrport_UtActive[460]), "\6\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_signal_sig_full_shutdown_deregistered_handler_with_OS(P1, P2)   /* tracepoint name: omrport.460 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_signal_sig_full_shutdown_exiting(P1) do { /* tracepoint name: omrport.461 */ \
	if ((unsigned char) omrport_UtActive[461] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((461u << 8) | omrport_UtActive[461]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_signal_sig_full_shutdown_exiting(P1)   /* tracepoint name: omrport.461 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_signal_omrsig_chain_at_shutdown_and_exit_enter(P1) do { /* tracepoint name: omrport.462 */ \
	if ((unsigned char) omrport_UtActive[462] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((462u << 8) | omrport_UtActive[462]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_signal_omrsig_chain_at_shutdown_and_exit_enter(P1)   /* tracepoint name: omrport.462 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_signal_omrsig_chain_at_shutdown_and_exit_forwarding_to_omrsigHandler(P1, P2) do { /* tracepoint name: omrport.463 */ \
	if ((unsigned char) omrport_UtActive[463] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((463u << 8) | omrport_UtActive[463]), "\6\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_signal_omrsig_chain_at_shutdown_and_exit_forwarding_to_omrsigHandler(P1, P2)   /* tracepoint name: omrport.463 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_signal_omrsig_chain_at_shutdown_and_exit_exiting(P1) do { /* tracepoint name: omrport.464 */ \
	if ((unsigned char) omrport_UtActive[464] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((464u << 8) | omrport_UtActive[464]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_signal_omrsig_chain_at_shutdown_and_exit_exiting(P1)   /* tracepoint name: omrport.464 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sig_can_protect_OMRPORT_SIG_FLAG_MAY_CONTINUE_EXECUTION_NOT_supported() do { /* tracepoint name: omrport.465 */ \
	if ((unsigned char) omrport_UtActive[465] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((465u << 8) | omrport_UtActive[465]), NULL);} \
	} while(0)
#else
#define Trc_PRT_sig_can_protect_OMRPORT_SIG_FLAG_MAY_CONTINUE_EXECUTION_NOT_supported()   /* tracepoint name: omrport.465 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sig_can_protect_OMRPORT_SIG_FLAG_MAY_CONTINUE_EXECUTION_supported() do { /* tracepoint name: omrport.466 */ \
	if ((unsigned char) omrport_UtActive[466] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((466u << 8) | omrport_UtActive[466]), NULL);} \
	} while(0)
#else
#define Trc_PRT_sig_can_protect_OMRPORT_SIG_FLAG_MAY_CONTINUE_EXECUTION_supported()   /* tracepoint name: omrport.466 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_zos_omrsig_protect_using_ceehdlr_CEEHDLR_failed(P1) do { /* tracepoint name: omrport.467 */ \
	if ((unsigned char) omrport_UtActive[467] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((467u << 8) | omrport_UtActive[467]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_zos_omrsig_protect_using_ceehdlr_CEEHDLR_failed(P1)   /* tracepoint name: omrport.467 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_signal_omrsig_asynchSignalReporter_woken_up_for_SIGXFSZ() do { /* tracepoint name: omrport.468 */ \
	if ((unsigned char) omrport_UtActive[468] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((468u << 8) | omrport_UtActive[468]), NULL);} \
	} while(0)
#else
#define Trc_PRT_signal_omrsig_asynchSignalReporter_woken_up_for_SIGXFSZ()   /* tracepoint name: omrport.468 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sl_close_shared_library_Entry(P1) do { /* tracepoint name: omrport.469 */ \
	if ((unsigned char) omrport_UtActive[469] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((469u << 8) | omrport_UtActive[469]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_sl_close_shared_library_Entry(P1)   /* tracepoint name: omrport.469 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sl_close_shared_library_Exit(P1) do { /* tracepoint name: omrport.470 */ \
	if ((unsigned char) omrport_UtActive[470] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((470u << 8) | omrport_UtActive[470]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_sl_close_shared_library_Exit(P1)   /* tracepoint name: omrport.470 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sl_lookup_name_Entry(P1, P2, P3) do { /* tracepoint name: omrport.471 */ \
	if ((unsigned char) omrport_UtActive[471] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((471u << 8) | omrport_UtActive[471]), "\4\377\377", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_sl_lookup_name_Entry(P1, P2, P3)   /* tracepoint name: omrport.471 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sl_lookup_name_Exit1(P1) do { /* tracepoint name: omrport.472 */ \
	if ((unsigned char) omrport_UtActive[472] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((472u << 8) | omrport_UtActive[472]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_sl_lookup_name_Exit1(P1)   /* tracepoint name: omrport.472 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sl_lookup_name_Exit2(P1, P2, P3, P4) do { /* tracepoint name: omrport.473 */ \
	if ((unsigned char) omrport_UtActive[473] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((473u << 8) | omrport_UtActive[473]), "\377\377\4\4", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_PRT_sl_lookup_name_Exit2(P1, P2, P3, P4)   /* tracepoint name: omrport.473 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sl_lookup_name_Exit3(P1, P2) do { /* tracepoint name: omrport.474 */ \
	if ((unsigned char) omrport_UtActive[474] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((474u << 8) | omrport_UtActive[474]), "\4\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_sl_lookup_name_Exit3(P1, P2)   /* tracepoint name: omrport.474 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sl_open_shared_library_Entry(P1, P2) do { /* tracepoint name: omrport.475 */ \
	if ((unsigned char) omrport_UtActive[475] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((475u << 8) | omrport_UtActive[475]), "\377\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_sl_open_shared_library_Entry(P1, P2)   /* tracepoint name: omrport.475 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sl_open_shared_library_Event1(P1) do { /* tracepoint name: omrport.476 */ \
	if ((unsigned char) omrport_UtActive[476] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((476u << 8) | omrport_UtActive[476]), "\377", P1);} \
	} while(0)
#else
#define Trc_PRT_sl_open_shared_library_Event1(P1)   /* tracepoint name: omrport.476 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sl_open_shared_library_Exit1(P1) do { /* tracepoint name: omrport.477 */ \
	if ((unsigned char) omrport_UtActive[477] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((477u << 8) | omrport_UtActive[477]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_sl_open_shared_library_Exit1(P1)   /* tracepoint name: omrport.477 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sl_open_shared_library_Exit2(P1) do { /* tracepoint name: omrport.478 */ \
	if ((unsigned char) omrport_UtActive[478] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((478u << 8) | omrport_UtActive[478]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_sl_open_shared_library_Exit2(P1)   /* tracepoint name: omrport.478 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sl_open_shared_library_Exit3(P1, P2) do { /* tracepoint name: omrport.479 */ \
	if ((unsigned char) omrport_UtActive[479] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((479u << 8) | omrport_UtActive[479]), "\4\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_sl_open_shared_library_Exit3(P1, P2)   /* tracepoint name: omrport.479 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sl_open_shared_library_Event2(P1) do { /* tracepoint name: omrport.480 */ \
	if ((unsigned char) omrport_UtActive[480] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((480u << 8) | omrport_UtActive[480]), "\377", P1);} \
	} while(0)
#else
#define Trc_PRT_sl_open_shared_library_Event2(P1)   /* tracepoint name: omrport.480 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_omrvmem_reserve_memory_Entry(P1, P2) do { /* tracepoint name: omrport.481 */ \
	if ((unsigned char) omrport_UtActive[481] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((481u << 8) | omrport_UtActive[481]), "\6\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_vmem_omrvmem_reserve_memory_Entry(P1, P2)   /* tracepoint name: omrport.481 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_omrvmem_reserve_memory_Exit1() do { /* tracepoint name: omrport.482 */ \
	if ((unsigned char) omrport_UtActive[482] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((482u << 8) | omrport_UtActive[482]), NULL);} \
	} while(0)
#else
#define Trc_PRT_vmem_omrvmem_reserve_memory_Exit1()   /* tracepoint name: omrport.482 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_omrvmem_reserve_memory_Exit2(P1) do { /* tracepoint name: omrport.483 */ \
	if ((unsigned char) omrport_UtActive[483] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((483u << 8) | omrport_UtActive[483]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_vmem_omrvmem_reserve_memory_Exit2(P1)   /* tracepoint name: omrport.483 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_omrvmem_reserve_memory_Exit(P1) do { /* tracepoint name: omrport.484 */ \
	if ((unsigned char) omrport_UtActive[484] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((484u << 8) | omrport_UtActive[484]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_vmem_omrvmem_reserve_memory_Exit(P1)   /* tracepoint name: omrport.484 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_omrvmem_free_memory_Entry(P1, P2) do { /* tracepoint name: omrport.485 */ \
	if ((unsigned char) omrport_UtActive[485] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((485u << 8) | omrport_UtActive[485]), "\6\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_vmem_omrvmem_free_memory_Entry(P1, P2)   /* tracepoint name: omrport.485 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_omrvmem_free_memory_Exit(P1) do { /* tracepoint name: omrport.486 */ \
	if ((unsigned char) omrport_UtActive[486] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((486u << 8) | omrport_UtActive[486]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_vmem_omrvmem_free_memory_Exit(P1)   /* tracepoint name: omrport.486 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_omrvmem_commit_memory_Entry(P1, P2) do { /* tracepoint name: omrport.487 */ \
	if ((unsigned char) omrport_UtActive[487] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((487u << 8) | omrport_UtActive[487]), "\6\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_vmem_omrvmem_commit_memory_Entry(P1, P2)   /* tracepoint name: omrport.487 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_omrvmem_commit_memory_Exit(P1) do { /* tracepoint name: omrport.488 */ \
	if ((unsigned char) omrport_UtActive[488] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((488u << 8) | omrport_UtActive[488]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_vmem_omrvmem_commit_memory_Exit(P1)   /* tracepoint name: omrport.488 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_omrvmem_decommit_memory_Entry(P1, P2) do { /* tracepoint name: omrport.489 */ \
	if ((unsigned char) omrport_UtActive[489] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((489u << 8) | omrport_UtActive[489]), "\6\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_vmem_omrvmem_decommit_memory_Entry(P1, P2)   /* tracepoint name: omrport.489 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_omrvmem_decommit_memory_Exit(P1) do { /* tracepoint name: omrport.490 */ \
	if ((unsigned char) omrport_UtActive[490] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((490u << 8) | omrport_UtActive[490]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_vmem_omrvmem_decommit_memory_Exit(P1)   /* tracepoint name: omrport.490 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_user_does_not_have_Lock_Pages_in_Memory_permission_in_local_security_policy_settings() do { /* tracepoint name: omrport.491 */ \
	if ((unsigned char) omrport_UtActive[491] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((491u << 8) | omrport_UtActive[491]), NULL);} \
	} while(0)
#else
#define Trc_PRT_vmem_user_does_not_have_Lock_Pages_in_Memory_permission_in_local_security_policy_settings()   /* tracepoint name: omrport.491 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_port_numa_interleave_memory_enter() do { /* tracepoint name: omrport.492 */ \
	if ((unsigned char) omrport_UtActive[492] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((492u << 8) | omrport_UtActive[492]), NULL);} \
	} while(0)
#else
#define Trc_PRT_vmem_port_numa_interleave_memory_enter()   /* tracepoint name: omrport.492 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_port_numa_interleave_memory_exit() do { /* tracepoint name: omrport.493 */ \
	if ((unsigned char) omrport_UtActive[493] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((493u << 8) | omrport_UtActive[493]), NULL);} \
	} while(0)
#else
#define Trc_PRT_vmem_port_numa_interleave_memory_exit()   /* tracepoint name: omrport.493 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_port_numa_interleave_memory_mbind_failed(P1, P2) do { /* tracepoint name: omrport.494 */ \
	if ((unsigned char) omrport_UtActive[494] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((494u << 8) | omrport_UtActive[494]), "\4\377", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_vmem_port_numa_interleave_memory_mbind_failed(P1, P2)   /* tracepoint name: omrport.494 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_numa_set_affinity_mbind_failed(P1, P2) do { /* tracepoint name: omrport.495 */ \
	if ((unsigned char) omrport_UtActive[495] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((495u << 8) | omrport_UtActive[495]), "\4\377", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_vmem_numa_set_affinity_mbind_failed(P1, P2)   /* tracepoint name: omrport.495 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_port_numa_set_affinity_node_out_of_range(P1) do { /* tracepoint name: omrport.496 */ \
	if ((unsigned char) omrport_UtActive[496] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((496u << 8) | omrport_UtActive[496]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_vmem_port_numa_set_affinity_node_out_of_range(P1)   /* tracepoint name: omrport.496 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_port_numa_set_affinity_node_not_present(P1) do { /* tracepoint name: omrport.497 */ \
	if ((unsigned char) omrport_UtActive[497] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((497u << 8) | omrport_UtActive[497]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_vmem_port_numa_set_affinity_node_not_present(P1)   /* tracepoint name: omrport.497 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_port_numa_numa_support_could_not_be_configured_at_startup() do { /* tracepoint name: omrport.498 */ \
	if ((unsigned char) omrport_UtActive[498] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((498u << 8) | omrport_UtActive[498]), NULL);} \
	} while(0)
#else
#define Trc_PRT_vmem_port_numa_numa_support_could_not_be_configured_at_startup()   /* tracepoint name: omrport.498 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_default_reserve_entry(P1, P2) do { /* tracepoint name: omrport.499 */ \
	if ((unsigned char) omrport_UtActive[499] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((499u << 8) | omrport_UtActive[499]), "\6\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_vmem_default_reserve_entry(P1, P2)   /* tracepoint name: omrport.499 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_default_reserve_using_mem_allocate_memory(P1) do { /* tracepoint name: omrport.500 */ \
	if ((unsigned char) omrport_UtActive[500] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((500u << 8) | omrport_UtActive[500]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_vmem_default_reserve_using_mem_allocate_memory(P1)   /* tracepoint name: omrport.500 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_default_reserve_using_mem_allocate_memory32(P1) do { /* tracepoint name: omrport.501 */ \
	if ((unsigned char) omrport_UtActive[501] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((501u << 8) | omrport_UtActive[501]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_vmem_default_reserve_using_mem_allocate_memory32(P1)   /* tracepoint name: omrport.501 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_default_reserve_failed(P1, P2) do { /* tracepoint name: omrport.502 */ \
	if ((unsigned char) omrport_UtActive[502] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((502u << 8) | omrport_UtActive[502]), "\6\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_vmem_default_reserve_failed(P1, P2)   /* tracepoint name: omrport.502 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_default_reserve_exit(P1, P2, P3) do { /* tracepoint name: omrport.503 */ \
	if ((unsigned char) omrport_UtActive[503] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((503u << 8) | omrport_UtActive[503]), "\6\6\4", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_vmem_default_reserve_exit(P1, P2, P3)   /* tracepoint name: omrport.503 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_omrvmem_reserve_memory_Entry_replacement(P1, P2, P3) do { /* tracepoint name: omrport.504 */ \
	if ((unsigned char) omrport_UtActive[504] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((504u << 8) | omrport_UtActive[504]), "\6\4\4", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_vmem_omrvmem_reserve_memory_Entry_replacement(P1, P2, P3)   /* tracepoint name: omrport.504 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_omrvmem_reserve_memory_invalid_input() do { /* tracepoint name: omrport.505 */ \
	if ((unsigned char) omrport_UtActive[505] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((505u << 8) | omrport_UtActive[505]), NULL);} \
	} while(0)
#else
#define Trc_PRT_vmem_omrvmem_reserve_memory_invalid_input()   /* tracepoint name: omrport.505 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_omrvmem_reserve_memory_unsupported_page_size(P1) do { /* tracepoint name: omrport.506 */ \
	if ((unsigned char) omrport_UtActive[506] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((506u << 8) | omrport_UtActive[506]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_vmem_omrvmem_reserve_memory_unsupported_page_size(P1)   /* tracepoint name: omrport.506 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_omrvmem_reserve_memory_failure() do { /* tracepoint name: omrport.507 */ \
	if ((unsigned char) omrport_UtActive[507] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((507u << 8) | omrport_UtActive[507]), NULL);} \
	} while(0)
#else
#define Trc_PRT_vmem_omrvmem_reserve_memory_failure()   /* tracepoint name: omrport.507 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_omrvmem_reserve_memory_shmget_failed(P1, P2) do { /* tracepoint name: omrport.508 */ \
	if ((unsigned char) omrport_UtActive[508] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((508u << 8) | omrport_UtActive[508]), "\4\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_vmem_omrvmem_reserve_memory_shmget_failed(P1, P2)   /* tracepoint name: omrport.508 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_omrvmem_reserve_memory_Exit_replacement(P1, P2) do { /* tracepoint name: omrport.509 */ \
	if ((unsigned char) omrport_UtActive[509] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((509u << 8) | omrport_UtActive[509]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_vmem_omrvmem_reserve_memory_Exit_replacement(P1, P2)   /* tracepoint name: omrport.509 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_omrvmem_free_memory_using_mem_free_memory(P1, P2) do { /* tracepoint name: omrport.510 */ \
	if ((unsigned char) omrport_UtActive[510] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((510u << 8) | omrport_UtActive[510]), "\6\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_vmem_omrvmem_free_memory_using_mem_free_memory(P1, P2)   /* tracepoint name: omrport.510 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_omrvmem_free_memory_using_mem_free_memory32(P1, P2) do { /* tracepoint name: omrport.511 */ \
	if ((unsigned char) omrport_UtActive[511] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((511u << 8) | omrport_UtActive[511]), "\6\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_vmem_omrvmem_free_memory_using_mem_free_memory32(P1, P2)   /* tracepoint name: omrport.511 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_omrvmem_reserve_memory_ex_UnableToAllocateWithinSpecifiedRange(P1, P2, P3) do { /* tracepoint name: omrport.512 */ \
	if ((unsigned char) omrport_UtActive[512] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((512u << 8) | omrport_UtActive[512]), "\4\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_vmem_omrvmem_reserve_memory_ex_UnableToAllocateWithinSpecifiedRange(P1, P2, P3)   /* tracepoint name: omrport.512 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_omrvmem_reserve_memory_shmdt_failed(P1) do { /* tracepoint name: omrport.513 */ \
	if ((unsigned char) omrport_UtActive[513] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((513u << 8) | omrport_UtActive[513]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_vmem_omrvmem_reserve_memory_shmdt_failed(P1)   /* tracepoint name: omrport.513 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_omrvmem_reserve_memory_ex_large_page_request_failed_reverting_to_default_page_size(P1, P2) do { /* tracepoint name: omrport.514 */ \
	if ((unsigned char) omrport_UtActive[514] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((514u << 8) | omrport_UtActive[514]), "\4\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_vmem_omrvmem_reserve_memory_ex_large_page_request_failed_reverting_to_default_page_size(P1, P2)   /* tracepoint name: omrport.514 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_omrvmem_startup_failed_to_close_dll() do { /* tracepoint name: omrport.515 */ \
	if ((unsigned char) omrport_UtActive[515] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((515u << 8) | omrport_UtActive[515]), NULL);} \
	} while(0)
#else
#define Trc_PRT_vmem_omrvmem_startup_failed_to_close_dll()   /* tracepoint name: omrport.515 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_omrvmem_reserve_memory_ex_aix_vmgetinfo_failed(P1) do { /* tracepoint name: omrport.516 */ \
	if ((unsigned char) omrport_UtActive[516] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((516u << 8) | omrport_UtActive[516]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_vmem_omrvmem_reserve_memory_ex_aix_vmgetinfo_failed(P1)   /* tracepoint name: omrport.516 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_omrvmem_startup_pagessize_exceeds_physical_memory(P1, P2) do { /* tracepoint name: omrport.517 */ \
	if ((unsigned char) omrport_UtActive[517] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((517u << 8) | omrport_UtActive[517]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_vmem_omrvmem_startup_pagessize_exceeds_physical_memory(P1, P2)   /* tracepoint name: omrport.517 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_omrvmem_commit_memory_invalidRange(P1, P2, P3, P4) do { /* tracepoint name: omrport.518 */ \
	if ((unsigned char) omrport_UtActive[518] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((518u << 8) | omrport_UtActive[518]), "\6\6\6\6", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_PRT_vmem_omrvmem_commit_memory_invalidRange(P1, P2, P3, P4)   /* tracepoint name: omrport.518 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_omrvmem_decommit_memory_invalidRange(P1, P2, P3, P4) do { /* tracepoint name: omrport.519 */ \
	if ((unsigned char) omrport_UtActive[519] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((519u << 8) | omrport_UtActive[519]), "\6\6\6\6", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_PRT_vmem_omrvmem_decommit_memory_invalidRange(P1, P2, P3, P4)   /* tracepoint name: omrport.519 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_omrvmem_commit_memory_mprotect_failure(P1) do { /* tracepoint name: omrport.520 */ \
	if ((unsigned char) omrport_UtActive[520] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((520u << 8) | omrport_UtActive[520]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_vmem_omrvmem_commit_memory_mprotect_failure(P1)   /* tracepoint name: omrport.520 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_touchOnNumaNode_failedToBindToComputeResource(P1, P2, P3) do { /* tracepoint name: omrport.521 */ \
	if ((unsigned char) omrport_UtActive[521] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((521u << 8) | omrport_UtActive[521]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_vmem_touchOnNumaNode_failedToBindToComputeResource(P1, P2, P3)   /* tracepoint name: omrport.521 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_touchOnNumaNode_failedToReturnToComputeResource(P1, P2, P3) do { /* tracepoint name: omrport.522 */ \
	if ((unsigned char) omrport_UtActive[522] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((522u << 8) | omrport_UtActive[522]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_vmem_touchOnNumaNode_failedToReturnToComputeResource(P1, P2, P3)   /* tracepoint name: omrport.522 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_touchOnNumaNode_failedToBindToNodeForTouch(P1) do { /* tracepoint name: omrport.523 */ \
	if ((unsigned char) omrport_UtActive[523] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((523u << 8) | omrport_UtActive[523]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_vmem_touchOnNumaNode_failedToBindToNodeForTouch(P1)   /* tracepoint name: omrport.523 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_port_numa_set_affinity_enter(P1, P2, P3) do { /* tracepoint name: omrport.524 */ \
	if ((unsigned char) omrport_UtActive[524] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((524u << 8) | omrport_UtActive[524]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_vmem_port_numa_set_affinity_enter(P1, P2, P3)   /* tracepoint name: omrport.524 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_port_numa_set_affinity_no_NUMA() do { /* tracepoint name: omrport.525 */ \
	if ((unsigned char) omrport_UtActive[525] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((525u << 8) | omrport_UtActive[525]), NULL);} \
	} while(0)
#else
#define Trc_PRT_vmem_port_numa_set_affinity_no_NUMA()   /* tracepoint name: omrport.525 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_port_numa_set_affinity_exit(P1) do { /* tracepoint name: omrport.526 */ \
	if ((unsigned char) omrport_UtActive[526] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((526u << 8) | omrport_UtActive[526]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_vmem_port_numa_set_affinity_exit(P1)   /* tracepoint name: omrport.526 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_decommit_memory_calling_disclaim(P1) do { /* tracepoint name: omrport.527 */ \
	if ((unsigned char) omrport_UtActive[527] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((527u << 8) | omrport_UtActive[527]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_vmem_decommit_memory_calling_disclaim(P1)   /* tracepoint name: omrport.527 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_decommit_memory_calling_msync(P1) do { /* tracepoint name: omrport.528 */ \
	if ((unsigned char) omrport_UtActive[528] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((528u << 8) | omrport_UtActive[528]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_vmem_decommit_memory_calling_msync(P1)   /* tracepoint name: omrport.528 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_omrvmem_reserve_memory_Entry_replacement_v1(P1, P2, P3, P4) do { /* tracepoint name: omrport.529 */ \
	if ((unsigned char) omrport_UtActive[529] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((529u << 8) | omrport_UtActive[529]), "\6\6\6\6", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_PRT_vmem_omrvmem_reserve_memory_Entry_replacement_v1(P1, P2, P3, P4)   /* tracepoint name: omrport.529 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_omrvmem_reserve_memory_parameter_mismatch(P1, P2) do { /* tracepoint name: omrport.530 */ \
	if ((unsigned char) omrport_UtActive[530] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((530u << 8) | omrport_UtActive[530]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_vmem_omrvmem_reserve_memory_parameter_mismatch(P1, P2)   /* tracepoint name: omrport.530 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_omrvmem_reserve_memory_unsupported_page_size_executable_largepages(P1, P2) do { /* tracepoint name: omrport.531 */ \
	if ((unsigned char) omrport_UtActive[531] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((531u << 8) | omrport_UtActive[531]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_vmem_omrvmem_reserve_memory_unsupported_page_size_executable_largepages(P1, P2)   /* tracepoint name: omrport.531 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_reserve1MPageableBelowBar_Entry(P1) do { /* tracepoint name: omrport.532 */ \
	if ((unsigned char) omrport_UtActive[532] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((532u << 8) | omrport_UtActive[532]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_vmem_reserve1MPageableBelowBar_Entry(P1)   /* tracepoint name: omrport.532 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_reserve1MPageableBelowBar_Exit(P1) do { /* tracepoint name: omrport.533 */ \
	if ((unsigned char) omrport_UtActive[533] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((533u << 8) | omrport_UtActive[533]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_vmem_reserve1MPageableBelowBar_Exit(P1)   /* tracepoint name: omrport.533 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_reservePagesAboveBar_Entry(P1, P2, P3, P4, P5) do { /* tracepoint name: omrport.534 */ \
	if ((unsigned char) omrport_UtActive[534] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((534u << 8) | omrport_UtActive[534]), "\6\6\6\6\6", P1, P2, P3, P4, P5);} \
	} while(0)
#else
#define Trc_PRT_vmem_reservePagesAboveBar_Entry(P1, P2, P3, P4, P5)   /* tracepoint name: omrport.534 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_reservePagesAboveBar_allocate_4K_pages_in_2to32G_area(P1) do { /* tracepoint name: omrport.535 */ \
	if ((unsigned char) omrport_UtActive[535] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((535u << 8) | omrport_UtActive[535]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_vmem_reservePagesAboveBar_allocate_4K_pages_in_2to32G_area(P1)   /* tracepoint name: omrport.535 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_reservePagesAboveBar_allocate_large_2G_pages(P1, P2) do { /* tracepoint name: omrport.536 */ \
	if ((unsigned char) omrport_UtActive[536] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((536u << 8) | omrport_UtActive[536]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_vmem_reservePagesAboveBar_allocate_large_2G_pages(P1, P2)   /* tracepoint name: omrport.536 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_reservePagesAboveBar_allocate_large_pages(P1, P2) do { /* tracepoint name: omrport.537 */ \
	if ((unsigned char) omrport_UtActive[537] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((537u << 8) | omrport_UtActive[537]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_vmem_reservePagesAboveBar_allocate_large_pages(P1, P2)   /* tracepoint name: omrport.537 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_reservePagesAboveBar_allocate_large_pageable_pages_above_bar(P1, P2) do { /* tracepoint name: omrport.538 */ \
	if ((unsigned char) omrport_UtActive[538] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((538u << 8) | omrport_UtActive[538]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_vmem_reservePagesAboveBar_allocate_large_pageable_pages_above_bar(P1, P2)   /* tracepoint name: omrport.538 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_reservePagesAboveBar_Exit(P1) do { /* tracepoint name: omrport.539 */ \
	if ((unsigned char) omrport_UtActive[539] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((539u << 8) | omrport_UtActive[539]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_vmem_reservePagesAboveBar_Exit(P1)   /* tracepoint name: omrport.539 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_omrvmem_free_memory_using_free_memory_below_bar(P1, P2) do { /* tracepoint name: omrport.540 */ \
	if ((unsigned char) omrport_UtActive[540] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((540u << 8) | omrport_UtActive[540]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_vmem_omrvmem_free_memory_using_free_memory_below_bar(P1, P2)   /* tracepoint name: omrport.540 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_omrvmem_free_memory_using_free_memory_above_bar(P1, P2, P3) do { /* tracepoint name: omrport.541 */ \
	if ((unsigned char) omrport_UtActive[541] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((541u << 8) | omrport_UtActive[541]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_vmem_omrvmem_free_memory_using_free_memory_above_bar(P1, P2, P3)   /* tracepoint name: omrport.541 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_reservePages_UnableToAllocateWithinSpecifiedRange(P1, P2, P3) do { /* tracepoint name: omrport.542 */ \
	if ((unsigned char) omrport_UtActive[542] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((542u << 8) | omrport_UtActive[542]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_vmem_reservePages_UnableToAllocateWithinSpecifiedRange(P1, P2, P3)   /* tracepoint name: omrport.542 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_omrvmem_initializeNumaGlobals_get_mempolicy_failure(P1) do { /* tracepoint name: omrport.543 */ \
	if ((unsigned char) omrport_UtActive[543] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((543u << 8) | omrport_UtActive[543]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_vmem_omrvmem_initializeNumaGlobals_get_mempolicy_failure(P1)   /* tracepoint name: omrport.543 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_omrvmem_initializeNumaGlobals_get_allowed_mems_failure(P1) do { /* tracepoint name: omrport.544 */ \
	if ((unsigned char) omrport_UtActive[544] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((544u << 8) | omrport_UtActive[544]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_vmem_omrvmem_initializeNumaGlobals_get_allowed_mems_failure(P1)   /* tracepoint name: omrport.544 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_omrvmem_reserve_memory_ex_UnableToReallocateWithLargePages(P1, P2) do { /* tracepoint name: omrport.545 */ \
	if ((unsigned char) omrport_UtActive[545] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((545u << 8) | omrport_UtActive[545]), "\4\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_vmem_omrvmem_reserve_memory_ex_UnableToReallocateWithLargePages(P1, P2)   /* tracepoint name: omrport.545 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_decommit_memory_zero_pages() do { /* tracepoint name: omrport.546 */ \
	if ((unsigned char) omrport_UtActive[546] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((546u << 8) | omrport_UtActive[546]), NULL);} \
	} while(0)
#else
#define Trc_PRT_vmem_decommit_memory_zero_pages()   /* tracepoint name: omrport.546 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_decommit_memory_not_allowed(P1) do { /* tracepoint name: omrport.547 */ \
	if ((unsigned char) omrport_UtActive[547] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((547u << 8) | omrport_UtActive[547]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_vmem_decommit_memory_not_allowed(P1)   /* tracepoint name: omrport.547 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_omrvmem_reserve_memory_shmat_failed2(P1, P2, P3) do { /* tracepoint name: omrport.548 */ \
	if ((unsigned char) omrport_UtActive[548] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((548u << 8) | omrport_UtActive[548]), "\4\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_vmem_omrvmem_reserve_memory_shmat_failed2(P1, P2, P3)   /* tracepoint name: omrport.548 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_default_reserve_low_using_4K_pages_below_bar(P1) do { /* tracepoint name: omrport.549 */ \
	if ((unsigned char) omrport_UtActive[549] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((549u << 8) | omrport_UtActive[549]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_vmem_default_reserve_low_using_4K_pages_below_bar(P1)   /* tracepoint name: omrport.549 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_default_reserve_using_4K_pages_below_bar(P1) do { /* tracepoint name: omrport.550 */ \
	if ((unsigned char) omrport_UtActive[550] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((550u << 8) | omrport_UtActive[550]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_vmem_default_reserve_using_4K_pages_below_bar(P1)   /* tracepoint name: omrport.550 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_default_reserve_using_4K_pages_above_bar(P1) do { /* tracepoint name: omrport.551 */ \
	if ((unsigned char) omrport_UtActive[551] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((551u << 8) | omrport_UtActive[551]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_vmem_default_reserve_using_4K_pages_above_bar(P1)   /* tracepoint name: omrport.551 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_default_reserve_using_4K_pages_above_bar_invalid_argument(P1, P2) do { /* tracepoint name: omrport.552 */ \
	if ((unsigned char) omrport_UtActive[552] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((552u << 8) | omrport_UtActive[552]), "\4\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_vmem_default_reserve_using_4K_pages_above_bar_invalid_argument(P1, P2)   /* tracepoint name: omrport.552 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_default_reserve_using_4K_pages_above_bar_iarv64_failed(P1, P2) do { /* tracepoint name: omrport.553 */ \
	if ((unsigned char) omrport_UtActive[553] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((553u << 8) | omrport_UtActive[553]), "\4\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_vmem_default_reserve_using_4K_pages_above_bar_iarv64_failed(P1, P2)   /* tracepoint name: omrport.553 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_omrvmem_decommit_memory_failure(P1, P2, P3) do { /* tracepoint name: omrport.554 */ \
	if ((unsigned char) omrport_UtActive[554] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((554u << 8) | omrport_UtActive[554]), "\4\6\4", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_vmem_omrvmem_decommit_memory_failure(P1, P2, P3)   /* tracepoint name: omrport.554 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_get_available_physical_memory_failed(P1, P2) do { /* tracepoint name: omrport.555 */ \
	if ((unsigned char) omrport_UtActive[555] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((555u << 8) | omrport_UtActive[555]), "\377\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_vmem_get_available_physical_memory_failed(P1, P2)   /* tracepoint name: omrport.555 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_get_available_physical_memory_result(P1) do { /* tracepoint name: omrport.556 */ \
	if ((unsigned char) omrport_UtActive[556] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((556u << 8) | omrport_UtActive[556]), "\10", P1);} \
	} while(0)
#else
#define Trc_PRT_vmem_get_available_physical_memory_result(P1)   /* tracepoint name: omrport.556 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_get_process_memory_enter(P1) do { /* tracepoint name: omrport.557 */ \
	if ((unsigned char) omrport_UtActive[557] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((557u << 8) | omrport_UtActive[557]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_vmem_get_process_memory_enter(P1)   /* tracepoint name: omrport.557 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_get_process_memory_failed(P1, P2) do { /* tracepoint name: omrport.558 */ \
	if ((unsigned char) omrport_UtActive[558] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((558u << 8) | omrport_UtActive[558]), "\377\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_vmem_get_process_memory_failed(P1, P2)   /* tracepoint name: omrport.558 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_vmem_get_process_memory_exit(P1, P2) do { /* tracepoint name: omrport.559 */ \
	if ((unsigned char) omrport_UtActive[559] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((559u << 8) | omrport_UtActive[559]), "\4\10", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_vmem_get_process_memory_exit(P1, P2)   /* tracepoint name: omrport.559 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_getLimitSharedMemory_Entry() do { /* tracepoint name: omrport.560 */ \
	if ((unsigned char) omrport_UtActive[560] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((560u << 8) | omrport_UtActive[560]), NULL);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_getLimitSharedMemory_Entry()   /* tracepoint name: omrport.560 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_getLimitSharedMemory_Exit(P1, P2) do { /* tracepoint name: omrport.561 */ \
	if ((unsigned char) omrport_UtActive[561] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((561u << 8) | omrport_UtActive[561]), "\4\10", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_getLimitSharedMemory_Exit(P1, P2)   /* tracepoint name: omrport.561 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_getLimitSharedMemory_ErrorExit(P1, P2) do { /* tracepoint name: omrport.562 */ \
	if ((unsigned char) omrport_UtActive[562] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((562u << 8) | omrport_UtActive[562]), "\4\10", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_getLimitSharedMemory_ErrorExit(P1, P2)   /* tracepoint name: omrport.562 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_getLimitSharedMemory_invalidFileHandle(P1) do { /* tracepoint name: omrport.563 */ \
	if ((unsigned char) omrport_UtActive[563] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((563u << 8) | omrport_UtActive[563]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_getLimitSharedMemory_invalidFileHandle(P1)   /* tracepoint name: omrport.563 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_getLimitSharedMemory_invalidRead() do { /* tracepoint name: omrport.564 */ \
	if ((unsigned char) omrport_UtActive[564] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((564u << 8) | omrport_UtActive[564]), NULL);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_getLimitSharedMemory_invalidRead()   /* tracepoint name: omrport.564 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_getLimitSharedMemory_bytesRead(P1, P2) do { /* tracepoint name: omrport.565 */ \
	if ((unsigned char) omrport_UtActive[565] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((565u << 8) | omrport_UtActive[565]), "\4\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_getLimitSharedMemory_bytesRead(P1, P2)   /* tracepoint name: omrport.565 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_getLimitSharedMemory_maxSize(P1, P2) do { /* tracepoint name: omrport.566 */ \
	if ((unsigned char) omrport_UtActive[566] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((566u << 8) | omrport_UtActive[566]), "\10\377", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_getLimitSharedMemory_maxSize(P1, P2)   /* tracepoint name: omrport.566 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_getLimitSharedMemory_notImplemented(P1) do { /* tracepoint name: omrport.567 */ \
	if ((unsigned char) omrport_UtActive[567] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((567u << 8) | omrport_UtActive[567]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_getLimitSharedMemory_notImplemented(P1)   /* tracepoint name: omrport.567 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_getLimit_unrecognised_resourceID(P1) do { /* tracepoint name: omrport.568 */ \
	if ((unsigned char) omrport_UtActive[568] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((568u << 8) | omrport_UtActive[568]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_getLimit_unrecognised_resourceID(P1)   /* tracepoint name: omrport.568 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_egid(P1) do { /* tracepoint name: omrport.569 */ \
	if ((unsigned char) omrport_UtActive[569] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((569u << 8) | omrport_UtActive[569]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_egid(P1)   /* tracepoint name: omrport.569 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_CPU_utilization_invalidFileHandle(P1) do { /* tracepoint name: omrport.570 */ \
	if ((unsigned char) omrport_UtActive[570] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((570u << 8) | omrport_UtActive[570]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_CPU_utilization_invalidFileHandle(P1)   /* tracepoint name: omrport.570 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_CPU_utilization_invalidRead() do { /* tracepoint name: omrport.571 */ \
	if ((unsigned char) omrport_UtActive[571] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((571u << 8) | omrport_UtActive[571]), NULL);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_CPU_utilization_invalidRead()   /* tracepoint name: omrport.571 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_CPU_utilization_proc_stat_summary(P1) do { /* tracepoint name: omrport.572 */ \
	if ((unsigned char) omrport_UtActive[572] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((572u << 8) | omrport_UtActive[572]), "\377", P1);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_CPU_utilization_proc_stat_summary(P1)   /* tracepoint name: omrport.572 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_CPU_utilization_perfstat(P1, P2, P3) do { /* tracepoint name: omrport.573 */ \
	if ((unsigned char) omrport_UtActive[573] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((573u << 8) | omrport_UtActive[573]), "\10\10\4", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_CPU_utilization_perfstat(P1, P2, P3)   /* tracepoint name: omrport.573 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_CPU_utilization_timeFailed() do { /* tracepoint name: omrport.574 */ \
	if ((unsigned char) omrport_UtActive[574] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((574u << 8) | omrport_UtActive[574]), NULL);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_CPU_utilization_timeFailed()   /* tracepoint name: omrport.574 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_CPU_utilization_perfstat_failed(P1) do { /* tracepoint name: omrport.575 */ \
	if ((unsigned char) omrport_UtActive[575] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((575u << 8) | omrport_UtActive[575]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_CPU_utilization_perfstat_failed(P1)   /* tracepoint name: omrport.575 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_unrecognized_Windows_version(P1, P2, P3) do { /* tracepoint name: omrport.576 */ \
	if ((unsigned char) omrport_UtActive[576] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((576u << 8) | omrport_UtActive[576]), "\4\4\4", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_unrecognized_Windows_version(P1, P2, P3)   /* tracepoint name: omrport.576 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_retrieveLinuxMemoryStats_Entered() do { /* tracepoint name: omrport.577 */ \
	if ((unsigned char) omrport_UtActive[577] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((577u << 8) | omrport_UtActive[577]), NULL);} \
	} while(0)
#else
#define Trc_PRT_retrieveLinuxMemoryStats_Entered()   /* tracepoint name: omrport.577 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_retrieveLinuxMemoryStats_failedOpeningMemFs(P1) do { /* tracepoint name: omrport.578 */ \
	if ((unsigned char) omrport_UtActive[578] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((578u << 8) | omrport_UtActive[578]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_retrieveLinuxMemoryStats_failedOpeningMemFs(P1)   /* tracepoint name: omrport.578 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_retrieveLinuxMemoryStats_openedMemFs() do { /* tracepoint name: omrport.579 */ \
	if ((unsigned char) omrport_UtActive[579] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((579u << 8) | omrport_UtActive[579]), NULL);} \
	} while(0)
#else
#define Trc_PRT_retrieveLinuxMemoryStats_openedMemFs()   /* tracepoint name: omrport.579 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_retrieveLinuxMemoryStats_invalidRangeFound(P1) do { /* tracepoint name: omrport.580 */ \
	if ((unsigned char) omrport_UtActive[580] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((580u << 8) | omrport_UtActive[580]), "\377", P1);} \
	} while(0)
#else
#define Trc_PRT_retrieveLinuxMemoryStats_invalidRangeFound(P1)   /* tracepoint name: omrport.580 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_retrieveLinuxMemoryStats_Exit(P1) do { /* tracepoint name: omrport.581 */ \
	if ((unsigned char) omrport_UtActive[581] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((581u << 8) | omrport_UtActive[581]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_retrieveLinuxMemoryStats_Exit(P1)   /* tracepoint name: omrport.581 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_retrieveAIXMemoryStats_Entered() do { /* tracepoint name: omrport.582 */ \
	if ((unsigned char) omrport_UtActive[582] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((582u << 8) | omrport_UtActive[582]), NULL);} \
	} while(0)
#else
#define Trc_PRT_retrieveAIXMemoryStats_Entered()   /* tracepoint name: omrport.582 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_retrieveAIXMemoryStats_perfstatFailed(P1) do { /* tracepoint name: omrport.583 */ \
	if ((unsigned char) omrport_UtActive[583] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((583u << 8) | omrport_UtActive[583]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_retrieveAIXMemoryStats_perfstatFailed(P1)   /* tracepoint name: omrport.583 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_retrieveAIXMemoryStats_Exit(P1) do { /* tracepoint name: omrport.584 */ \
	if ((unsigned char) omrport_UtActive[584] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((584u << 8) | omrport_UtActive[584]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_retrieveAIXMemoryStats_Exit(P1)   /* tracepoint name: omrport.584 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_memory_info_Entered() do { /* tracepoint name: omrport.585 */ \
	if ((unsigned char) omrport_UtActive[585] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((585u << 8) | omrport_UtActive[585]), NULL);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_memory_info_Entered()   /* tracepoint name: omrport.585 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_memory_info_memStatFailed(P1) do { /* tracepoint name: omrport.586 */ \
	if ((unsigned char) omrport_UtActive[586] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((586u << 8) | omrport_UtActive[586]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_memory_info_memStatFailed(P1)   /* tracepoint name: omrport.586 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_memory_info_pdhOpenQueryFailed(P1) do { /* tracepoint name: omrport.587 */ \
	if ((unsigned char) omrport_UtActive[587] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((587u << 8) | omrport_UtActive[587]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_memory_info_pdhOpenQueryFailed(P1)   /* tracepoint name: omrport.587 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_memory_info_failedAddingCounter(P1, P2) do { /* tracepoint name: omrport.588 */ \
	if ((unsigned char) omrport_UtActive[588] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((588u << 8) | omrport_UtActive[588]), "\377\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_memory_info_failedAddingCounter(P1, P2)   /* tracepoint name: omrport.588 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_memory_info_dataQueryFailed() do { /* tracepoint name: omrport.589 */ \
	if ((unsigned char) omrport_UtActive[589] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((589u << 8) | omrport_UtActive[589]), NULL);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_memory_info_dataQueryFailed()   /* tracepoint name: omrport.589 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_memory_info_Exit(P1) do { /* tracepoint name: omrport.590 */ \
	if ((unsigned char) omrport_UtActive[590] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((590u << 8) | omrport_UtActive[590]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_memory_info_Exit(P1)   /* tracepoint name: omrport.590 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_retrieveLinuxProcessorStats_Entered() do { /* tracepoint name: omrport.591 */ \
	if ((unsigned char) omrport_UtActive[591] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((591u << 8) | omrport_UtActive[591]), NULL);} \
	} while(0)
#else
#define Trc_PRT_retrieveLinuxProcessorStats_Entered()   /* tracepoint name: omrport.591 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_retrieveLinuxProcessorStats_failedOpeningProcFs(P1) do { /* tracepoint name: omrport.592 */ \
	if ((unsigned char) omrport_UtActive[592] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((592u << 8) | omrport_UtActive[592]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_retrieveLinuxProcessorStats_failedOpeningProcFs(P1)   /* tracepoint name: omrport.592 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_retrieveLinuxProcessorStats_openedProcFs() do { /* tracepoint name: omrport.593 */ \
	if ((unsigned char) omrport_UtActive[593] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((593u << 8) | omrport_UtActive[593]), NULL);} \
	} while(0)
#else
#define Trc_PRT_retrieveLinuxProcessorStats_openedProcFs()   /* tracepoint name: omrport.593 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_retrieveLinuxProcessorStats_memAllocFailed() do { /* tracepoint name: omrport.594 */ \
	if ((unsigned char) omrport_UtActive[594] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((594u << 8) | omrport_UtActive[594]), NULL);} \
	} while(0)
#else
#define Trc_PRT_retrieveLinuxProcessorStats_memAllocFailed()   /* tracepoint name: omrport.594 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_retrieveLinuxProcessorStats_unexpectedReadError(P1) do { /* tracepoint name: omrport.595 */ \
	if ((unsigned char) omrport_UtActive[595] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((595u << 8) | omrport_UtActive[595]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_retrieveLinuxProcessorStats_unexpectedReadError(P1)   /* tracepoint name: omrport.595 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_retrieveLinuxProcessorStats_unexpectedCpuCount(P1, P2) do { /* tracepoint name: omrport.596 */ \
	if ((unsigned char) omrport_UtActive[596] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((596u << 8) | omrport_UtActive[596]), "\4\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_retrieveLinuxProcessorStats_unexpectedCpuCount(P1, P2)   /* tracepoint name: omrport.596 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_retrieveLinuxProcessorStats_Exit(P1) do { /* tracepoint name: omrport.597 */ \
	if ((unsigned char) omrport_UtActive[597] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((597u << 8) | omrport_UtActive[597]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_retrieveLinuxProcessorStats_Exit(P1)   /* tracepoint name: omrport.597 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_retrieveAIXProcessorStats_Entered() do { /* tracepoint name: omrport.598 */ \
	if ((unsigned char) omrport_UtActive[598] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((598u << 8) | omrport_UtActive[598]), NULL);} \
	} while(0)
#else
#define Trc_PRT_retrieveAIXProcessorStats_Entered()   /* tracepoint name: omrport.598 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_retrieveAIXProcessorStats_memAllocFailed() do { /* tracepoint name: omrport.599 */ \
	if ((unsigned char) omrport_UtActive[599] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((599u << 8) | omrport_UtActive[599]), NULL);} \
	} while(0)
#else
#define Trc_PRT_retrieveAIXProcessorStats_memAllocFailed()   /* tracepoint name: omrport.599 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_retrieveAIXProcessorStats_perfstatFailed(P1) do { /* tracepoint name: omrport.600 */ \
	if ((unsigned char) omrport_UtActive[600] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((600u << 8) | omrport_UtActive[600]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_retrieveAIXProcessorStats_perfstatFailed(P1)   /* tracepoint name: omrport.600 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_retrieveAIXProcessorStats_unexpectedCpuCount(P1, P2) do { /* tracepoint name: omrport.601 */ \
	if ((unsigned char) omrport_UtActive[601] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((601u << 8) | omrport_UtActive[601]), "\4\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_retrieveAIXProcessorStats_unexpectedCpuCount(P1, P2)   /* tracepoint name: omrport.601 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_retrieveAIXProcessorStats_Exit(P1) do { /* tracepoint name: omrport.602 */ \
	if ((unsigned char) omrport_UtActive[602] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((602u << 8) | omrport_UtActive[602]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_retrieveAIXProcessorStats_Exit(P1)   /* tracepoint name: omrport.602 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_processor_info_Entered() do { /* tracepoint name: omrport.603 */ \
	if ((unsigned char) omrport_UtActive[603] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((603u << 8) | omrport_UtActive[603]), NULL);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_processor_info_Entered()   /* tracepoint name: omrport.603 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_processor_info_categoryAllocFailed(P1, P2) do { /* tracepoint name: omrport.604 */ \
	if ((unsigned char) omrport_UtActive[604] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((604u << 8) | omrport_UtActive[604]), "\4\377", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_processor_info_categoryAllocFailed(P1, P2)   /* tracepoint name: omrport.604 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_processor_info_memAllocFailed() do { /* tracepoint name: omrport.605 */ \
	if ((unsigned char) omrport_UtActive[605] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((605u << 8) | omrport_UtActive[605]), NULL);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_processor_info_memAllocFailed()   /* tracepoint name: omrport.605 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_processor_info_pdhOpenQueryFailed(P1) do { /* tracepoint name: omrport.606 */ \
	if ((unsigned char) omrport_UtActive[606] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((606u << 8) | omrport_UtActive[606]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_processor_info_pdhOpenQueryFailed(P1)   /* tracepoint name: omrport.606 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_processor_info_failedAddingCounter(P1) do { /* tracepoint name: omrport.607 */ \
	if ((unsigned char) omrport_UtActive[607] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((607u << 8) | omrport_UtActive[607]), "\377", P1);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_processor_info_failedAddingCounter(P1)   /* tracepoint name: omrport.607 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_processor_info_failedCollectingPdhData() do { /* tracepoint name: omrport.608 */ \
	if ((unsigned char) omrport_UtActive[608] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((608u << 8) | omrport_UtActive[608]), NULL);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_processor_info_failedCollectingPdhData()   /* tracepoint name: omrport.608 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_processor_info_Exit(P1) do { /* tracepoint name: omrport.609 */ \
	if ((unsigned char) omrport_UtActive[609] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((609u << 8) | omrport_UtActive[609]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_processor_info_Exit(P1)   /* tracepoint name: omrport.609 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_destroy_processor_info_Entered() do { /* tracepoint name: omrport.610 */ \
	if ((unsigned char) omrport_UtActive[610] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((610u << 8) | omrport_UtActive[610]), NULL);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_destroy_processor_info_Entered()   /* tracepoint name: omrport.610 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_destroy_processor_info_Exit() do { /* tracepoint name: omrport.611 */ \
	if ((unsigned char) omrport_UtActive[611] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((611u << 8) | omrport_UtActive[611]), NULL);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_destroy_processor_info_Exit()   /* tracepoint name: omrport.611 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_number_CPUs_by_type_failedPhysical(P1, P2) do { /* tracepoint name: omrport.612 */ \
	if ((unsigned char) omrport_UtActive[612] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((612u << 8) | omrport_UtActive[612]), "\377\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_number_CPUs_by_type_failedPhysical(P1, P2)   /* tracepoint name: omrport.612 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_number_CPUs_by_type_failedBound(P1, P2) do { /* tracepoint name: omrport.613 */ \
	if ((unsigned char) omrport_UtActive[613] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((613u << 8) | omrport_UtActive[613]), "\377\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_number_CPUs_by_type_failedBound(P1, P2)   /* tracepoint name: omrport.613 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_number_CPUs_by_type_invalidType() do { /* tracepoint name: omrport.614 */ \
	if ((unsigned char) omrport_UtActive[614] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((614u << 8) | omrport_UtActive[614]), NULL);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_number_CPUs_by_type_invalidType()   /* tracepoint name: omrport.614 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_number_CPUs_by_type_platformNotSupported() do { /* tracepoint name: omrport.615 */ \
	if ((unsigned char) omrport_UtActive[615] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((615u << 8) | omrport_UtActive[615]), NULL);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_number_CPUs_by_type_platformNotSupported()   /* tracepoint name: omrport.615 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_number_CPUs_by_type_Entered() do { /* tracepoint name: omrport.616 */ \
	if ((unsigned char) omrport_UtActive[616] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((616u << 8) | omrport_UtActive[616]), NULL);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_number_CPUs_by_type_Entered()   /* tracepoint name: omrport.616 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_number_CPUs_by_type_Exit(P1, P2) do { /* tracepoint name: omrport.617 */ \
	if ((unsigned char) omrport_UtActive[617] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((617u << 8) | omrport_UtActive[617]), "\4\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_number_CPUs_by_type_Exit(P1, P2)   /* tracepoint name: omrport.617 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_set_number_entitled_CPUs_Entered() do { /* tracepoint name: omrport.618 */ \
	if ((unsigned char) omrport_UtActive[618] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((618u << 8) | omrport_UtActive[618]), NULL);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_set_number_entitled_CPUs_Entered()   /* tracepoint name: omrport.618 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_set_number_entitled_CPUs_Exit(P1) do { /* tracepoint name: omrport.619 */ \
	if ((unsigned char) omrport_UtActive[619] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((619u << 8) | omrport_UtActive[619]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_set_number_entitled_CPUs_Exit(P1)   /* tracepoint name: omrport.619 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_number_CPUs_by_type_failedOnline(P1, P2) do { /* tracepoint name: omrport.620 */ \
	if ((unsigned char) omrport_UtActive[620] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((620u << 8) | omrport_UtActive[620]), "\377\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_number_CPUs_by_type_failedOnline(P1, P2)   /* tracepoint name: omrport.620 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_limit_Entered(P1) do { /* tracepoint name: omrport.621 */ \
	if ((unsigned char) omrport_UtActive[621] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((621u << 8) | omrport_UtActive[621]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_limit_Entered(P1)   /* tracepoint name: omrport.621 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_getrlimit_error(P1, P2) do { /* tracepoint name: omrport.622 */ \
	if ((unsigned char) omrport_UtActive[622] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((622u << 8) | omrport_UtActive[622]), "\4\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_getrlimit_error(P1, P2)   /* tracepoint name: omrport.622 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_limit_Exit(P1) do { /* tracepoint name: omrport.623 */ \
	if ((unsigned char) omrport_UtActive[623] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((623u << 8) | omrport_UtActive[623]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_limit_Exit(P1)   /* tracepoint name: omrport.623 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_set_limit_Entered(P1, P2) do { /* tracepoint name: omrport.624 */ \
	if ((unsigned char) omrport_UtActive[624] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((624u << 8) | omrport_UtActive[624]), "\4\10", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_set_limit_Entered(P1, P2)   /* tracepoint name: omrport.624 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_setrlimit_error(P1, P2, P3) do { /* tracepoint name: omrport.625 */ \
	if ((unsigned char) omrport_UtActive[625] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((625u << 8) | omrport_UtActive[625]), "\4\10\4", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_setrlimit_error(P1, P2, P3)   /* tracepoint name: omrport.625 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_setLimit_unrecognised_resourceID(P1) do { /* tracepoint name: omrport.626 */ \
	if ((unsigned char) omrport_UtActive[626] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((626u << 8) | omrport_UtActive[626]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_setLimit_unrecognised_resourceID(P1)   /* tracepoint name: omrport.626 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_sysparm_error(P1) do { /* tracepoint name: omrport.627 */ \
	if ((unsigned char) omrport_UtActive[627] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((627u << 8) | omrport_UtActive[627]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_sysparm_error(P1)   /* tracepoint name: omrport.627 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_set_limit_Exit(P1) do { /* tracepoint name: omrport.628 */ \
	if ((unsigned char) omrport_UtActive[628] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((628u << 8) | omrport_UtActive[628]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_set_limit_Exit(P1)   /* tracepoint name: omrport.628 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_retrieveZOSMemoryStats_Entered() do { /* tracepoint name: omrport.629 */ \
	if ((unsigned char) omrport_UtActive[629] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((629u << 8) | omrport_UtActive[629]), NULL);} \
	} while(0)
#else
#define Trc_PRT_retrieveZOSMemoryStats_Entered()   /* tracepoint name: omrport.629 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_retrieveZOSMemoryStats_Exit(P1) do { /* tracepoint name: omrport.630 */ \
	if ((unsigned char) omrport_UtActive[630] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((630u << 8) | omrport_UtActive[630]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_retrieveZOSMemoryStats_Exit(P1)   /* tracepoint name: omrport.630 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_retrieveZOSProcessorStats_Entered() do { /* tracepoint name: omrport.631 */ \
	if ((unsigned char) omrport_UtActive[631] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((631u << 8) | omrport_UtActive[631]), NULL);} \
	} while(0)
#else
#define Trc_PRT_retrieveZOSProcessorStats_Entered()   /* tracepoint name: omrport.631 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_retrieveZOSProcessorStats_Exit(P1) do { /* tracepoint name: omrport.632 */ \
	if ((unsigned char) omrport_UtActive[632] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((632u << 8) | omrport_UtActive[632]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_retrieveZOSProcessorStats_Exit(P1)   /* tracepoint name: omrport.632 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_getZFSClientCacheSize_StatsFailure(P1, P2, P3) do { /* tracepoint name: omrport.633 */ \
	if ((unsigned char) omrport_UtActive[633] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((633u << 8) | omrport_UtActive[633]), "\4\4\4", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_getZFSClientCacheSize_StatsFailure(P1, P2, P3)   /* tracepoint name: omrport.633 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_getZFSClientCacheSize_MallocFailure() do { /* tracepoint name: omrport.634 */ \
	if ((unsigned char) omrport_UtActive[634] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((634u << 8) | omrport_UtActive[634]), NULL);} \
	} while(0)
#else
#define Trc_PRT_getZFSClientCacheSize_MallocFailure()   /* tracepoint name: omrport.634 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_getZFSUserCacheUsed_StatsFailure(P1, P2, P3) do { /* tracepoint name: omrport.635 */ \
	if ((unsigned char) omrport_UtActive[635] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((635u << 8) | omrport_UtActive[635]), "\4\4\4", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_getZFSUserCacheUsed_StatsFailure(P1, P2, P3)   /* tracepoint name: omrport.635 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_getZFSUserCacheUsed_MallocFailure() do { /* tracepoint name: omrport.636 */ \
	if ((unsigned char) omrport_UtActive[636] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((636u << 8) | omrport_UtActive[636]), NULL);} \
	} while(0)
#else
#define Trc_PRT_getZFSUserCacheUsed_MallocFailure()   /* tracepoint name: omrport.636 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_getZFSMetaCacheSize_StatsFailure(P1, P2, P3) do { /* tracepoint name: omrport.637 */ \
	if ((unsigned char) omrport_UtActive[637] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((637u << 8) | omrport_UtActive[637]), "\4\4\4", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_getZFSMetaCacheSize_StatsFailure(P1, P2, P3)   /* tracepoint name: omrport.637 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_getZFSMetaCacheSize_MallocFailure() do { /* tracepoint name: omrport.638 */ \
	if ((unsigned char) omrport_UtActive[638] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((638u << 8) | omrport_UtActive[638]), NULL);} \
	} while(0)
#else
#define Trc_PRT_getZFSMetaCacheSize_MallocFailure()   /* tracepoint name: omrport.638 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_retrieveZOSMemoryStats_memUsageStats_v1(P1, P2, P3, P4, P5, P6) do { /* tracepoint name: omrport.639 */ \
	if ((unsigned char) omrport_UtActive[639] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((639u << 8) | omrport_UtActive[639]), "\6\6\6\6\6\6", P1, P2, P3, P4, P5, P6);} \
	} while(0)
#else
#define Trc_PRT_retrieveZOSMemoryStats_memUsageStats_v1(P1, P2, P3, P4, P5, P6)   /* tracepoint name: omrport.639 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_retrieveZOSProcessorStats_cpuUsageStats_v1(P1, P2) do { /* tracepoint name: omrport.640 */ \
	if ((unsigned char) omrport_UtActive[640] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((640u << 8) | omrport_UtActive[640]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_retrieveZOSProcessorStats_cpuUsageStats_v1(P1, P2)   /* tracepoint name: omrport.640 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_CPU_utilization_GST_result(P1, P2) do { /* tracepoint name: omrport.641 */ \
	if ((unsigned char) omrport_UtActive[641] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((641u << 8) | omrport_UtActive[641]), "\377\10", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_CPU_utilization_GST_result(P1, P2)   /* tracepoint name: omrport.641 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_CPU_utilization_GetSystemTimesFailed(P1) do { /* tracepoint name: omrport.642 */ \
	if ((unsigned char) omrport_UtActive[642] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((642u << 8) | omrport_UtActive[642]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_CPU_utilization_GetSystemTimesFailed(P1)   /* tracepoint name: omrport.642 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_cwd_failed_getcurrentdirectory(P1) do { /* tracepoint name: omrport.643 */ \
	if ((unsigned char) omrport_UtActive[643] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((643u << 8) | omrport_UtActive[643]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_cwd_failed_getcurrentdirectory(P1)   /* tracepoint name: omrport.643 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_cwd_oome() do { /* tracepoint name: omrport.644 */ \
	if ((unsigned char) omrport_UtActive[644] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((644u << 8) | omrport_UtActive[644]), NULL);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_cwd_oome()   /* tracepoint name: omrport.644 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_cwd_failed_unicode_to_utf8() do { /* tracepoint name: omrport.645 */ \
	if ((unsigned char) omrport_UtActive[645] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((645u << 8) | omrport_UtActive[645]), NULL);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_cwd_failed_unicode_to_utf8()   /* tracepoint name: omrport.645 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_tmp_failed_gettemppathw(P1) do { /* tracepoint name: omrport.646 */ \
	if ((unsigned char) omrport_UtActive[646] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((646u << 8) | omrport_UtActive[646]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_tmp_failed_gettemppathw(P1)   /* tracepoint name: omrport.646 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_tmp_oome() do { /* tracepoint name: omrport.647 */ \
	if ((unsigned char) omrport_UtActive[647] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((647u << 8) | omrport_UtActive[647]), NULL);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_tmp_oome()   /* tracepoint name: omrport.647 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_groups_Entry() do { /* tracepoint name: omrport.648 */ \
	if ((unsigned char) omrport_UtActive[648] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((648u << 8) | omrport_UtActive[648]), NULL);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_groups_Entry()   /* tracepoint name: omrport.648 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_groups_Error_GetGroupsSize(P1) do { /* tracepoint name: omrport.649 */ \
	if ((unsigned char) omrport_UtActive[649] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((649u << 8) | omrport_UtActive[649]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_groups_Error_GetGroupsSize(P1)   /* tracepoint name: omrport.649 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_groups_Error_ListAllocateFailed(P1) do { /* tracepoint name: omrport.650 */ \
	if ((unsigned char) omrport_UtActive[650] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((650u << 8) | omrport_UtActive[650]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_groups_Error_ListAllocateFailed(P1)   /* tracepoint name: omrport.650 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_groups_Error_GetGroups(P1) do { /* tracepoint name: omrport.651 */ \
	if ((unsigned char) omrport_UtActive[651] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((651u << 8) | omrport_UtActive[651]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_groups_Error_GetGroups(P1)   /* tracepoint name: omrport.651 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_groups_Exit(P1, P2) do { /* tracepoint name: omrport.652 */ \
	if ((unsigned char) omrport_UtActive[652] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((652u << 8) | omrport_UtActive[652]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_groups_Exit(P1, P2)   /* tracepoint name: omrport.652 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_find_executable_name_failedOpeningProcFS(P1) do { /* tracepoint name: omrport.653 */ \
	if ((unsigned char) omrport_UtActive[653] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((653u << 8) | omrport_UtActive[653]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_find_executable_name_failedOpeningProcFS(P1)   /* tracepoint name: omrport.653 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_find_executable_name_invalidRead(P1) do { /* tracepoint name: omrport.654 */ \
	if ((unsigned char) omrport_UtActive[654] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((654u << 8) | omrport_UtActive[654]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_find_executable_name_invalidRead(P1)   /* tracepoint name: omrport.654 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_tmp_failed_str_covert(P1) do { /* tracepoint name: omrport.655 */ \
	if ((unsigned char) omrport_UtActive[655] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((655u << 8) | omrport_UtActive[655]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_tmp_failed_str_covert(P1)   /* tracepoint name: omrport.655 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_omrsyslog_failed_str_convert(P1) do { /* tracepoint name: omrport.656 */ \
	if ((unsigned char) omrport_UtActive[656] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((656u << 8) | omrport_UtActive[656]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_omrsyslog_failed_str_convert(P1)   /* tracepoint name: omrport.656 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define TrcEnabled_Trc_PRT_j9nls_vprintf  (omrport_UtActive[657] != 0)
#define Trc_PRT_j9nls_vprintf(P1) do { /* tracepoint name: omrport.657 */ \
	if ((unsigned char) omrport_UtActive[657] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((657u << 8) | omrport_UtActive[657]), "\377", P1);} \
	} while(0)
#else
#define TrcEnabled_Trc_PRT_j9nls_vprintf  (0)
#define Trc_PRT_j9nls_vprintf(P1)   /* tracepoint name: omrport.657 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_PortInitStages_Event1() do { /* tracepoint name: omrport.658 */ \
	if ((unsigned char) omrport_UtActive[658] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((658u << 8) | omrport_UtActive[658]), NULL);} \
	} while(0)
#else
#define Trc_PRT_PortInitStages_Event1()   /* tracepoint name: omrport.658 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_processor_info_allocatedCPUs(P1) do { /* tracepoint name: omrport.659 */ \
	if ((unsigned char) omrport_UtActive[659] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((659u << 8) | omrport_UtActive[659]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_processor_info_allocatedCPUs(P1)   /* tracepoint name: omrport.659 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_processor_info_retryCount(P1) do { /* tracepoint name: omrport.660 */ \
	if ((unsigned char) omrport_UtActive[660] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((660u << 8) | omrport_UtActive[660]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_processor_info_retryCount(P1)   /* tracepoint name: omrport.660 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_processor_info_cpuCountUnstable() do { /* tracepoint name: omrport.661 */ \
	if ((unsigned char) omrport_UtActive[661] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((661u << 8) | omrport_UtActive[661]), NULL);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_processor_info_cpuCountUnstable()   /* tracepoint name: omrport.661 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_failed_to_get_os_type() do { /* tracepoint name: omrport.662 */ \
	if ((unsigned char) omrport_UtActive[662] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((662u << 8) | omrport_UtActive[662]), NULL);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_failed_to_get_os_type()   /* tracepoint name: omrport.662 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_introspect_suspendWithSignal(P1) do { /* tracepoint name: omrport.663 */ \
	if ((unsigned char) omrport_UtActive[663] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((663u << 8) | omrport_UtActive[663]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_introspect_suspendWithSignal(P1)   /* tracepoint name: omrport.663 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_initDeviceData_fail2(P1, P2) do { /* tracepoint name: omrport.664 */ \
	if ((unsigned char) omrport_UtActive[664] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((664u << 8) | omrport_UtActive[664]), "\377\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_cuda_initDeviceData_fail2(P1, P2)   /* tracepoint name: omrport.664 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_reset_fail1(P1, P2) do { /* tracepoint name: omrport.665 */ \
	if ((unsigned char) omrport_UtActive[665] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((665u << 8) | omrport_UtActive[665]), "\377\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_cuda_reset_fail1(P1, P2)   /* tracepoint name: omrport.665 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_cuda_reset_fail2(P1, P2) do { /* tracepoint name: omrport.666 */ \
	if ((unsigned char) omrport_UtActive[666] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((666u << 8) | omrport_UtActive[666]), "\4\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_cuda_reset_fail2(P1, P2)   /* tracepoint name: omrport.666 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_open_file_count_Entry() do { /* tracepoint name: omrport.667 */ \
	if ((unsigned char) omrport_UtActive[667] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((667u << 8) | omrport_UtActive[667]), NULL);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_open_file_count_Entry()   /* tracepoint name: omrport.667 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_open_file_count_invalidArgRecvd(P1) do { /* tracepoint name: omrport.668 */ \
	if ((unsigned char) omrport_UtActive[668] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((668u << 8) | omrport_UtActive[668]), "\377", P1);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_open_file_count_invalidArgRecvd(P1)   /* tracepoint name: omrport.668 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_open_file_count_failedOpeningProcFS(P1) do { /* tracepoint name: omrport.669 */ \
	if ((unsigned char) omrport_UtActive[669] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((669u << 8) | omrport_UtActive[669]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_open_file_count_failedOpeningProcFS(P1)   /* tracepoint name: omrport.669 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_open_file_count_failedReadingProcFS(P1) do { /* tracepoint name: omrport.670 */ \
	if ((unsigned char) omrport_UtActive[670] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((670u << 8) | omrport_UtActive[670]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_open_file_count_failedReadingProcFS(P1)   /* tracepoint name: omrport.670 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_open_file_count_fileCount(P1) do { /* tracepoint name: omrport.671 */ \
	if ((unsigned char) omrport_UtActive[671] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((671u << 8) | omrport_UtActive[671]), "\10", P1);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_open_file_count_fileCount(P1)   /* tracepoint name: omrport.671 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_sysinfo_get_open_file_count_Exit(P1) do { /* tracepoint name: omrport.672 */ \
	if ((unsigned char) omrport_UtActive[672] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((672u << 8) | omrport_UtActive[672]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_sysinfo_get_open_file_count_Exit(P1)   /* tracepoint name: omrport.672 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_filestream_open_Entry(P1, P2, P3) do { /* tracepoint name: omrport.673 */ \
	if ((unsigned char) omrport_UtActive[673] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((673u << 8) | omrport_UtActive[673]), "\377\4\4", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_filestream_open_Entry(P1, P2, P3)   /* tracepoint name: omrport.673 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_filestream_open_Exit(P1) do { /* tracepoint name: omrport.674 */ \
	if ((unsigned char) omrport_UtActive[674] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((674u << 8) | omrport_UtActive[674]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_filestream_open_Exit(P1)   /* tracepoint name: omrport.674 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_filestream_open_invalidOpenFlags(P1, P2, P3) do { /* tracepoint name: omrport.675 */ \
	if ((unsigned char) omrport_UtActive[675] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((675u << 8) | omrport_UtActive[675]), "\377\4\4", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_filestream_open_invalidOpenFlags(P1, P2, P3)   /* tracepoint name: omrport.675 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_filestream_open_failedToOpen(P1, P2, P3, P4) do { /* tracepoint name: omrport.676 */ \
	if ((unsigned char) omrport_UtActive[676] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((676u << 8) | omrport_UtActive[676]), "\377\4\4\4", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_PRT_filestream_open_failedToOpen(P1, P2, P3, P4)   /* tracepoint name: omrport.676 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_filestream_open_fdopenFailed(P1, P2, P3, P4) do { /* tracepoint name: omrport.677 */ \
	if ((unsigned char) omrport_UtActive[677] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((677u << 8) | omrport_UtActive[677]), "\377\4\4\4", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_PRT_filestream_open_fdopenFailed(P1, P2, P3, P4)   /* tracepoint name: omrport.677 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_filestream_open_invalidPath(P1, P2, P3) do { /* tracepoint name: omrport.678 */ \
	if ((unsigned char) omrport_UtActive[678] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((678u << 8) | omrport_UtActive[678]), "\377\4\4", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_filestream_open_invalidPath(P1, P2, P3)   /* tracepoint name: omrport.678 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_filestream_close_Entry(P1) do { /* tracepoint name: omrport.679 */ \
	if ((unsigned char) omrport_UtActive[679] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((679u << 8) | omrport_UtActive[679]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_filestream_close_Entry(P1)   /* tracepoint name: omrport.679 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_filestream_close_Exit(P1) do { /* tracepoint name: omrport.680 */ \
	if ((unsigned char) omrport_UtActive[680] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((680u << 8) | omrport_UtActive[680]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_filestream_close_Exit(P1)   /* tracepoint name: omrport.680 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_filestream_close_invalidFileStream(P1) do { /* tracepoint name: omrport.681 */ \
	if ((unsigned char) omrport_UtActive[681] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((681u << 8) | omrport_UtActive[681]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_filestream_close_invalidFileStream(P1)   /* tracepoint name: omrport.681 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_filestream_close_failedToClose(P1, P2) do { /* tracepoint name: omrport.682 */ \
	if ((unsigned char) omrport_UtActive[682] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((682u << 8) | omrport_UtActive[682]), "\6\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_filestream_close_failedToClose(P1, P2)   /* tracepoint name: omrport.682 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_filestream_sync_Entry(P1) do { /* tracepoint name: omrport.683 */ \
	if ((unsigned char) omrport_UtActive[683] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((683u << 8) | omrport_UtActive[683]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_filestream_sync_Entry(P1)   /* tracepoint name: omrport.683 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_filestream_sync_Exit(P1) do { /* tracepoint name: omrport.684 */ \
	if ((unsigned char) omrport_UtActive[684] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((684u << 8) | omrport_UtActive[684]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_filestream_sync_Exit(P1)   /* tracepoint name: omrport.684 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_filestream_sync_invalidFileStream(P1) do { /* tracepoint name: omrport.685 */ \
	if ((unsigned char) omrport_UtActive[685] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((685u << 8) | omrport_UtActive[685]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_filestream_sync_invalidFileStream(P1)   /* tracepoint name: omrport.685 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_filestream_sync_failedToFlush(P1, P2) do { /* tracepoint name: omrport.686 */ \
	if ((unsigned char) omrport_UtActive[686] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((686u << 8) | omrport_UtActive[686]), "\6\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_filestream_sync_failedToFlush(P1, P2)   /* tracepoint name: omrport.686 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_filestream_write_Entry(P1, P2, P3) do { /* tracepoint name: omrport.687 */ \
	if ((unsigned char) omrport_UtActive[687] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((687u << 8) | omrport_UtActive[687]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_filestream_write_Entry(P1, P2, P3)   /* tracepoint name: omrport.687 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_filestream_write_Exit(P1) do { /* tracepoint name: omrport.688 */ \
	if ((unsigned char) omrport_UtActive[688] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((688u << 8) | omrport_UtActive[688]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_filestream_write_Exit(P1)   /* tracepoint name: omrport.688 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_filestream_write_invalidArgs(P1, P2, P3) do { /* tracepoint name: omrport.689 */ \
	if ((unsigned char) omrport_UtActive[689] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((689u << 8) | omrport_UtActive[689]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_filestream_write_invalidArgs(P1, P2, P3)   /* tracepoint name: omrport.689 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_filestream_write_failedToWrite(P1, P2, P3, P4) do { /* tracepoint name: omrport.690 */ \
	if ((unsigned char) omrport_UtActive[690] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((690u << 8) | omrport_UtActive[690]), "\6\6\6\4", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_PRT_filestream_write_failedToWrite(P1, P2, P3, P4)   /* tracepoint name: omrport.690 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_filestream_write_text_Entry(P1, P2, P3, P4) do { /* tracepoint name: omrport.691 */ \
	if ((unsigned char) omrport_UtActive[691] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((691u << 8) | omrport_UtActive[691]), "\6\6\6\4", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_PRT_filestream_write_text_Entry(P1, P2, P3, P4)   /* tracepoint name: omrport.691 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_filestream_write_text_Exit(P1) do { /* tracepoint name: omrport.692 */ \
	if ((unsigned char) omrport_UtActive[692] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((692u << 8) | omrport_UtActive[692]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_filestream_write_text_Exit(P1)   /* tracepoint name: omrport.692 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_filestream_write_text_invalidArgs(P1, P2, P3, P4) do { /* tracepoint name: omrport.693 */ \
	if ((unsigned char) omrport_UtActive[693] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((693u << 8) | omrport_UtActive[693]), "\6\6\6\4", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_PRT_filestream_write_text_invalidArgs(P1, P2, P3, P4)   /* tracepoint name: omrport.693 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_filestream_write_text_failedMalloc(P1, P2, P3, P4) do { /* tracepoint name: omrport.694 */ \
	if ((unsigned char) omrport_UtActive[694] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((694u << 8) | omrport_UtActive[694]), "\6\6\6\6", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_PRT_filestream_write_text_failedMalloc(P1, P2, P3, P4)   /* tracepoint name: omrport.694 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_filestream_write_text_failedToWrite(P1, P2, P3, P4) do { /* tracepoint name: omrport.695 */ \
	if ((unsigned char) omrport_UtActive[695] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((695u << 8) | omrport_UtActive[695]), "\6\6\6\6", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_PRT_filestream_write_text_failedToWrite(P1, P2, P3, P4)   /* tracepoint name: omrport.695 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_filestream_write_text_failedStringTransliteration(P1, P2, P3, P4, P5) do { /* tracepoint name: omrport.696 */ \
	if ((unsigned char) omrport_UtActive[696] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((696u << 8) | omrport_UtActive[696]), "\6\6\6\4\4", P1, P2, P3, P4, P5);} \
	} while(0)
#else
#define Trc_PRT_filestream_write_text_failedStringTransliteration(P1, P2, P3, P4, P5)   /* tracepoint name: omrport.696 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_filestream_vprintf_Entry(P1, P2) do { /* tracepoint name: omrport.697 */ \
	if ((unsigned char) omrport_UtActive[697] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((697u << 8) | omrport_UtActive[697]), "\6\377", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_filestream_vprintf_Entry(P1, P2)   /* tracepoint name: omrport.697 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_filestream_vprintf_Exit() do { /* tracepoint name: omrport.698 */ \
	if ((unsigned char) omrport_UtActive[698] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((698u << 8) | omrport_UtActive[698]), NULL);} \
	} while(0)
#else
#define Trc_PRT_filestream_vprintf_Exit()   /* tracepoint name: omrport.698 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_filestream_vprintf_stackBufferNotBigEnough(P1, P2, P3) do { /* tracepoint name: omrport.699 */ \
	if ((unsigned char) omrport_UtActive[699] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((699u << 8) | omrport_UtActive[699]), "\6\377\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_filestream_vprintf_stackBufferNotBigEnough(P1, P2, P3)   /* tracepoint name: omrport.699 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_filestream_vprintf_invalidArgs(P1, P2) do { /* tracepoint name: omrport.700 */ \
	if ((unsigned char) omrport_UtActive[700] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((700u << 8) | omrport_UtActive[700]), "\6\377", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_filestream_vprintf_invalidArgs(P1, P2)   /* tracepoint name: omrport.700 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_filestream_vprintf_failedMalloc(P1, P2, P3) do { /* tracepoint name: omrport.701 */ \
	if ((unsigned char) omrport_UtActive[701] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((701u << 8) | omrport_UtActive[701]), "\6\377\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_filestream_vprintf_failedMalloc(P1, P2, P3)   /* tracepoint name: omrport.701 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_filestream_printf_Entry(P1, P2) do { /* tracepoint name: omrport.702 */ \
	if ((unsigned char) omrport_UtActive[702] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((702u << 8) | omrport_UtActive[702]), "\6\377", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_filestream_printf_Entry(P1, P2)   /* tracepoint name: omrport.702 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_filestream_printf_Exit() do { /* tracepoint name: omrport.703 */ \
	if ((unsigned char) omrport_UtActive[703] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((703u << 8) | omrport_UtActive[703]), NULL);} \
	} while(0)
#else
#define Trc_PRT_filestream_printf_Exit()   /* tracepoint name: omrport.703 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_filestream_setbuffer_Entry(P1, P2, P3, P4) do { /* tracepoint name: omrport.704 */ \
	if ((unsigned char) omrport_UtActive[704] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((704u << 8) | omrport_UtActive[704]), "\6\6\4\6", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_PRT_filestream_setbuffer_Entry(P1, P2, P3, P4)   /* tracepoint name: omrport.704 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_filestream_setbuffer_Exit(P1) do { /* tracepoint name: omrport.705 */ \
	if ((unsigned char) omrport_UtActive[705] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((705u << 8) | omrport_UtActive[705]), "\4", P1);} \
	} while(0)
#else
#define Trc_PRT_filestream_setbuffer_Exit(P1)   /* tracepoint name: omrport.705 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_filestream_setbuffer_invalidArgs(P1, P2, P3, P4) do { /* tracepoint name: omrport.706 */ \
	if ((unsigned char) omrport_UtActive[706] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((706u << 8) | omrport_UtActive[706]), "\6\6\4\6", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_PRT_filestream_setbuffer_invalidArgs(P1, P2, P3, P4)   /* tracepoint name: omrport.706 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_filestream_setbuffer_failed(P1, P2, P3, P4) do { /* tracepoint name: omrport.707 */ \
	if ((unsigned char) omrport_UtActive[707] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((707u << 8) | omrport_UtActive[707]), "\6\6\4\6", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_PRT_filestream_setbuffer_failed(P1, P2, P3, P4)   /* tracepoint name: omrport.707 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_filestream_fdopen_Entry(P1, P2) do { /* tracepoint name: omrport.708 */ \
	if ((unsigned char) omrport_UtActive[708] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((708u << 8) | omrport_UtActive[708]), "\6\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_filestream_fdopen_Entry(P1, P2)   /* tracepoint name: omrport.708 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_filestream_fdopen_Exit(P1) do { /* tracepoint name: omrport.709 */ \
	if ((unsigned char) omrport_UtActive[709] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((709u << 8) | omrport_UtActive[709]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_filestream_fdopen_Exit(P1)   /* tracepoint name: omrport.709 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_filestream_fdopen_invalidArgs(P1, P2) do { /* tracepoint name: omrport.710 */ \
	if ((unsigned char) omrport_UtActive[710] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((710u << 8) | omrport_UtActive[710]), "\6\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_filestream_fdopen_invalidArgs(P1, P2)   /* tracepoint name: omrport.710 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_filestream_fdopen_failed(P1, P2, P3) do { /* tracepoint name: omrport.711 */ \
	if ((unsigned char) omrport_UtActive[711] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((711u << 8) | omrport_UtActive[711]), "\6\4\4", P1, P2, P3);} \
	} while(0)
#else
#define Trc_PRT_filestream_fdopen_failed(P1, P2, P3)   /* tracepoint name: omrport.711 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_filestream_fileno_Entry(P1) do { /* tracepoint name: omrport.712 */ \
	if ((unsigned char) omrport_UtActive[712] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((712u << 8) | omrport_UtActive[712]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_filestream_fileno_Entry(P1)   /* tracepoint name: omrport.712 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_filestream_fileno_Exit(P1) do { /* tracepoint name: omrport.713 */ \
	if ((unsigned char) omrport_UtActive[713] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((713u << 8) | omrport_UtActive[713]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_filestream_fileno_Exit(P1)   /* tracepoint name: omrport.713 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_filestream_fileno_invalidArgs(P1) do { /* tracepoint name: omrport.714 */ \
	if ((unsigned char) omrport_UtActive[714] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((714u << 8) | omrport_UtActive[714]), "\6", P1);} \
	} while(0)
#else
#define Trc_PRT_filestream_fileno_invalidArgs(P1)   /* tracepoint name: omrport.714 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_PRT_filestream_fileno_failed(P1, P2) do { /* tracepoint name: omrport.715 */ \
	if ((unsigned char) omrport_UtActive[715] != 0){ \
		omrport_UtModuleInfo.intf->Trace((void *)NULL, &omrport_UtModuleInfo, ((715u << 8) | omrport_UtActive[715]), "\6\4", P1, P2);} \
	} while(0)
#else
#define Trc_PRT_filestream_fileno_failed(P1, P2)   /* tracepoint name: omrport.715 */
#endif

extern UtModuleInfo omrport_UtModuleInfo;
extern unsigned char omrport_UtActive[];

#ifndef UT_MODULE_INFO
#define UT_MODULE_INFO omrport_UtModuleInfo
#endif /* UT_MODULE_INFO */

#ifndef UT_ACTIVE
#define UT_ACTIVE omrport_UtActive
#endif /* UT_ACTIVE */

#ifdef __cplusplus
} /* extern "C" */
#endif
#endif /* UTE_OMRPORT_MODULE_HEADER */
/*
 * End of file
 */
