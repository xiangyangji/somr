/*
 *  Do not edit this file 
 *  Generated by TraceGen
 */
#ifndef UTE_OMR_TEST_MODULE_HEADER
#define UTE_OMR_TEST_MODULE_HEADER
#include "ute_module.h"
#if !defined(UT_DIRECT_TRACE_REGISTRATION)
#include "jni.h"
#endif /* !defined(UT_DIRECT_TRACE_REGISTRATION) */
#ifndef UT_TRACE_OVERHEAD
#define UT_TRACE_OVERHEAD 1
#endif
#ifndef UT_THREAD
#define UT_THREAD(thr) (void *)thr
#endif /* UT_THREAD */
#ifndef UT_STR
#define UT_STR(arg) #arg
#endif
#ifdef __cplusplus
extern "C" {
#endif

#ifdef __clang__
#include <unistd.h>
#define Trace_Unreachable() _exit(-1)
#else
#define Trace_Unreachable()
#endif

#if defined(UT_DIRECT_TRACE_REGISTRATION)
int32_t registeromr_testWithTrace(UtInterface * utIntf, UtModuleInfo* containerName);
int32_t deregisteromr_testWithTrace(UtInterface * utIntf);
#define UT_MODULE_LOADED(utIntf) registeromr_testWithTrace((utIntf), NULL);
#define UT_MODULE_UNLOADED(utIntf) deregisteromr_testWithTrace((utIntf));
#define UT_OMR_TEST_MODULE_LOADED(utIntf) registeromr_testWithTrace((utIntf), NULL);
#define UT_OMR_TEST_MODULE_UNLOADED(utIntf) deregisteromr_testWithTrace((utIntf));
#else /* defined(UT_DIRECT_TRACE_REGISTRATION) */
int32_t registeromr_testWithTrace(JavaVM * vm, UtModuleInfo* containerName);
int32_t deregisteromr_testWithTrace(JavaVM * vm);
#define UT_MODULE_LOADED(vm) registeromr_testWithTrace((JavaVM *)(vm), NULL);
#define UT_MODULE_UNLOADED(vm) deregisteromr_testWithTrace((JavaVM *)(vm));
#define UT_OMR_TEST_MODULE_LOADED(vm) registeromr_testWithTrace((JavaVM *)(vm), NULL);
#define UT_OMR_TEST_MODULE_UNLOADED(vm) deregisteromr_testWithTrace((JavaVM *)(vm));
#endif /* defined(UT_DIRECT_TRACE_REGISTRATION) */

#if UT_TRACE_OVERHEAD >= 1
#define Trc_OMR_Test_Init() do { /* tracepoint name: omr_test.0 */ \
	if ((unsigned char) omr_test_UtActive[0] != 0){ \
		omr_test_UtModuleInfo.intf->Trace((void *)NULL, &omr_test_UtModuleInfo, ((0u << 8) | omr_test_UtActive[0]), NULL);} \
	} while(0)
#else
#define Trc_OMR_Test_Init()   /* tracepoint name: omr_test.0 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_OMR_Test_String(thr, P1) do { /* tracepoint name: omr_test.1 */ \
	if ((unsigned char) omr_test_UtActive[1] != 0){ \
		omr_test_UtModuleInfo.intf->Trace(UT_THREAD(thr), &omr_test_UtModuleInfo, ((1u << 8) | omr_test_UtActive[1]), "\377", P1);} \
	} while(0)
#else
#define Trc_OMR_Test_String(thr, P1)   /* tracepoint name: omr_test.1 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_OMR_Test_Ptr(thr, P1) do { /* tracepoint name: omr_test.2 */ \
	if ((unsigned char) omr_test_UtActive[2] != 0){ \
		omr_test_UtModuleInfo.intf->Trace(UT_THREAD(thr), &omr_test_UtModuleInfo, ((2u << 8) | omr_test_UtActive[2]), "\6", P1);} \
	} while(0)
#else
#define Trc_OMR_Test_Ptr(thr, P1)   /* tracepoint name: omr_test.2 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_OMR_Test_Int(thr, P1) do { /* tracepoint name: omr_test.3 */ \
	if ((unsigned char) omr_test_UtActive[3] != 0){ \
		omr_test_UtModuleInfo.intf->Trace(UT_THREAD(thr), &omr_test_UtModuleInfo, ((3u << 8) | omr_test_UtActive[3]), "\4", P1);} \
	} while(0)
#else
#define Trc_OMR_Test_Int(thr, P1)   /* tracepoint name: omr_test.3 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_OMR_Test_ManyParms(thr, P1, P2, P3) do { /* tracepoint name: omr_test.4 */ \
	if ((unsigned char) omr_test_UtActive[4] != 0){ \
		omr_test_UtModuleInfo.intf->Trace(UT_THREAD(thr), &omr_test_UtModuleInfo, ((4u << 8) | omr_test_UtActive[4]), "\377\6\4", P1, P2, P3);} \
	} while(0)
#else
#define Trc_OMR_Test_ManyParms(thr, P1, P2, P3)   /* tracepoint name: omr_test.4 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_OMR_Test_UnloggedTracepoint(thr, P1) do { /* tracepoint name: omr_test.5 */ \
	if ((unsigned char) omr_test_UtActive[5] != 0){ \
		omr_test_UtModuleInfo.intf->Trace(UT_THREAD(thr), &omr_test_UtModuleInfo, ((5u << 8) | omr_test_UtActive[5]), "\377", P1);} \
	} while(0)
#else
#define Trc_OMR_Test_UnloggedTracepoint(thr, P1)   /* tracepoint name: omr_test.5 */
#endif

extern UtModuleInfo omr_test_UtModuleInfo;
extern unsigned char omr_test_UtActive[];

#ifndef UT_MODULE_INFO
#define UT_MODULE_INFO omr_test_UtModuleInfo
#endif /* UT_MODULE_INFO */

#ifndef UT_ACTIVE
#define UT_ACTIVE omr_test_UtActive
#endif /* UT_ACTIVE */

#ifdef __cplusplus
} /* extern "C" */
#endif
#endif /* UTE_OMR_TEST_MODULE_HEADER */
/*
 * End of file
 */
