/*
 *  Do not edit this file 
 *  Generated by TraceGen
 */
#ifndef UTE_OMRVM_MODULE_HEADER
#define UTE_OMRVM_MODULE_HEADER
#include "ute_module.h"
#if !defined(UT_DIRECT_TRACE_REGISTRATION)
#include "jni.h"
#endif /* !defined(UT_DIRECT_TRACE_REGISTRATION) */
#ifndef UT_TRACE_OVERHEAD
#define UT_TRACE_OVERHEAD 1
#endif
#ifndef UT_THREAD
#define UT_THREAD(thr) (void *)thr
#endif /* UT_THREAD */
#ifndef UT_STR
#define UT_STR(arg) #arg
#endif
#ifdef __cplusplus
extern "C" {
#endif

#ifdef __clang__
#include <unistd.h>
#define Trace_Unreachable() _exit(-1)
#else
#define Trace_Unreachable()
#endif

#if defined(UT_DIRECT_TRACE_REGISTRATION)
int32_t registeromrvmWithTrace(UtInterface * utIntf, UtModuleInfo* containerName);
int32_t deregisteromrvmWithTrace(UtInterface * utIntf);
#define UT_MODULE_LOADED(utIntf) registeromrvmWithTrace((utIntf), NULL);
#define UT_MODULE_UNLOADED(utIntf) deregisteromrvmWithTrace((utIntf));
#define UT_OMRVM_MODULE_LOADED(utIntf) registeromrvmWithTrace((utIntf), NULL);
#define UT_OMRVM_MODULE_UNLOADED(utIntf) deregisteromrvmWithTrace((utIntf));
#else /* defined(UT_DIRECT_TRACE_REGISTRATION) */
int32_t registeromrvmWithTrace(JavaVM * vm, UtModuleInfo* containerName);
int32_t deregisteromrvmWithTrace(JavaVM * vm);
#define UT_MODULE_LOADED(vm) registeromrvmWithTrace((JavaVM *)(vm), NULL);
#define UT_MODULE_UNLOADED(vm) deregisteromrvmWithTrace((JavaVM *)(vm));
#define UT_OMRVM_MODULE_LOADED(vm) registeromrvmWithTrace((JavaVM *)(vm), NULL);
#define UT_OMRVM_MODULE_UNLOADED(vm) deregisteromrvmWithTrace((JavaVM *)(vm));
#endif /* defined(UT_DIRECT_TRACE_REGISTRATION) */

#if UT_TRACE_OVERHEAD >= 1
#define Trc_OMRVM_PostForkChild(P1, P2) do { /* tracepoint name: omrvm.0 */ \
	if ((unsigned char) omrvm_UtActive[0] != 0){ \
		omrvm_UtModuleInfo.intf->Trace((void *)NULL, &omrvm_UtModuleInfo, ((0u << 8) | omrvm_UtActive[0]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_OMRVM_PostForkChild(P1, P2)   /* tracepoint name: omrvm.0 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Assert_OMRVM_true(P1) do { /* tracepoint name: omrvm.1 */ \
	if ((unsigned char) omrvm_UtActive[1] != 0){ \
		if ((P1)) { /* assertion satisfied */ } else { \
			if (omrvm_UtModuleInfo.intf != NULL) { \
				omrvm_UtModuleInfo.intf->Trace((void *)NULL, &omrvm_UtModuleInfo, (UT_SPECIAL_ASSERTION | (1u << 8) | omrvm_UtActive[1]), "\377\4\377", __FILE__, __LINE__, UT_STR(((P1)))); \
				Trace_Unreachable(); \
			} else { \
				fprintf(stderr, "** ASSERTION FAILED ** omrvm.1 at %s:%d Assert_OMRVM_true%s\n", __FILE__, __LINE__, UT_STR(((P1)))); \
			} \
		}} \
	} while(0)
#else
#define Assert_OMRVM_true(P1)   /* tracepoint name: omrvm.1 */
#endif

extern UtModuleInfo omrvm_UtModuleInfo;
extern unsigned char omrvm_UtActive[];

#ifndef UT_MODULE_INFO
#define UT_MODULE_INFO omrvm_UtModuleInfo
#endif /* UT_MODULE_INFO */

#ifndef UT_ACTIVE
#define UT_ACTIVE omrvm_UtActive
#endif /* UT_ACTIVE */

#ifdef __cplusplus
} /* extern "C" */
#endif
#endif /* UTE_OMRVM_MODULE_HEADER */
/*
 * End of file
 */
