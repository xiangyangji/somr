/*
 *  Do not edit this file 
 *  Generated by TraceGen
 */
#ifndef UTE_J9MM_MODULE_HEADER
#define UTE_J9MM_MODULE_HEADER
#include "ute_module.h"
#if !defined(UT_DIRECT_TRACE_REGISTRATION)
#include "jni.h"
#endif /* !defined(UT_DIRECT_TRACE_REGISTRATION) */
#ifndef UT_TRACE_OVERHEAD
#define UT_TRACE_OVERHEAD 1
#endif
#ifndef UT_THREAD
#define UT_THREAD(thr) (void *)thr
#endif /* UT_THREAD */
#ifndef UT_STR
#define UT_STR(arg) #arg
#endif
#ifdef __cplusplus
extern "C" {
#endif

#ifdef __clang__
#include <unistd.h>
#define Trace_Unreachable() _exit(-1)
#else
#define Trace_Unreachable()
#endif

#if defined(UT_DIRECT_TRACE_REGISTRATION)
int32_t registerj9mmWithTrace(UtInterface * utIntf, UtModuleInfo* containerName);
int32_t deregisterj9mmWithTrace(UtInterface * utIntf);
#define UT_MODULE_LOADED(utIntf) registerj9mmWithTrace((utIntf), NULL);
#define UT_MODULE_UNLOADED(utIntf) deregisterj9mmWithTrace((utIntf));
#define UT_J9MM_MODULE_LOADED(utIntf) registerj9mmWithTrace((utIntf), NULL);
#define UT_J9MM_MODULE_UNLOADED(utIntf) deregisterj9mmWithTrace((utIntf));
#else /* defined(UT_DIRECT_TRACE_REGISTRATION) */
int32_t registerj9mmWithTrace(JavaVM * vm, UtModuleInfo* containerName);
int32_t deregisterj9mmWithTrace(JavaVM * vm);
#define UT_MODULE_LOADED(vm) registerj9mmWithTrace((JavaVM *)(vm), NULL);
#define UT_MODULE_UNLOADED(vm) deregisterj9mmWithTrace((JavaVM *)(vm));
#define UT_J9MM_MODULE_LOADED(vm) registerj9mmWithTrace((JavaVM *)(vm), NULL);
#define UT_J9MM_MODULE_UNLOADED(vm) deregisterj9mmWithTrace((JavaVM *)(vm));
#endif /* defined(UT_DIRECT_TRACE_REGISTRATION) */

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpace_percolateGarbageCollect_Entry(thr) do { /* tracepoint name: j9mm.0 */ \
	if ((unsigned char) j9mm_UtActive[0] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((0u << 8) | j9mm_UtActive[0]), NULL);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpace_percolateGarbageCollect_Entry(thr)   /* tracepoint name: j9mm.0 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpace_percolateGarbageCollect_Exit1(thr, P1) do { /* tracepoint name: j9mm.1 */ \
	if ((unsigned char) j9mm_UtActive[1] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((1u << 8) | j9mm_UtActive[1]), "\377", P1);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpace_percolateGarbageCollect_Exit1(thr, P1)   /* tracepoint name: j9mm.1 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpace_percolateGarbageCollect_Exit2(thr) do { /* tracepoint name: j9mm.2 */ \
	if ((unsigned char) j9mm_UtActive[2] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((2u << 8) | j9mm_UtActive[2]), NULL);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpace_percolateGarbageCollect_Exit2(thr)   /* tracepoint name: j9mm.2 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpace_garbageCollect_Entry(thr) do { /* tracepoint name: j9mm.3 */ \
	if ((unsigned char) j9mm_UtActive[3] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((3u << 8) | j9mm_UtActive[3]), NULL);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpace_garbageCollect_Entry(thr)   /* tracepoint name: j9mm.3 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpace_garbageCollect_Exit1(thr) do { /* tracepoint name: j9mm.4 */ \
	if ((unsigned char) j9mm_UtActive[4] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((4u << 8) | j9mm_UtActive[4]), NULL);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpace_garbageCollect_Exit1(thr)   /* tracepoint name: j9mm.4 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpace_garbageCollect_Exit2(thr, P1) do { /* tracepoint name: j9mm.5 */ \
	if ((unsigned char) j9mm_UtActive[5] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((5u << 8) | j9mm_UtActive[5]), "\377", P1);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpace_garbageCollect_Exit2(thr, P1)   /* tracepoint name: j9mm.5 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpace_garbageCollect_Exit3(thr) do { /* tracepoint name: j9mm.6 */ \
	if ((unsigned char) j9mm_UtActive[6] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((6u << 8) | j9mm_UtActive[6]), NULL);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpace_garbageCollect_Exit3(thr)   /* tracepoint name: j9mm.6 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpace_resizeHeapCheck_Entry(thr) do { /* tracepoint name: j9mm.7 */ \
	if ((unsigned char) j9mm_UtActive[7] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((7u << 8) | j9mm_UtActive[7]), NULL);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpace_resizeHeapCheck_Entry(thr)   /* tracepoint name: j9mm.7 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpace_resizeHeapCheck_Exit1(thr, P1) do { /* tracepoint name: j9mm.8 */ \
	if ((unsigned char) j9mm_UtActive[8] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((8u << 8) | j9mm_UtActive[8]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpace_resizeHeapCheck_Exit1(thr, P1)   /* tracepoint name: j9mm.8 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpace_resizeHeapCheck_Exit2(thr) do { /* tracepoint name: j9mm.9 */ \
	if ((unsigned char) j9mm_UtActive[9] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((9u << 8) | j9mm_UtActive[9]), NULL);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpace_resizeHeapCheck_Exit2(thr)   /* tracepoint name: j9mm.9 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpace_resizeHeapCheck_Exit3(thr, P1) do { /* tracepoint name: j9mm.10 */ \
	if ((unsigned char) j9mm_UtActive[10] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((10u << 8) | j9mm_UtActive[10]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpace_resizeHeapCheck_Exit3(thr, P1)   /* tracepoint name: j9mm.10 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceUniSpace_calculateExpandSize_Entry(thr, P1) do { /* tracepoint name: j9mm.11 */ \
	if ((unsigned char) j9mm_UtActive[11] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((11u << 8) | j9mm_UtActive[11]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceUniSpace_calculateExpandSize_Entry(thr, P1)   /* tracepoint name: j9mm.11 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceUniSpace_calculateExpandSize_Exit1(thr, P1, P2, P3) do { /* tracepoint name: j9mm.12 */ \
	if ((unsigned char) j9mm_UtActive[12] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((12u << 8) | j9mm_UtActive[12]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceUniSpace_calculateExpandSize_Exit1(thr, P1, P2, P3)   /* tracepoint name: j9mm.12 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceUniSpace_checkForRatioExpand_Entry(thr, P1) do { /* tracepoint name: j9mm.13 */ \
	if ((unsigned char) j9mm_UtActive[13] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((13u << 8) | j9mm_UtActive[13]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceUniSpace_checkForRatioExpand_Entry(thr, P1)   /* tracepoint name: j9mm.13 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceUniSpace_checkForRatioExpand_Exit1(thr) do { /* tracepoint name: j9mm.14 */ \
	if ((unsigned char) j9mm_UtActive[14] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((14u << 8) | j9mm_UtActive[14]), NULL);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceUniSpace_checkForRatioExpand_Exit1(thr)   /* tracepoint name: j9mm.14 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceUniSpace_checkForRatioExpand_Exit2(thr, P1) do { /* tracepoint name: j9mm.15 */ \
	if ((unsigned char) j9mm_UtActive[15] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((15u << 8) | j9mm_UtActive[15]), "\4", P1);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceUniSpace_checkForRatioExpand_Exit2(thr, P1)   /* tracepoint name: j9mm.15 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceUniSpace_checkForRatioExpand_Exit3(thr, P1, P2) do { /* tracepoint name: j9mm.16 */ \
	if ((unsigned char) j9mm_UtActive[16] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((16u << 8) | j9mm_UtActive[16]), "\4\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceUniSpace_checkForRatioExpand_Exit3(thr, P1, P2)   /* tracepoint name: j9mm.16 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceUniSpace_checkForRatioContract_Entry(thr) do { /* tracepoint name: j9mm.17 */ \
	if ((unsigned char) j9mm_UtActive[17] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((17u << 8) | j9mm_UtActive[17]), NULL);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceUniSpace_checkForRatioContract_Entry(thr)   /* tracepoint name: j9mm.17 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceUniSpace_checkForRatioContract_Exit1(thr, P1) do { /* tracepoint name: j9mm.18 */ \
	if ((unsigned char) j9mm_UtActive[18] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((18u << 8) | j9mm_UtActive[18]), "\4", P1);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceUniSpace_checkForRatioContract_Exit1(thr, P1)   /* tracepoint name: j9mm.18 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceUniSpace_checkForRatioContract_Exit2(thr, P1) do { /* tracepoint name: j9mm.19 */ \
	if ((unsigned char) j9mm_UtActive[19] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((19u << 8) | j9mm_UtActive[19]), "\4", P1);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceUniSpace_checkForRatioContract_Exit2(thr, P1)   /* tracepoint name: j9mm.19 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceUniSpace_performExpand_Entry(thr, P1) do { /* tracepoint name: j9mm.20 */ \
	if ((unsigned char) j9mm_UtActive[20] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((20u << 8) | j9mm_UtActive[20]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceUniSpace_performExpand_Entry(thr, P1)   /* tracepoint name: j9mm.20 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceUniSpace_performExpand_Exit(thr, P1) do { /* tracepoint name: j9mm.21 */ \
	if ((unsigned char) j9mm_UtActive[21] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((21u << 8) | j9mm_UtActive[21]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceUniSpace_performExpand_Exit(thr, P1)   /* tracepoint name: j9mm.21 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpace_expand_Entry(thr, P1) do { /* tracepoint name: j9mm.22 */ \
	if ((unsigned char) j9mm_UtActive[22] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((22u << 8) | j9mm_UtActive[22]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpace_expand_Entry(thr, P1)   /* tracepoint name: j9mm.22 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpace_expand_Exit1(thr) do { /* tracepoint name: j9mm.23 */ \
	if ((unsigned char) j9mm_UtActive[23] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((23u << 8) | j9mm_UtActive[23]), NULL);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpace_expand_Exit1(thr)   /* tracepoint name: j9mm.23 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpace_expand_Exit2(thr, P1) do { /* tracepoint name: j9mm.24 */ \
	if ((unsigned char) j9mm_UtActive[24] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((24u << 8) | j9mm_UtActive[24]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpace_expand_Exit2(thr, P1)   /* tracepoint name: j9mm.24 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceUniSpace_timeForHeapContract_Entry(thr, P1) do { /* tracepoint name: j9mm.25 */ \
	if ((unsigned char) j9mm_UtActive[25] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((25u << 8) | j9mm_UtActive[25]), "\377", P1);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceUniSpace_timeForHeapContract_Entry(thr, P1)   /* tracepoint name: j9mm.25 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceUniSpace_timeForHeapContract_Exit1(thr) do { /* tracepoint name: j9mm.26 */ \
	if ((unsigned char) j9mm_UtActive[26] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((26u << 8) | j9mm_UtActive[26]), NULL);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceUniSpace_timeForHeapContract_Exit1(thr)   /* tracepoint name: j9mm.26 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceUniSpace_timeForHeapContract_Exit2(thr) do { /* tracepoint name: j9mm.27 */ \
	if ((unsigned char) j9mm_UtActive[27] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((27u << 8) | j9mm_UtActive[27]), NULL);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceUniSpace_timeForHeapContract_Exit2(thr)   /* tracepoint name: j9mm.27 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceUniSpace_timeForHeapContract_Exit3(thr) do { /* tracepoint name: j9mm.28 */ \
	if ((unsigned char) j9mm_UtActive[28] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((28u << 8) | j9mm_UtActive[28]), NULL);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceUniSpace_timeForHeapContract_Exit3(thr)   /* tracepoint name: j9mm.28 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceUniSpace_timeForHeapContract_Exit4(thr, P1, P2) do { /* tracepoint name: j9mm.29 */ \
	if ((unsigned char) j9mm_UtActive[29] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((29u << 8) | j9mm_UtActive[29]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceUniSpace_timeForHeapContract_Exit4(thr, P1, P2)   /* tracepoint name: j9mm.29 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceUniSpace_timeForHeapContract_Exit5(thr) do { /* tracepoint name: j9mm.30 */ \
	if ((unsigned char) j9mm_UtActive[30] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((30u << 8) | j9mm_UtActive[30]), NULL);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceUniSpace_timeForHeapContract_Exit5(thr)   /* tracepoint name: j9mm.30 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceUniSpace_timeForHeapContract_Exit6(thr, P1, P2) do { /* tracepoint name: j9mm.31 */ \
	if ((unsigned char) j9mm_UtActive[31] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((31u << 8) | j9mm_UtActive[31]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceUniSpace_timeForHeapContract_Exit6(thr, P1, P2)   /* tracepoint name: j9mm.31 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceUniSpace_timeForHeapContract_Exit7(thr, P1) do { /* tracepoint name: j9mm.32 */ \
	if ((unsigned char) j9mm_UtActive[32] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((32u << 8) | j9mm_UtActive[32]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceUniSpace_timeForHeapContract_Exit7(thr, P1)   /* tracepoint name: j9mm.32 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceUniSpace_calculateTargetContractSize_Entry(thr, P1, P2) do { /* tracepoint name: j9mm.33 */ \
	if ((unsigned char) j9mm_UtActive[33] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((33u << 8) | j9mm_UtActive[33]), "\6\377", P1, P2);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceUniSpace_calculateTargetContractSize_Entry(thr, P1, P2)   /* tracepoint name: j9mm.33 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceUniSpace_calculateTargetContractSize_Event1(thr, P1) do { /* tracepoint name: j9mm.34 */ \
	if ((unsigned char) j9mm_UtActive[34] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((34u << 8) | j9mm_UtActive[34]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceUniSpace_calculateTargetContractSize_Event1(thr, P1)   /* tracepoint name: j9mm.34 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceUniSpace_calculateTargetContractSize_Event2(thr, P1, P2) do { /* tracepoint name: j9mm.35 */ \
	if ((unsigned char) j9mm_UtActive[35] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((35u << 8) | j9mm_UtActive[35]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceUniSpace_calculateTargetContractSize_Event2(thr, P1, P2)   /* tracepoint name: j9mm.35 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceUniSpace_calculateTargetContractSize_Exit1(thr, P1) do { /* tracepoint name: j9mm.36 */ \
	if ((unsigned char) j9mm_UtActive[36] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((36u << 8) | j9mm_UtActive[36]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceUniSpace_calculateTargetContractSize_Exit1(thr, P1)   /* tracepoint name: j9mm.36 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceUniSpace_performContract_Entry(thr, P1) do { /* tracepoint name: j9mm.37 */ \
	if ((unsigned char) j9mm_UtActive[37] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((37u << 8) | j9mm_UtActive[37]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceUniSpace_performContract_Entry(thr, P1)   /* tracepoint name: j9mm.37 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceUniSpace_performContract_Exit1(thr) do { /* tracepoint name: j9mm.38 */ \
	if ((unsigned char) j9mm_UtActive[38] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((38u << 8) | j9mm_UtActive[38]), NULL);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceUniSpace_performContract_Exit1(thr)   /* tracepoint name: j9mm.38 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceUniSpace_performContract_Event1(thr, P1, P2, P3) do { /* tracepoint name: j9mm.39 */ \
	if ((unsigned char) j9mm_UtActive[39] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((39u << 8) | j9mm_UtActive[39]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceUniSpace_performContract_Event1(thr, P1, P2, P3)   /* tracepoint name: j9mm.39 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceUniSpace_performContract_Event2(thr, P1, P2, P3) do { /* tracepoint name: j9mm.40 */ \
	if ((unsigned char) j9mm_UtActive[40] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((40u << 8) | j9mm_UtActive[40]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceUniSpace_performContract_Event2(thr, P1, P2, P3)   /* tracepoint name: j9mm.40 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceUniSpace_performContract_Exit2(thr) do { /* tracepoint name: j9mm.41 */ \
	if ((unsigned char) j9mm_UtActive[41] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((41u << 8) | j9mm_UtActive[41]), NULL);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceUniSpace_performContract_Exit2(thr)   /* tracepoint name: j9mm.41 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceUniSpace_performContract_Exit3(thr, P1) do { /* tracepoint name: j9mm.42 */ \
	if ((unsigned char) j9mm_UtActive[42] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((42u << 8) | j9mm_UtActive[42]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceUniSpace_performContract_Exit3(thr, P1)   /* tracepoint name: j9mm.42 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpace_contract_Entry(thr, P1) do { /* tracepoint name: j9mm.43 */ \
	if ((unsigned char) j9mm_UtActive[43] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((43u << 8) | j9mm_UtActive[43]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpace_contract_Entry(thr, P1)   /* tracepoint name: j9mm.43 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpace_contract_Exit1(thr) do { /* tracepoint name: j9mm.44 */ \
	if ((unsigned char) j9mm_UtActive[44] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((44u << 8) | j9mm_UtActive[44]), NULL);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpace_contract_Exit1(thr)   /* tracepoint name: j9mm.44 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpace_contract_Exit(thr, P1) do { /* tracepoint name: j9mm.45 */ \
	if ((unsigned char) j9mm_UtActive[45] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((45u << 8) | j9mm_UtActive[45]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpace_contract_Exit(thr, P1)   /* tracepoint name: j9mm.45 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceFlat_collectorExpand_Entry(thr, P1, P2) do { /* tracepoint name: j9mm.46 */ \
	if ((unsigned char) j9mm_UtActive[46] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((46u << 8) | j9mm_UtActive[46]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceFlat_collectorExpand_Entry(thr, P1, P2)   /* tracepoint name: j9mm.46 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceFlat_collectorExpand_Exit2(thr) do { /* tracepoint name: j9mm.47 */ \
	if ((unsigned char) j9mm_UtActive[47] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((47u << 8) | j9mm_UtActive[47]), NULL);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceFlat_collectorExpand_Exit2(thr)   /* tracepoint name: j9mm.47 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceFlat_collectorExpand_Exit3(thr, P1) do { /* tracepoint name: j9mm.48 */ \
	if ((unsigned char) j9mm_UtActive[48] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((48u << 8) | j9mm_UtActive[48]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceFlat_collectorExpand_Exit3(thr, P1)   /* tracepoint name: j9mm.48 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_VMInitStages_Event1(thr) do { /* tracepoint name: j9mm.49 */ \
	if ((unsigned char) j9mm_UtActive[49] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((49u << 8) | j9mm_UtActive[49]), NULL);} \
	} while(0)
#else
#define Trc_MM_VMInitStages_Event1(thr)   /* tracepoint name: j9mm.49 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SystemGCEnd(thr, P1, P2, P3, P4, P5, P6) do { /* tracepoint name: j9mm.51 */ \
	if ((unsigned char) j9mm_UtActive[51] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((51u << 8) | j9mm_UtActive[51]), "\6\6\6\6\6\6", P1, P2, P3, P4, P5, P6);} \
	} while(0)
#else
#define Trc_MM_SystemGCEnd(thr, P1, P2, P3, P4, P5, P6)   /* tracepoint name: j9mm.51 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MarkStart(thr) do { /* tracepoint name: j9mm.54 */ \
	if ((unsigned char) j9mm_UtActive[54] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((54u << 8) | j9mm_UtActive[54]), NULL);} \
	} while(0)
#else
#define Trc_MM_MarkStart(thr)   /* tracepoint name: j9mm.54 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MarkEnd(thr) do { /* tracepoint name: j9mm.55 */ \
	if ((unsigned char) j9mm_UtActive[55] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((55u << 8) | j9mm_UtActive[55]), NULL);} \
	} while(0)
#else
#define Trc_MM_MarkEnd(thr)   /* tracepoint name: j9mm.55 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SweepStart(thr) do { /* tracepoint name: j9mm.56 */ \
	if ((unsigned char) j9mm_UtActive[56] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((56u << 8) | j9mm_UtActive[56]), NULL);} \
	} while(0)
#else
#define Trc_MM_SweepStart(thr)   /* tracepoint name: j9mm.56 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SweepEnd(thr) do { /* tracepoint name: j9mm.57 */ \
	if ((unsigned char) j9mm_UtActive[57] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((57u << 8) | j9mm_UtActive[57]), NULL);} \
	} while(0)
#else
#define Trc_MM_SweepEnd(thr)   /* tracepoint name: j9mm.57 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ClassUnloadingStart(thr) do { /* tracepoint name: j9mm.60 */ \
	if ((unsigned char) j9mm_UtActive[60] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((60u << 8) | j9mm_UtActive[60]), NULL);} \
	} while(0)
#else
#define Trc_MM_ClassUnloadingStart(thr)   /* tracepoint name: j9mm.60 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_RememberedSetOverflow(thr) do { /* tracepoint name: j9mm.62 */ \
	if ((unsigned char) j9mm_UtActive[62] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((62u << 8) | j9mm_UtActive[62]), NULL);} \
	} while(0)
#else
#define Trc_MM_RememberedSetOverflow(thr)   /* tracepoint name: j9mm.62 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ScavengerBackout(thr, P1) do { /* tracepoint name: j9mm.63 */ \
	if ((unsigned char) j9mm_UtActive[63] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((63u << 8) | j9mm_UtActive[63]), "\377", P1);} \
	} while(0)
#else
#define Trc_MM_ScavengerBackout(thr, P1)   /* tracepoint name: j9mm.63 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_LocalGCStart(thr, P1, P2, P3, P4, P5, P6) do { /* tracepoint name: j9mm.64 */ \
	if ((unsigned char) j9mm_UtActive[64] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((64u << 8) | j9mm_UtActive[64]), "\6\6\6\6\6\6", P1, P2, P3, P4, P5, P6);} \
	} while(0)
#else
#define Trc_MM_LocalGCStart(thr, P1, P2, P3, P4, P5, P6)   /* tracepoint name: j9mm.64 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ClassLoaderUnload(thr) do { /* tracepoint name: j9mm.66 */ \
	if ((unsigned char) j9mm_UtActive[66] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((66u << 8) | j9mm_UtActive[66]), NULL);} \
	} while(0)
#else
#define Trc_MM_ClassLoaderUnload(thr)   /* tracepoint name: j9mm.66 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ConcurrentlyCompletedSweepPhase(thr, P1) do { /* tracepoint name: j9mm.67 */ \
	if ((unsigned char) j9mm_UtActive[67] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((67u << 8) | j9mm_UtActive[67]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_ConcurrentlyCompletedSweepPhase(thr, P1)   /* tracepoint name: j9mm.67 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CompletedConcurrentSweep(thr, P1) do { /* tracepoint name: j9mm.68 */ \
	if ((unsigned char) j9mm_UtActive[68] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((68u << 8) | j9mm_UtActive[68]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_CompletedConcurrentSweep(thr, P1)   /* tracepoint name: j9mm.68 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ConcurrentKickoff(thr, P1, P2, P3) do { /* tracepoint name: j9mm.69 */ \
	if ((unsigned char) j9mm_UtActive[69] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((69u << 8) | j9mm_UtActive[69]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_MM_ConcurrentKickoff(thr, P1, P2, P3)   /* tracepoint name: j9mm.69 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ConcurrentAborted(thr) do { /* tracepoint name: j9mm.70 */ \
	if ((unsigned char) j9mm_UtActive[70] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((70u << 8) | j9mm_UtActive[70]), NULL);} \
	} while(0)
#else
#define Trc_MM_ConcurrentAborted(thr)   /* tracepoint name: j9mm.70 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ConcurrentHalted(thr, P1, P2, P3, P4, P5, P6, P7, P8, P9) do { /* tracepoint name: j9mm.71 */ \
	if ((unsigned char) j9mm_UtActive[71] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((71u << 8) | j9mm_UtActive[71]), "\6\6\6\6\6\6\6\377\6", P1, P2, P3, P4, P5, P6, P7, P8, P9);} \
	} while(0)
#else
#define Trc_MM_ConcurrentHalted(thr, P1, P2, P3, P4, P5, P6, P7, P8, P9)   /* tracepoint name: j9mm.71 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ConcurrentCollectionCardCleaningStart(thr, P1) do { /* tracepoint name: j9mm.72 */ \
	if ((unsigned char) j9mm_UtActive[72] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((72u << 8) | j9mm_UtActive[72]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_ConcurrentCollectionCardCleaningStart(thr, P1)   /* tracepoint name: j9mm.72 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ConcurrentCollectionCardCleaningEnd(thr) do { /* tracepoint name: j9mm.73 */ \
	if ((unsigned char) j9mm_UtActive[73] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((73u << 8) | j9mm_UtActive[73]), NULL);} \
	} while(0)
#else
#define Trc_MM_ConcurrentCollectionCardCleaningEnd(thr)   /* tracepoint name: j9mm.73 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ConcurrentCollectionEnd(thr, P1, P2, P3, P4, P5, P6) do { /* tracepoint name: j9mm.75 */ \
	if ((unsigned char) j9mm_UtActive[75] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((75u << 8) | j9mm_UtActive[75]), "\6\6\6\6\6\6", P1, P2, P3, P4, P5, P6);} \
	} while(0)
#else
#define Trc_MM_ConcurrentCollectionEnd(thr, P1, P2, P3, P4, P5, P6)   /* tracepoint name: j9mm.75 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ConcurrentBackgroundThreadActivated(thr) do { /* tracepoint name: j9mm.76 */ \
	if ((unsigned char) j9mm_UtActive[76] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((76u << 8) | j9mm_UtActive[76]), NULL);} \
	} while(0)
#else
#define Trc_MM_ConcurrentBackgroundThreadActivated(thr)   /* tracepoint name: j9mm.76 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ConcurrentBackgroundThreadFinished(thr) do { /* tracepoint name: j9mm.77 */ \
	if ((unsigned char) j9mm_UtActive[77] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((77u << 8) | j9mm_UtActive[77]), NULL);} \
	} while(0)
#else
#define Trc_MM_ConcurrentBackgroundThreadFinished(thr)   /* tracepoint name: j9mm.77 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ConcurrentRememberedSetScanStart(thr, P1) do { /* tracepoint name: j9mm.78 */ \
	if ((unsigned char) j9mm_UtActive[78] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((78u << 8) | j9mm_UtActive[78]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_ConcurrentRememberedSetScanStart(thr, P1)   /* tracepoint name: j9mm.78 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ConcurrentRememberedSetScanEnd(thr, P1, P2, P3) do { /* tracepoint name: j9mm.79 */ \
	if ((unsigned char) j9mm_UtActive[79] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((79u << 8) | j9mm_UtActive[79]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_MM_ConcurrentRememberedSetScanEnd(thr, P1, P2, P3)   /* tracepoint name: j9mm.79 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ExcessiveGCRaised(thr) do { /* tracepoint name: j9mm.82 */ \
	if ((unsigned char) j9mm_UtActive[82] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((82u << 8) | j9mm_UtActive[82]), NULL);} \
	} while(0)
#else
#define Trc_MM_ExcessiveGCRaised(thr)   /* tracepoint name: j9mm.82 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ObjectAllocationFailedDueToExcessiveGC(thr) do { /* tracepoint name: j9mm.83 */ \
	if ((unsigned char) j9mm_UtActive[83] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((83u << 8) | j9mm_UtActive[83]), NULL);} \
	} while(0)
#else
#define Trc_MM_ObjectAllocationFailedDueToExcessiveGC(thr)   /* tracepoint name: j9mm.83 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ArrayObjectAllocationFailedDueToExcessiveGC(thr) do { /* tracepoint name: j9mm.84 */ \
	if ((unsigned char) j9mm_UtActive[84] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((84u << 8) | j9mm_UtActive[84]), NULL);} \
	} while(0)
#else
#define Trc_MM_ArrayObjectAllocationFailedDueToExcessiveGC(thr)   /* tracepoint name: j9mm.84 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ConcurrentCompleteTracingStart(thr, P1) do { /* tracepoint name: j9mm.85 */ \
	if ((unsigned char) j9mm_UtActive[85] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((85u << 8) | j9mm_UtActive[85]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_ConcurrentCompleteTracingStart(thr, P1)   /* tracepoint name: j9mm.85 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ConcurrentCompleteTracingEnd(thr, P1, P2) do { /* tracepoint name: j9mm.86 */ \
	if ((unsigned char) j9mm_UtActive[86] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((86u << 8) | j9mm_UtActive[86]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_ConcurrentCompleteTracingEnd(thr, P1, P2)   /* tracepoint name: j9mm.86 */
#endif

#if UT_TRACE_OVERHEAD >= 0
#define Trc_MM_RecomputeManagedTimePortionError(thr) do { /* tracepoint name: j9mm.87 */ \
	if ((unsigned char) j9mm_UtActive[87] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((87u << 8) | j9mm_UtActive[87]), NULL);} \
	} while(0)
#else
#define Trc_MM_RecomputeManagedTimePortionError(thr)   /* tracepoint name: j9mm.87 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_RecomputeManagedTimePortionMinor(thr, P1, P2) do { /* tracepoint name: j9mm.88 */ \
	if ((unsigned char) j9mm_UtActive[88] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((88u << 8) | j9mm_UtActive[88]), "\7\7", P1, P2);} \
	} while(0)
#else
#define Trc_MM_RecomputeManagedTimePortionMinor(thr, P1, P2)   /* tracepoint name: j9mm.88 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_RecomputeManagedTimePortionMajor(thr, P1, P2) do { /* tracepoint name: j9mm.89 */ \
	if ((unsigned char) j9mm_UtActive[89] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((89u << 8) | j9mm_UtActive[89]), "\7\7", P1, P2);} \
	} while(0)
#else
#define Trc_MM_RecomputeManagedTimePortionMajor(thr, P1, P2)   /* tracepoint name: j9mm.89 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_GlobalGCCollectComplete(thr) do { /* tracepoint name: j9mm.90 */ \
	if ((unsigned char) j9mm_UtActive[90] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((90u << 8) | j9mm_UtActive[90]), NULL);} \
	} while(0)
#else
#define Trc_MM_GlobalGCCollectComplete(thr)   /* tracepoint name: j9mm.90 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceUniSpace_calculateCollectorExpandSize_Entry(thr, P1) do { /* tracepoint name: j9mm.92 */ \
	if ((unsigned char) j9mm_UtActive[92] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((92u << 8) | j9mm_UtActive[92]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceUniSpace_calculateCollectorExpandSize_Entry(thr, P1)   /* tracepoint name: j9mm.92 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceUniSpace_calculateCollectorExpandSize_Exit1(thr, P1) do { /* tracepoint name: j9mm.93 */ \
	if ((unsigned char) j9mm_UtActive[93] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((93u << 8) | j9mm_UtActive[93]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceUniSpace_calculateCollectorExpandSize_Exit1(thr, P1)   /* tracepoint name: j9mm.93 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ClassUnloadingEnd(thr, P1, P2) do { /* tracepoint name: j9mm.94 */ \
	if ((unsigned char) j9mm_UtActive[94] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((94u << 8) | j9mm_UtActive[94]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_ClassUnloadingEnd(thr, P1, P2)   /* tracepoint name: j9mm.94 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ObjectArrayAllocationFailedDueToOverflow(thr, P1) do { /* tracepoint name: j9mm.95 */ \
	if ((unsigned char) j9mm_UtActive[95] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((95u << 8) | j9mm_UtActive[95]), "\4", P1);} \
	} while(0)
#else
#define Trc_MM_ObjectArrayAllocationFailedDueToOverflow(thr, P1)   /* tracepoint name: j9mm.95 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ByteArrayAllocationFailedDueToOverflow(thr, P1) do { /* tracepoint name: j9mm.96 */ \
	if ((unsigned char) j9mm_UtActive[96] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((96u << 8) | j9mm_UtActive[96]), "\4", P1);} \
	} while(0)
#else
#define Trc_MM_ByteArrayAllocationFailedDueToOverflow(thr, P1)   /* tracepoint name: j9mm.96 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ShortArrayAllocationFailedDueToOverflow(thr, P1) do { /* tracepoint name: j9mm.97 */ \
	if ((unsigned char) j9mm_UtActive[97] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((97u << 8) | j9mm_UtActive[97]), "\4", P1);} \
	} while(0)
#else
#define Trc_MM_ShortArrayAllocationFailedDueToOverflow(thr, P1)   /* tracepoint name: j9mm.97 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_IntArrayAllocationFailedDueToOverflow(thr, P1) do { /* tracepoint name: j9mm.98 */ \
	if ((unsigned char) j9mm_UtActive[98] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((98u << 8) | j9mm_UtActive[98]), "\4", P1);} \
	} while(0)
#else
#define Trc_MM_IntArrayAllocationFailedDueToOverflow(thr, P1)   /* tracepoint name: j9mm.98 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_DoubleArrayAllocationFailedDueToOverflow(thr, P1) do { /* tracepoint name: j9mm.99 */ \
	if ((unsigned char) j9mm_UtActive[99] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((99u << 8) | j9mm_UtActive[99]), "\4", P1);} \
	} while(0)
#else
#define Trc_MM_DoubleArrayAllocationFailedDueToOverflow(thr, P1)   /* tracepoint name: j9mm.99 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ObjectAllocationFailed(thr, P1, P2, P3, P4) do { /* tracepoint name: j9mm.100 */ \
	if ((unsigned char) j9mm_UtActive[100] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((100u << 8) | j9mm_UtActive[100]), "\6\6\377\6", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_MM_ObjectAllocationFailed(thr, P1, P2, P3, P4)   /* tracepoint name: j9mm.100 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ArrayObjectAllocationFailed(thr, P1, P2, P3, P4) do { /* tracepoint name: j9mm.101 */ \
	if ((unsigned char) j9mm_UtActive[101] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((101u << 8) | j9mm_UtActive[101]), "\6\6\377\6", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_MM_ArrayObjectAllocationFailed(thr, P1, P2, P3, P4)   /* tracepoint name: j9mm.101 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_GcThreadPriorityChanged(thr, P1) do { /* tracepoint name: j9mm.102 */ \
	if ((unsigned char) j9mm_UtActive[102] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((102u << 8) | j9mm_UtActive[102]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_GcThreadPriorityChanged(thr, P1)   /* tracepoint name: j9mm.102 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_FixHeapForWalk_Entry(thr, P1) do { /* tracepoint name: j9mm.103 */ \
	if ((unsigned char) j9mm_UtActive[103] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((103u << 8) | j9mm_UtActive[103]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_FixHeapForWalk_Entry(thr, P1)   /* tracepoint name: j9mm.103 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_FixHeapForWalk_Exit(thr, P1) do { /* tracepoint name: j9mm.104 */ \
	if ((unsigned char) j9mm_UtActive[104] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((104u << 8) | j9mm_UtActive[104]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_FixHeapForWalk_Exit(thr, P1)   /* tracepoint name: j9mm.104 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_FlushUndeadSegments_Entry(thr, P1) do { /* tracepoint name: j9mm.105 */ \
	if ((unsigned char) j9mm_UtActive[105] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((105u << 8) | j9mm_UtActive[105]), "\377", P1);} \
	} while(0)
#else
#define Trc_MM_FlushUndeadSegments_Entry(thr, P1)   /* tracepoint name: j9mm.105 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_FlushUndeadSegments_Exit(thr) do { /* tracepoint name: j9mm.106 */ \
	if ((unsigned char) j9mm_UtActive[106] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((106u << 8) | j9mm_UtActive[106]), NULL);} \
	} while(0)
#else
#define Trc_MM_FlushUndeadSegments_Exit(thr)   /* tracepoint name: j9mm.106 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Assert_MM_true_internal(P1) do { /* tracepoint name: j9mm.107 */ \
	if ((unsigned char) j9mm_UtActive[107] != 0){ \
		if ((P1)) { /* assertion satisfied */ } else { \
			if (j9mm_UtModuleInfo.intf != NULL) { \
				j9mm_UtModuleInfo.intf->Trace((void *)NULL, &j9mm_UtModuleInfo, (UT_SPECIAL_ASSERTION | (107u << 8) | j9mm_UtActive[107]), "\377\4\377", __FILE__, __LINE__, UT_STR(((P1)))); \
				Trace_Unreachable(); \
			} else { \
				fprintf(stderr, "** ASSERTION FAILED ** j9mm.107 at %s:%d Assert_MM_true_internal%s\n", __FILE__, __LINE__, UT_STR(((P1)))); \
			} \
		}} \
	} while(0)
#else
#define Assert_MM_true_internal(P1)   /* tracepoint name: j9mm.107 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Assert_MM_false_internal(P1) do { /* tracepoint name: j9mm.108 */ \
	if ((unsigned char) j9mm_UtActive[108] != 0){ \
		if (!(P1)) { /* assertion satisfied */ } else { \
			if (j9mm_UtModuleInfo.intf != NULL) { \
				j9mm_UtModuleInfo.intf->Trace((void *)NULL, &j9mm_UtModuleInfo, (UT_SPECIAL_ASSERTION | (108u << 8) | j9mm_UtActive[108]), "\377\4\377", __FILE__, __LINE__, UT_STR((!(P1)))); \
				Trace_Unreachable(); \
			} else { \
				fprintf(stderr, "** ASSERTION FAILED ** j9mm.108 at %s:%d Assert_MM_false_internal%s\n", __FILE__, __LINE__, UT_STR((!(P1)))); \
			} \
		}} \
	} while(0)
#else
#define Assert_MM_false_internal(P1)   /* tracepoint name: j9mm.108 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_DoFixHeapForUnload_Entry(thr, P1) do { /* tracepoint name: j9mm.109 */ \
	if ((unsigned char) j9mm_UtActive[109] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((109u << 8) | j9mm_UtActive[109]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_DoFixHeapForUnload_Entry(thr, P1)   /* tracepoint name: j9mm.109 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_DoFixHeapForUnload_Exit(thr, P1) do { /* tracepoint name: j9mm.110 */ \
	if ((unsigned char) j9mm_UtActive[110] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((110u << 8) | j9mm_UtActive[110]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_DoFixHeapForUnload_Exit(thr, P1)   /* tracepoint name: j9mm.110 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_DoFixHeapForUnload_ExitNotNeeded(thr) do { /* tracepoint name: j9mm.111 */ \
	if ((unsigned char) j9mm_UtActive[111] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((111u << 8) | j9mm_UtActive[111]), NULL);} \
	} while(0)
#else
#define Trc_MM_DoFixHeapForUnload_ExitNotNeeded(thr)   /* tracepoint name: j9mm.111 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_suspendConHelperThreads_Entry(thr) do { /* tracepoint name: j9mm.112 */ \
	if ((unsigned char) j9mm_UtActive[112] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((112u << 8) | j9mm_UtActive[112]), NULL);} \
	} while(0)
#else
#define Trc_MM_suspendConHelperThreads_Entry(thr)   /* tracepoint name: j9mm.112 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_suspendConHelperThreads_PriorityBoost(thr, P1) do { /* tracepoint name: j9mm.113 */ \
	if ((unsigned char) j9mm_UtActive[113] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((113u << 8) | j9mm_UtActive[113]), "\4", P1);} \
	} while(0)
#else
#define Trc_MM_suspendConHelperThreads_PriorityBoost(thr, P1)   /* tracepoint name: j9mm.113 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_suspendConHelperThreads_Shutdown(thr) do { /* tracepoint name: j9mm.114 */ \
	if ((unsigned char) j9mm_UtActive[114] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((114u << 8) | j9mm_UtActive[114]), NULL);} \
	} while(0)
#else
#define Trc_MM_suspendConHelperThreads_Shutdown(thr)   /* tracepoint name: j9mm.114 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_suspendConHelperThreads_Exit(thr) do { /* tracepoint name: j9mm.115 */ \
	if ((unsigned char) j9mm_UtActive[115] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((115u << 8) | j9mm_UtActive[115]), NULL);} \
	} while(0)
#else
#define Trc_MM_suspendConHelperThreads_Exit(thr)   /* tracepoint name: j9mm.115 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_incrementConcurrentHelperCount_Entry(P1) do { /* tracepoint name: j9mm.116 */ \
	if ((unsigned char) j9mm_UtActive[116] != 0){ \
		j9mm_UtModuleInfo.intf->Trace((void *)NULL, &j9mm_UtModuleInfo, ((116u << 8) | j9mm_UtActive[116]), "\4", P1);} \
	} while(0)
#else
#define Trc_MM_incrementConcurrentHelperCount_Entry(P1)   /* tracepoint name: j9mm.116 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_incrementConcurrentHelperCount_Exit(P1) do { /* tracepoint name: j9mm.117 */ \
	if ((unsigned char) j9mm_UtActive[117] != 0){ \
		j9mm_UtModuleInfo.intf->Trace((void *)NULL, &j9mm_UtModuleInfo, ((117u << 8) | j9mm_UtActive[117]), "\4", P1);} \
	} while(0)
#else
#define Trc_MM_incrementConcurrentHelperCount_Exit(P1)   /* tracepoint name: j9mm.117 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_notifyWaitingConcurrentHelpers_Entry() do { /* tracepoint name: j9mm.118 */ \
	if ((unsigned char) j9mm_UtActive[118] != 0){ \
		j9mm_UtModuleInfo.intf->Trace((void *)NULL, &j9mm_UtModuleInfo, ((118u << 8) | j9mm_UtActive[118]), NULL);} \
	} while(0)
#else
#define Trc_MM_notifyWaitingConcurrentHelpers_Entry()   /* tracepoint name: j9mm.118 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_notifyWaitingConcurrentHelpers_Exit() do { /* tracepoint name: j9mm.119 */ \
	if ((unsigned char) j9mm_UtActive[119] != 0){ \
		j9mm_UtModuleInfo.intf->Trace((void *)NULL, &j9mm_UtModuleInfo, ((119u << 8) | j9mm_UtActive[119]), NULL);} \
	} while(0)
#else
#define Trc_MM_notifyWaitingConcurrentHelpers_Exit()   /* tracepoint name: j9mm.119 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_shutdownConHelperThreads_Entry() do { /* tracepoint name: j9mm.120 */ \
	if ((unsigned char) j9mm_UtActive[120] != 0){ \
		j9mm_UtModuleInfo.intf->Trace((void *)NULL, &j9mm_UtModuleInfo, ((120u << 8) | j9mm_UtActive[120]), NULL);} \
	} while(0)
#else
#define Trc_MM_shutdownConHelperThreads_Entry()   /* tracepoint name: j9mm.120 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_shutdownConHelperThreads_Exit() do { /* tracepoint name: j9mm.121 */ \
	if ((unsigned char) j9mm_UtActive[121] != 0){ \
		j9mm_UtModuleInfo.intf->Trace((void *)NULL, &j9mm_UtModuleInfo, ((121u << 8) | j9mm_UtActive[121]), NULL);} \
	} while(0)
#else
#define Trc_MM_shutdownConHelperThreads_Exit()   /* tracepoint name: j9mm.121 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SynchronizeGCThreads_Entry(thr, P1) do { /* tracepoint name: j9mm.122 */ \
	if ((unsigned char) j9mm_UtActive[122] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((122u << 8) | j9mm_UtActive[122]), "\377", P1);} \
	} while(0)
#else
#define Trc_MM_SynchronizeGCThreads_Entry(thr, P1)   /* tracepoint name: j9mm.122 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SynchronizeGCThreads_Exit(thr) do { /* tracepoint name: j9mm.123 */ \
	if ((unsigned char) j9mm_UtActive[123] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((123u << 8) | j9mm_UtActive[123]), NULL);} \
	} while(0)
#else
#define Trc_MM_SynchronizeGCThreads_Exit(thr)   /* tracepoint name: j9mm.123 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SynchronizeGCThreadsAndReleaseMaster_Entry(thr, P1) do { /* tracepoint name: j9mm.124 */ \
	if ((unsigned char) j9mm_UtActive[124] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((124u << 8) | j9mm_UtActive[124]), "\377", P1);} \
	} while(0)
#else
#define Trc_MM_SynchronizeGCThreadsAndReleaseMaster_Entry(thr, P1)   /* tracepoint name: j9mm.124 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SynchronizeGCThreadsAndReleaseMaster_Exit(thr) do { /* tracepoint name: j9mm.125 */ \
	if ((unsigned char) j9mm_UtActive[125] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((125u << 8) | j9mm_UtActive[125]), NULL);} \
	} while(0)
#else
#define Trc_MM_SynchronizeGCThreadsAndReleaseMaster_Exit(thr)   /* tracepoint name: j9mm.125 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define TrcEnabled_Trc_MM_MethodSampleContinue  (j9mm_UtActive[126] != 0)
#define Trc_MM_MethodSampleContinue(thr, P1, P2, P3, P4, P5, P6, P7, P8, P9) do { /* tracepoint name: j9mm.126 */ \
	if ((unsigned char) j9mm_UtActive[126] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((126u << 8) | j9mm_UtActive[126]), "\6\12\377\12\377\12\377\6\6", P1, P2, P3, P4, P5, P6, P7, P8, P9);} \
	} while(0)
#else
#define TrcEnabled_Trc_MM_MethodSampleContinue  (0)
#define Trc_MM_MethodSampleContinue(thr, P1, P2, P3, P4, P5, P6, P7, P8, P9)   /* tracepoint name: j9mm.126 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_UtilizationTrackerOverFlow(thr, P1, P2) do { /* tracepoint name: j9mm.127 */ \
	if ((unsigned char) j9mm_UtActive[127] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((127u << 8) | j9mm_UtActive[127]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_UtilizationTrackerOverFlow(thr, P1, P2)   /* tracepoint name: j9mm.127 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_NonMonotonicTimeDetected(P1) do { /* tracepoint name: j9mm.128 */ \
	if ((unsigned char) j9mm_UtActive[128] != 0){ \
		j9mm_UtModuleInfo.intf->Trace((void *)NULL, &j9mm_UtModuleInfo, ((128u << 8) | j9mm_UtActive[128]), "\377", P1);} \
	} while(0)
#else
#define Trc_MM_NonMonotonicTimeDetected(P1)   /* tracepoint name: j9mm.128 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_NonMonotonicTimeAcknowledged(P1) do { /* tracepoint name: j9mm.129 */ \
	if ((unsigned char) j9mm_UtActive[129] != 0){ \
		j9mm_UtModuleInfo.intf->Trace((void *)NULL, &j9mm_UtModuleInfo, ((129u << 8) | j9mm_UtActive[129]), "\377", P1);} \
	} while(0)
#else
#define Trc_MM_NonMonotonicTimeAcknowledged(P1)   /* tracepoint name: j9mm.129 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CompressedAccessBarrierInitialized(thr, P1, P2) do { /* tracepoint name: j9mm.130 */ \
	if ((unsigned char) j9mm_UtActive[130] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((130u << 8) | j9mm_UtActive[130]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_CompressedAccessBarrierInitialized(thr, P1, P2)   /* tracepoint name: j9mm.130 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SystemGCStart(thr, P1, P2, P3, P4, P5, P6) do { /* tracepoint name: j9mm.131 */ \
	if ((unsigned char) j9mm_UtActive[131] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((131u << 8) | j9mm_UtActive[131]), "\6\6\6\6\6\6", P1, P2, P3, P4, P5, P6);} \
	} while(0)
#else
#define Trc_MM_SystemGCStart(thr, P1, P2, P3, P4, P5, P6)   /* tracepoint name: j9mm.131 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ConcurrentCollectionStart(thr, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14) do { /* tracepoint name: j9mm.132 */ \
	if ((unsigned char) j9mm_UtActive[132] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((132u << 8) | j9mm_UtActive[132]), "\6\6\6\6\6\6\6\6\6\6\6\6\377\6", P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14);} \
	} while(0)
#else
#define Trc_MM_ConcurrentCollectionStart(thr, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14)   /* tracepoint name: j9mm.132 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AllocationFailureStart(thr, P1, P2, P3, P4, P5, P6, P7) do { /* tracepoint name: j9mm.133 */ \
	if ((unsigned char) j9mm_UtActive[133] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((133u << 8) | j9mm_UtActive[133]), "\6\6\6\6\6\6\6", P1, P2, P3, P4, P5, P6, P7);} \
	} while(0)
#else
#define Trc_MM_AllocationFailureStart(thr, P1, P2, P3, P4, P5, P6, P7)   /* tracepoint name: j9mm.133 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AllocationFailureEnd(thr, P1, P2, P3, P4, P5, P6) do { /* tracepoint name: j9mm.134 */ \
	if ((unsigned char) j9mm_UtActive[134] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((134u << 8) | j9mm_UtActive[134]), "\6\6\6\6\6\6", P1, P2, P3, P4, P5, P6);} \
	} while(0)
#else
#define Trc_MM_AllocationFailureEnd(thr, P1, P2, P3, P4, P5, P6)   /* tracepoint name: j9mm.134 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ExclusiveAccess(thr, P1, P2, P3, P4, P5, P6, P7) do { /* tracepoint name: j9mm.135 */ \
	if ((unsigned char) j9mm_UtActive[135] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((135u << 8) | j9mm_UtActive[135]), "\4\4\4\4\6\6\4", P1, P2, P3, P4, P5, P6, P7);} \
	} while(0)
#else
#define Trc_MM_ExclusiveAccess(thr, P1, P2, P3, P4, P5, P6, P7)   /* tracepoint name: j9mm.135 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CompactStart(thr, P1) do { /* tracepoint name: j9mm.136 */ \
	if ((unsigned char) j9mm_UtActive[136] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((136u << 8) | j9mm_UtActive[136]), "\377", P1);} \
	} while(0)
#else
#define Trc_MM_CompactStart(thr, P1)   /* tracepoint name: j9mm.136 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CompactEnd(thr, P1) do { /* tracepoint name: j9mm.137 */ \
	if ((unsigned char) j9mm_UtActive[137] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((137u << 8) | j9mm_UtActive[137]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_CompactEnd(thr, P1)   /* tracepoint name: j9mm.137 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_Tiltratio(thr, P1) do { /* tracepoint name: j9mm.140 */ \
	if ((unsigned char) j9mm_UtActive[140] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((140u << 8) | j9mm_UtActive[140]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_Tiltratio(thr, P1)   /* tracepoint name: j9mm.140 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Assert_MM_unreachable_internal() do { /* tracepoint name: j9mm.141 */ \
	if ((unsigned char) j9mm_UtActive[141] != 0){ \
		if ((false)) { /* assertion satisfied */ } else { \
			if (j9mm_UtModuleInfo.intf != NULL) { \
				j9mm_UtModuleInfo.intf->Trace((void *)NULL, &j9mm_UtModuleInfo, (UT_SPECIAL_ASSERTION | (141u << 8) | j9mm_UtActive[141]), "\377\4\377", __FILE__, __LINE__, UT_STR(((false)))); \
				Trace_Unreachable(); \
			} else { \
				fprintf(stderr, "** ASSERTION FAILED ** j9mm.141 at %s:%d Assert_MM_unreachable_internal%s\n", __FILE__, __LINE__, UT_STR(((false)))); \
			} \
		}} \
	} while(0)
#else
#define Assert_MM_unreachable_internal()   /* tracepoint name: j9mm.141 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Assert_MM_unimplemented_internal() do { /* tracepoint name: j9mm.142 */ \
	if ((unsigned char) j9mm_UtActive[142] != 0){ \
		if ((false)) { /* assertion satisfied */ } else { \
			if (j9mm_UtModuleInfo.intf != NULL) { \
				j9mm_UtModuleInfo.intf->Trace((void *)NULL, &j9mm_UtModuleInfo, (UT_SPECIAL_ASSERTION | (142u << 8) | j9mm_UtActive[142]), "\377\4\377", __FILE__, __LINE__, UT_STR(((false)))); \
				Trace_Unreachable(); \
			} else { \
				fprintf(stderr, "** ASSERTION FAILED ** j9mm.142 at %s:%d Assert_MM_unimplemented_internal%s\n", __FILE__, __LINE__, UT_STR(((false)))); \
			} \
		}} \
	} while(0)
#else
#define Assert_MM_unimplemented_internal()   /* tracepoint name: j9mm.142 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_concurrentClassMarkStart(thr) do { /* tracepoint name: j9mm.143 */ \
	if ((unsigned char) j9mm_UtActive[143] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((143u << 8) | j9mm_UtActive[143]), NULL);} \
	} while(0)
#else
#define Trc_MM_concurrentClassMarkStart(thr)   /* tracepoint name: j9mm.143 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_concurrentClassMarkEnd(thr, P1) do { /* tracepoint name: j9mm.144 */ \
	if ((unsigned char) j9mm_UtActive[144] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((144u << 8) | j9mm_UtActive[144]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_concurrentClassMarkEnd(thr, P1)   /* tracepoint name: j9mm.144 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ParallelHeapWalker_allObjectsDoParallel_Entry(thr) do { /* tracepoint name: j9mm.145 */ \
	if ((unsigned char) j9mm_UtActive[145] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((145u << 8) | j9mm_UtActive[145]), NULL);} \
	} while(0)
#else
#define Trc_MM_ParallelHeapWalker_allObjectsDoParallel_Entry(thr)   /* tracepoint name: j9mm.145 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ParallelHeapWalker_allObjectsDoParallel_Exit(thr, P1, P2, P3) do { /* tracepoint name: j9mm.146 */ \
	if ((unsigned char) j9mm_UtActive[146] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((146u << 8) | j9mm_UtActive[146]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_MM_ParallelHeapWalker_allObjectsDoParallel_Exit(thr, P1, P2, P3)   /* tracepoint name: j9mm.146 */
#endif

#if UT_TRACE_OVERHEAD >= 9
#define Trc_MM_MemorySubSpace_garbageCollect_Exit4(thr) do { /* tracepoint name: j9mm.147 */ \
	if ((unsigned char) j9mm_UtActive[147] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((147u << 8) | j9mm_UtActive[147]), NULL);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpace_garbageCollect_Exit4(thr)   /* tracepoint name: j9mm.147 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_Scavenger_masterThreadGarbageCollect_Entry(thr) do { /* tracepoint name: j9mm.148 */ \
	if ((unsigned char) j9mm_UtActive[148] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((148u << 8) | j9mm_UtActive[148]), NULL);} \
	} while(0)
#else
#define Trc_MM_Scavenger_masterThreadGarbageCollect_Entry(thr)   /* tracepoint name: j9mm.148 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_Scavenger_masterThreadGarbageCollect_setFailedTenureFlag(thr, P1) do { /* tracepoint name: j9mm.149 */ \
	if ((unsigned char) j9mm_UtActive[149] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((149u << 8) | j9mm_UtActive[149]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_Scavenger_masterThreadGarbageCollect_setFailedTenureFlag(thr, P1)   /* tracepoint name: j9mm.149 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_Scavenger_masterThreadGarbageCollect_Exit(thr) do { /* tracepoint name: j9mm.150 */ \
	if ((unsigned char) j9mm_UtActive[150] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((150u << 8) | j9mm_UtActive[150]), NULL);} \
	} while(0)
#else
#define Trc_MM_Scavenger_masterThreadGarbageCollect_Exit(thr)   /* tracepoint name: j9mm.150 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_Scavenger_semispaceAllocateFailed(thr, P1, P2) do { /* tracepoint name: j9mm.151 */ \
	if ((unsigned char) j9mm_UtActive[151] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((151u << 8) | j9mm_UtActive[151]), "\6\377", P1, P2);} \
	} while(0)
#else
#define Trc_MM_Scavenger_semispaceAllocateFailed(thr, P1, P2)   /* tracepoint name: j9mm.151 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_Scavenger_tenureAllocateFailed(thr, P1, P2, P3) do { /* tracepoint name: j9mm.152 */ \
	if ((unsigned char) j9mm_UtActive[152] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((152u << 8) | j9mm_UtActive[152]), "\6\6\377", P1, P2, P3);} \
	} while(0)
#else
#define Trc_MM_Scavenger_tenureAllocateFailed(thr, P1, P2, P3)   /* tracepoint name: j9mm.152 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_Scavenger_percolate_failedTenureThresholdReached(thr, P1, P2) do { /* tracepoint name: j9mm.153 */ \
	if ((unsigned char) j9mm_UtActive[153] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((153u << 8) | j9mm_UtActive[153]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_Scavenger_percolate_failedTenureThresholdReached(thr, P1, P2)   /* tracepoint name: j9mm.153 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_Scavenger_percolate_insufficientTenureSpace(thr, P1, P2, P3) do { /* tracepoint name: j9mm.154 */ \
	if ((unsigned char) j9mm_UtActive[154] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((154u << 8) | j9mm_UtActive[154]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_MM_Scavenger_percolate_insufficientTenureSpace(thr, P1, P2, P3)   /* tracepoint name: j9mm.154 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_Scavenger_percolate_maxScavengeBeforeGlobal(thr, P1) do { /* tracepoint name: j9mm.155 */ \
	if ((unsigned char) j9mm_UtActive[155] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((155u << 8) | j9mm_UtActive[155]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_Scavenger_percolate_maxScavengeBeforeGlobal(thr, P1)   /* tracepoint name: j9mm.155 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_Scavenger_percolate_rememberedSetOverflow(thr) do { /* tracepoint name: j9mm.156 */ \
	if ((unsigned char) j9mm_UtActive[156] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((156u << 8) | j9mm_UtActive[156]), NULL);} \
	} while(0)
#else
#define Trc_MM_Scavenger_percolate_rememberedSetOverflow(thr)   /* tracepoint name: j9mm.156 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_Scavenger_percolate_expandFailed(thr) do { /* tracepoint name: j9mm.157 */ \
	if ((unsigned char) j9mm_UtActive[157] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((157u << 8) | j9mm_UtActive[157]), NULL);} \
	} while(0)
#else
#define Trc_MM_Scavenger_percolate_expandFailed(thr)   /* tracepoint name: j9mm.157 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_HeapRegionManager_destroyAuxiliaryRegionDescriptor_Entry(thr, P1) do { /* tracepoint name: j9mm.158 */ \
	if ((unsigned char) j9mm_UtActive[158] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((158u << 8) | j9mm_UtActive[158]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_HeapRegionManager_destroyAuxiliaryRegionDescriptor_Entry(thr, P1)   /* tracepoint name: j9mm.158 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_HeapRegionManager_destroyAuxiliaryRegionDescriptor_Exit(thr) do { /* tracepoint name: j9mm.159 */ \
	if ((unsigned char) j9mm_UtActive[159] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((159u << 8) | j9mm_UtActive[159]), NULL);} \
	} while(0)
#else
#define Trc_MM_HeapRegionManager_destroyAuxiliaryRegionDescriptor_Exit(thr)   /* tracepoint name: j9mm.159 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Assert_MM_objectSaveFailed() do { /* tracepoint name: j9mm.161 */ \
	if ((unsigned char) j9mm_UtActive[161] != 0){ \
		if ((false)) { /* assertion satisfied */ } else { \
			if (j9mm_UtModuleInfo.intf != NULL) { \
				j9mm_UtModuleInfo.intf->Trace((void *)NULL, &j9mm_UtModuleInfo, (UT_SPECIAL_ASSERTION | (161u << 8) | j9mm_UtActive[161]), "\377\4\377", __FILE__, __LINE__, UT_STR(((false)))); \
				Trace_Unreachable(); \
			} else { \
				fprintf(stderr, "** ASSERTION FAILED ** j9mm.161 at %s:%d Assert_MM_objectSaveFailed%s\n", __FILE__, __LINE__, UT_STR(((false)))); \
			} \
		}} \
	} while(0)
#else
#define Assert_MM_objectSaveFailed()   /* tracepoint name: j9mm.161 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_FinalizeSupport_finalizeObjectCreated_Entry(thr, P1) do { /* tracepoint name: j9mm.169 */ \
	if ((unsigned char) j9mm_UtActive[169] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((169u << 8) | j9mm_UtActive[169]), "\6", P1);} \
	} while(0)
#else
#define Trc_FinalizeSupport_finalizeObjectCreated_Entry(thr, P1)   /* tracepoint name: j9mm.169 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_FinalizeSupport_finalizeObjectCreated_NHRThreadEarlyExit(thr) do { /* tracepoint name: j9mm.170 */ \
	if ((unsigned char) j9mm_UtActive[170] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((170u << 8) | j9mm_UtActive[170]), NULL);} \
	} while(0)
#else
#define Trc_FinalizeSupport_finalizeObjectCreated_NHRThreadEarlyExit(thr)   /* tracepoint name: j9mm.170 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_FinalizeSupport_finalizeObjectCreated_Exit(thr, P1) do { /* tracepoint name: j9mm.172 */ \
	if ((unsigned char) j9mm_UtActive[172] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((172u << 8) | j9mm_UtActive[172]), "\6", P1);} \
	} while(0)
#else
#define Trc_FinalizeSupport_finalizeObjectCreated_Exit(thr, P1)   /* tracepoint name: j9mm.172 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_FinalizeSupport_runFinalization_Entry(thr) do { /* tracepoint name: j9mm.173 */ \
	if ((unsigned char) j9mm_UtActive[173] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((173u << 8) | j9mm_UtActive[173]), NULL);} \
	} while(0)
#else
#define Trc_FinalizeSupport_runFinalization_Entry(thr)   /* tracepoint name: j9mm.173 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_FinalizeSupport_runFinalization_Exit(thr) do { /* tracepoint name: j9mm.174 */ \
	if ((unsigned char) j9mm_UtActive[174] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((174u << 8) | j9mm_UtActive[174]), NULL);} \
	} while(0)
#else
#define Trc_FinalizeSupport_runFinalization_Exit(thr)   /* tracepoint name: j9mm.174 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_FinalizeSupport_forceClassLoaderUnload_Entry(thr, P1) do { /* tracepoint name: j9mm.180 */ \
	if ((unsigned char) j9mm_UtActive[180] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((180u << 8) | j9mm_UtActive[180]), "\6", P1);} \
	} while(0)
#else
#define Trc_FinalizeSupport_forceClassLoaderUnload_Entry(thr, P1)   /* tracepoint name: j9mm.180 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_FinalizeSupport_forceClassLoaderUnload_classLoaderNotBeingUnloaded(thr, P1) do { /* tracepoint name: j9mm.181 */ \
	if ((unsigned char) j9mm_UtActive[181] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((181u << 8) | j9mm_UtActive[181]), "\6", P1);} \
	} while(0)
#else
#define Trc_FinalizeSupport_forceClassLoaderUnload_classLoaderNotBeingUnloaded(thr, P1)   /* tracepoint name: j9mm.181 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_FinalizeSupport_forceClassLoaderUnload_failedToInitializeClassUnloadingMutex(thr) do { /* tracepoint name: j9mm.182 */ \
	if ((unsigned char) j9mm_UtActive[182] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((182u << 8) | j9mm_UtActive[182]), NULL);} \
	} while(0)
#else
#define Trc_FinalizeSupport_forceClassLoaderUnload_failedToInitializeClassUnloadingMutex(thr)   /* tracepoint name: j9mm.182 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_FinalizeSupport_forceClassLoaderUnload_timedOut(thr, P1) do { /* tracepoint name: j9mm.183 */ \
	if ((unsigned char) j9mm_UtActive[183] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((183u << 8) | j9mm_UtActive[183]), "\6", P1);} \
	} while(0)
#else
#define Trc_FinalizeSupport_forceClassLoaderUnload_timedOut(thr, P1)   /* tracepoint name: j9mm.183 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_FinalizeSupport_forceClassLoaderUnload_classLoaderNotDead(thr, P1) do { /* tracepoint name: j9mm.184 */ \
	if ((unsigned char) j9mm_UtActive[184] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((184u << 8) | j9mm_UtActive[184]), "\6", P1);} \
	} while(0)
#else
#define Trc_FinalizeSupport_forceClassLoaderUnload_classLoaderNotDead(thr, P1)   /* tracepoint name: j9mm.184 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_FinalizeSupport_forceClassLoaderUnload_Exit(thr, P1) do { /* tracepoint name: j9mm.185 */ \
	if ((unsigned char) j9mm_UtActive[185] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((185u << 8) | j9mm_UtActive[185]), "\6", P1);} \
	} while(0)
#else
#define Trc_FinalizeSupport_forceClassLoaderUnload_Exit(thr, P1)   /* tracepoint name: j9mm.185 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_HeapRegionManager_acquireSingleTableRegions_Entry(thr, P1, P2) do { /* tracepoint name: j9mm.186 */ \
	if ((unsigned char) j9mm_UtActive[186] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((186u << 8) | j9mm_UtActive[186]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_HeapRegionManager_acquireSingleTableRegions_Entry(thr, P1, P2)   /* tracepoint name: j9mm.186 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_HeapRegionManager_acquireSingleTableRegions_Exit(thr, P1, P2) do { /* tracepoint name: j9mm.187 */ \
	if ((unsigned char) j9mm_UtActive[187] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((187u << 8) | j9mm_UtActive[187]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_HeapRegionManager_acquireSingleTableRegions_Exit(thr, P1, P2)   /* tracepoint name: j9mm.187 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ConcurrentHaltedState(thr, P1, P2, P3) do { /* tracepoint name: j9mm.188 */ \
	if ((unsigned char) j9mm_UtActive[188] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((188u << 8) | j9mm_UtActive[188]), "\377\377\377", P1, P2, P3);} \
	} while(0)
#else
#define Trc_MM_ConcurrentHaltedState(thr, P1, P2, P3)   /* tracepoint name: j9mm.188 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Assert_MM_mustHaveExclusiveVMAccess(P1) do { /* tracepoint name: j9mm.189 */ \
	if ((unsigned char) j9mm_UtActive[189] != 0){ \
		if ((P1)->exclusiveCount != 0) { /* assertion satisfied */ } else { \
			if (j9mm_UtModuleInfo.intf != NULL) { \
				j9mm_UtModuleInfo.intf->Trace((void *)NULL, &j9mm_UtModuleInfo, (UT_SPECIAL_ASSERTION | (189u << 8) | j9mm_UtActive[189]), "\377\4\377", __FILE__, __LINE__, UT_STR(((P1)->exclusiveCount != 0))); \
				Trace_Unreachable(); \
			} else { \
				fprintf(stderr, "** ASSERTION FAILED ** j9mm.189 at %s:%d Assert_MM_mustHaveExclusiveVMAccess%s\n", __FILE__, __LINE__, UT_STR(((P1)->exclusiveCount != 0))); \
			} \
		}} \
	} while(0)
#else
#define Assert_MM_mustHaveExclusiveVMAccess(P1)   /* tracepoint name: j9mm.189 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_GlobalCollector_isTimeForClassUnloading_Entry(P1, P2, P3, P4) do { /* tracepoint name: j9mm.190 */ \
	if ((unsigned char) j9mm_UtActive[190] != 0){ \
		j9mm_UtModuleInfo.intf->Trace((void *)NULL, &j9mm_UtModuleInfo, ((190u << 8) | j9mm_UtActive[190]), "\6\6\6\6", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_MM_GlobalCollector_isTimeForClassUnloading_Entry(P1, P2, P3, P4)   /* tracepoint name: j9mm.190 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_GlobalCollector_isTimeForClassUnloading_Exit(P1) do { /* tracepoint name: j9mm.191 */ \
	if ((unsigned char) j9mm_UtActive[191] != 0){ \
		j9mm_UtModuleInfo.intf->Trace((void *)NULL, &j9mm_UtModuleInfo, ((191u << 8) | j9mm_UtActive[191]), "\377", P1);} \
	} while(0)
#else
#define Trc_MM_GlobalCollector_isTimeForClassUnloading_Exit(P1)   /* tracepoint name: j9mm.191 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_GlobalCollector_isTimeForGlobalGCKickoff_Entry(P1, P2, P3, P4) do { /* tracepoint name: j9mm.192 */ \
	if ((unsigned char) j9mm_UtActive[192] != 0){ \
		j9mm_UtModuleInfo.intf->Trace((void *)NULL, &j9mm_UtModuleInfo, ((192u << 8) | j9mm_UtActive[192]), "\6\6\6\6", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_MM_GlobalCollector_isTimeForGlobalGCKickoff_Entry(P1, P2, P3, P4)   /* tracepoint name: j9mm.192 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_GlobalCollector_isTimeForGlobalGCKickoff_Exit(P1) do { /* tracepoint name: j9mm.193 */ \
	if ((unsigned char) j9mm_UtActive[193] != 0){ \
		j9mm_UtModuleInfo.intf->Trace((void *)NULL, &j9mm_UtModuleInfo, ((193u << 8) | j9mm_UtActive[193]), "\377", P1);} \
	} while(0)
#else
#define Trc_MM_GlobalCollector_isTimeForGlobalGCKickoff_Exit(P1)   /* tracepoint name: j9mm.193 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_allocateAndConnectNonContiguousArraylet_Entry(thr, P1, P2, P3) do { /* tracepoint name: j9mm.213 */ \
	if ((unsigned char) j9mm_UtActive[213] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((213u << 8) | j9mm_UtActive[213]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_MM_allocateAndConnectNonContiguousArraylet_Entry(thr, P1, P2, P3)   /* tracepoint name: j9mm.213 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_allocateAndConnectNonContiguousArraylet_spineFailure(thr) do { /* tracepoint name: j9mm.214 */ \
	if ((unsigned char) j9mm_UtActive[214] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((214u << 8) | j9mm_UtActive[214]), NULL);} \
	} while(0)
#else
#define Trc_MM_allocateAndConnectNonContiguousArraylet_spineFailure(thr)   /* tracepoint name: j9mm.214 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_allocateAndConnectNonContiguousArraylet_leafFailure(thr) do { /* tracepoint name: j9mm.215 */ \
	if ((unsigned char) j9mm_UtActive[215] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((215u << 8) | j9mm_UtActive[215]), NULL);} \
	} while(0)
#else
#define Trc_MM_allocateAndConnectNonContiguousArraylet_leafFailure(thr)   /* tracepoint name: j9mm.215 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_allocateAndConnectNonContiguousArraylet_Exit(thr, P1) do { /* tracepoint name: j9mm.216 */ \
	if ((unsigned char) j9mm_UtActive[216] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((216u << 8) | j9mm_UtActive[216]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_allocateAndConnectNonContiguousArraylet_Exit(thr, P1)   /* tracepoint name: j9mm.216 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceTarok_lockedReplenishAndAllocate_Entry(thr) do { /* tracepoint name: j9mm.217 */ \
	if ((unsigned char) j9mm_UtActive[217] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((217u << 8) | j9mm_UtActive[217]), NULL);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceTarok_lockedReplenishAndAllocate_Entry(thr)   /* tracepoint name: j9mm.217 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceTarok_lockedReplenishAndAllocate_Success(thr, P1, P2) do { /* tracepoint name: j9mm.218 */ \
	if ((unsigned char) j9mm_UtActive[218] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((218u << 8) | j9mm_UtActive[218]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceTarok_lockedReplenishAndAllocate_Success(thr, P1, P2)   /* tracepoint name: j9mm.218 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceTarok_lockedReplenishAndAllocate_Failure(thr, P1) do { /* tracepoint name: j9mm.219 */ \
	if ((unsigned char) j9mm_UtActive[219] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((219u << 8) | j9mm_UtActive[219]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceTarok_lockedReplenishAndAllocate_Failure(thr, P1)   /* tracepoint name: j9mm.219 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AllocationContextTarok_Deprecated_lockedReplenishAndAllocate_Entry(thr, P1, P2) do { /* tracepoint name: j9mm.220 */ \
	if ((unsigned char) j9mm_UtActive[220] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((220u << 8) | j9mm_UtActive[220]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_AllocationContextTarok_Deprecated_lockedReplenishAndAllocate_Entry(thr, P1, P2)   /* tracepoint name: j9mm.220 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AllocationContextTarok_Deprecated_internalReplenishActiveRegion_convertedFreeRegion(thr, P1, P2) do { /* tracepoint name: j9mm.223 */ \
	if ((unsigned char) j9mm_UtActive[223] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((223u << 8) | j9mm_UtActive[223]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_AllocationContextTarok_Deprecated_internalReplenishActiveRegion_convertedFreeRegion(thr, P1, P2)   /* tracepoint name: j9mm.223 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AllocationContextTarok_Deprecated_lockedReplenishAndAllocate_acquiredFreeRegion(thr, P1) do { /* tracepoint name: j9mm.224 */ \
	if ((unsigned char) j9mm_UtActive[224] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((224u << 8) | j9mm_UtActive[224]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_AllocationContextTarok_Deprecated_lockedReplenishAndAllocate_acquiredFreeRegion(thr, P1)   /* tracepoint name: j9mm.224 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AllocationContextTarok_Deprecated_lockedReplenishAndAllocate_Success(thr) do { /* tracepoint name: j9mm.225 */ \
	if ((unsigned char) j9mm_UtActive[225] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((225u << 8) | j9mm_UtActive[225]), NULL);} \
	} while(0)
#else
#define Trc_MM_AllocationContextTarok_Deprecated_lockedReplenishAndAllocate_Success(thr)   /* tracepoint name: j9mm.225 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AllocationContextTarok_Deprecated_lockedReplenishAndAllocate_Failure(thr) do { /* tracepoint name: j9mm.226 */ \
	if ((unsigned char) j9mm_UtActive[226] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((226u << 8) | j9mm_UtActive[226]), NULL);} \
	} while(0)
#else
#define Trc_MM_AllocationContextTarok_Deprecated_lockedReplenishAndAllocate_Failure(thr)   /* tracepoint name: j9mm.226 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_setBytesRemainingBeforeTaxation(P1) do { /* tracepoint name: j9mm.227 */ \
	if ((unsigned char) j9mm_UtActive[227] != 0){ \
		j9mm_UtModuleInfo.intf->Trace((void *)NULL, &j9mm_UtModuleInfo, ((227u << 8) | j9mm_UtActive[227]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_setBytesRemainingBeforeTaxation(P1)   /* tracepoint name: j9mm.227 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ReclaimDelegate_rememberedObjectCount(thr, P1, P2, P3, P4, P5, P6) do { /* tracepoint name: j9mm.230 */ \
	if ((unsigned char) j9mm_UtActive[230] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((230u << 8) | j9mm_UtActive[230]), "\6\6\6\6\6\6", P1, P2, P3, P4, P5, P6);} \
	} while(0)
#else
#define Trc_MM_ReclaimDelegate_rememberedObjectCount(thr, P1, P2, P3, P4, P5, P6)   /* tracepoint name: j9mm.230 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AllocationThreshold_setAllocationThreshold_Entry(thr, P1, P2, P3, P4) do { /* tracepoint name: j9mm.231 */ \
	if ((unsigned char) j9mm_UtActive[231] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((231u << 8) | j9mm_UtActive[231]), "\6\6\6\6", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_MM_AllocationThreshold_setAllocationThreshold_Entry(thr, P1, P2, P3, P4)   /* tracepoint name: j9mm.231 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AllocationThreshold_setAllocationThreshold_Exit(thr) do { /* tracepoint name: j9mm.232 */ \
	if ((unsigned char) j9mm_UtActive[232] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((232u << 8) | j9mm_UtActive[232]), NULL);} \
	} while(0)
#else
#define Trc_MM_AllocationThreshold_setAllocationThreshold_Exit(thr)   /* tracepoint name: j9mm.232 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AllocationThreshold_triggerAllocationThresholdEvent(thr, P1, P2, P3) do { /* tracepoint name: j9mm.233 */ \
	if ((unsigned char) j9mm_UtActive[233] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((233u << 8) | j9mm_UtActive[233]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_MM_AllocationThreshold_triggerAllocationThresholdEvent(thr, P1, P2, P3)   /* tracepoint name: j9mm.233 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AllocationThreshold_triggerAllocationThresholdEventIndexable(thr, P1, P2, P3) do { /* tracepoint name: j9mm.234 */ \
	if ((unsigned char) j9mm_UtActive[234] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((234u << 8) | j9mm_UtActive[234]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_MM_AllocationThreshold_triggerAllocationThresholdEventIndexable(thr, P1, P2, P3)   /* tracepoint name: j9mm.234 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_memoryManagerTLHAsyncCallbackHandler_eventNotHooked(thr) do { /* tracepoint name: j9mm.235 */ \
	if ((unsigned char) j9mm_UtActive[235] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((235u << 8) | j9mm_UtActive[235]), NULL);} \
	} while(0)
#else
#define Trc_MM_memoryManagerTLHAsyncCallbackHandler_eventNotHooked(thr)   /* tracepoint name: j9mm.235 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_memoryManagerTLHAsyncCallbackHandler_eventIsHooked(thr) do { /* tracepoint name: j9mm.236 */ \
	if ((unsigned char) j9mm_UtActive[236] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((236u << 8) | j9mm_UtActive[236]), NULL);} \
	} while(0)
#else
#define Trc_MM_memoryManagerTLHAsyncCallbackHandler_eventIsHooked(thr)   /* tracepoint name: j9mm.236 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_memoryManagerTLHAsyncCallbackHandler_disableAllocationCache(thr, P1, P2) do { /* tracepoint name: j9mm.237 */ \
	if ((unsigned char) j9mm_UtActive[237] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((237u << 8) | j9mm_UtActive[237]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_memoryManagerTLHAsyncCallbackHandler_disableAllocationCache(thr, P1, P2)   /* tracepoint name: j9mm.237 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_memoryManagerTLHAsyncCallbackHandler_disableInlineTLHAllocates(thr, P1, P2, P3, P4) do { /* tracepoint name: j9mm.238 */ \
	if ((unsigned char) j9mm_UtActive[238] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((238u << 8) | j9mm_UtActive[238]), "\6\6\6\6", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_MM_memoryManagerTLHAsyncCallbackHandler_disableInlineTLHAllocates(thr, P1, P2, P3, P4)   /* tracepoint name: j9mm.238 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_memoryManagerTLHAsyncCallbackHandler_enableAllocationCache(thr, P1, P2) do { /* tracepoint name: j9mm.239 */ \
	if ((unsigned char) j9mm_UtActive[239] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((239u << 8) | j9mm_UtActive[239]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_memoryManagerTLHAsyncCallbackHandler_enableAllocationCache(thr, P1, P2)   /* tracepoint name: j9mm.239 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_memoryManagerTLHAsyncCallbackHandler_enableInlineTLHAllocates(thr, P1, P2, P3, P4) do { /* tracepoint name: j9mm.240 */ \
	if ((unsigned char) j9mm_UtActive[240] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((240u << 8) | j9mm_UtActive[240]), "\6\6\6\6", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_MM_memoryManagerTLHAsyncCallbackHandler_enableInlineTLHAllocates(thr, P1, P2, P3, P4)   /* tracepoint name: j9mm.240 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ParallelScavenger_rescanThreadSlot_rememberedObject(thr, P1) do { /* tracepoint name: j9mm.241 */ \
	if ((unsigned char) j9mm_UtActive[241] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((241u << 8) | j9mm_UtActive[241]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_ParallelScavenger_rescanThreadSlot_rememberedObject(thr, P1)   /* tracepoint name: j9mm.241 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ParallelScavenger_copyAndForwardThreadSlot_renewingRememberedObject(thr, P1, P2) do { /* tracepoint name: j9mm.242 */ \
	if ((unsigned char) j9mm_UtActive[242] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((242u << 8) | j9mm_UtActive[242]), "\6\4", P1, P2);} \
	} while(0)
#else
#define Trc_MM_ParallelScavenger_copyAndForwardThreadSlot_renewingRememberedObject(thr, P1, P2)   /* tracepoint name: j9mm.242 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ParallelScavenger_copyAndForwardThreadSlot_deferRememberObject(thr, P1) do { /* tracepoint name: j9mm.243 */ \
	if ((unsigned char) j9mm_UtActive[243] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((243u << 8) | j9mm_UtActive[243]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_ParallelScavenger_copyAndForwardThreadSlot_deferRememberObject(thr, P1)   /* tracepoint name: j9mm.243 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ParallelScavenger_scavengeRememberedSet_keepingRememberedObject(thr, P1, P2) do { /* tracepoint name: j9mm.244 */ \
	if ((unsigned char) j9mm_UtActive[244] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((244u << 8) | j9mm_UtActive[244]), "\6\4", P1, P2);} \
	} while(0)
#else
#define Trc_MM_ParallelScavenger_scavengeRememberedSet_keepingRememberedObject(thr, P1, P2)   /* tracepoint name: j9mm.244 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ParallelScavenger_scanOverflowCache_keepingRememberedObject(thr, P1, P2) do { /* tracepoint name: j9mm.245 */ \
	if ((unsigned char) j9mm_UtActive[245] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((245u << 8) | j9mm_UtActive[245]), "\6\4", P1, P2);} \
	} while(0)
#else
#define Trc_MM_ParallelScavenger_scanOverflowCache_keepingRememberedObject(thr, P1, P2)   /* tracepoint name: j9mm.245 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_StandardAccessBarrier_treatObjectAsRecentlyAllocated(thr, P1) do { /* tracepoint name: j9mm.246 */ \
	if ((unsigned char) j9mm_UtActive[246] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((246u << 8) | j9mm_UtActive[246]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_StandardAccessBarrier_treatObjectAsRecentlyAllocated(thr, P1)   /* tracepoint name: j9mm.246 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ConcurrentGC_determineInitWork_Entry(thr) do { /* tracepoint name: j9mm.247 */ \
	if ((unsigned char) j9mm_UtActive[247] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((247u << 8) | j9mm_UtActive[247]), NULL);} \
	} while(0)
#else
#define Trc_MM_ConcurrentGC_determineInitWork_Entry(thr)   /* tracepoint name: j9mm.247 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ConcurrentGC_determineInitWork_Exit(thr) do { /* tracepoint name: j9mm.248 */ \
	if ((unsigned char) j9mm_UtActive[248] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((248u << 8) | j9mm_UtActive[248]), NULL);} \
	} while(0)
#else
#define Trc_MM_ConcurrentGC_determineInitWork_Exit(thr)   /* tracepoint name: j9mm.248 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ConcurrentGC_getInitRange_Entry(thr) do { /* tracepoint name: j9mm.249 */ \
	if ((unsigned char) j9mm_UtActive[249] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((249u << 8) | j9mm_UtActive[249]), NULL);} \
	} while(0)
#else
#define Trc_MM_ConcurrentGC_getInitRange_Entry(thr)   /* tracepoint name: j9mm.249 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ConcurrentGC_getInitRange_Succeed(thr, P1, P2, P3, P4) do { /* tracepoint name: j9mm.250 */ \
	if ((unsigned char) j9mm_UtActive[250] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((250u << 8) | j9mm_UtActive[250]), "\6\6\6\377", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_MM_ConcurrentGC_getInitRange_Succeed(thr, P1, P2, P3, P4)   /* tracepoint name: j9mm.250 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ConcurrentGC_getInitRange_Fail(thr) do { /* tracepoint name: j9mm.251 */ \
	if ((unsigned char) j9mm_UtActive[251] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((251u << 8) | j9mm_UtActive[251]), NULL);} \
	} while(0)
#else
#define Trc_MM_ConcurrentGC_getInitRange_Fail(thr)   /* tracepoint name: j9mm.251 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ConcurrentGC_tuneToHeap_Entry(thr) do { /* tracepoint name: j9mm.252 */ \
	if ((unsigned char) j9mm_UtActive[252] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((252u << 8) | j9mm_UtActive[252]), NULL);} \
	} while(0)
#else
#define Trc_MM_ConcurrentGC_tuneToHeap_Entry(thr)   /* tracepoint name: j9mm.252 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ConcurrentGC_tuneToHeap_Exit1(thr) do { /* tracepoint name: j9mm.253 */ \
	if ((unsigned char) j9mm_UtActive[253] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((253u << 8) | j9mm_UtActive[253]), NULL);} \
	} while(0)
#else
#define Trc_MM_ConcurrentGC_tuneToHeap_Exit1(thr)   /* tracepoint name: j9mm.253 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ConcurrentGC_tuneToHeap_Exit2(thr, P1, P2, P3) do { /* tracepoint name: j9mm.254 */ \
	if ((unsigned char) j9mm_UtActive[254] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((254u << 8) | j9mm_UtActive[254]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_MM_ConcurrentGC_tuneToHeap_Exit2(thr, P1, P2, P3)   /* tracepoint name: j9mm.254 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ConcurrentGC_internalPreCollect_Entry(thr, P1) do { /* tracepoint name: j9mm.255 */ \
	if ((unsigned char) j9mm_UtActive[255] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((255u << 8) | j9mm_UtActive[255]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_ConcurrentGC_internalPreCollect_Entry(thr, P1)   /* tracepoint name: j9mm.255 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ConcurrentGC_internalPreCollect_Exit(thr, P1) do { /* tracepoint name: j9mm.256 */ \
	if ((unsigned char) j9mm_UtActive[256] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((256u << 8) | j9mm_UtActive[256]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_ConcurrentGC_internalPreCollect_Exit(thr, P1)   /* tracepoint name: j9mm.256 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ConcurrentGC_internalPostCollect_Entry(thr, P1) do { /* tracepoint name: j9mm.257 */ \
	if ((unsigned char) j9mm_UtActive[257] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((257u << 8) | j9mm_UtActive[257]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_ConcurrentGC_internalPostCollect_Entry(thr, P1)   /* tracepoint name: j9mm.257 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ConcurrentGC_internalPostCollect_Exit(thr, P1) do { /* tracepoint name: j9mm.258 */ \
	if ((unsigned char) j9mm_UtActive[258] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((258u << 8) | j9mm_UtActive[258]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_ConcurrentGC_internalPostCollect_Exit(thr, P1)   /* tracepoint name: j9mm.258 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ConcurrentGC_heapAddRange_Entry(thr, P1, P2, P3, P4) do { /* tracepoint name: j9mm.259 */ \
	if ((unsigned char) j9mm_UtActive[259] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((259u << 8) | j9mm_UtActive[259]), "\6\6\6\6", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_MM_ConcurrentGC_heapAddRange_Entry(thr, P1, P2, P3, P4)   /* tracepoint name: j9mm.259 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ConcurrentGC_heapAddRange_Exit(thr) do { /* tracepoint name: j9mm.260 */ \
	if ((unsigned char) j9mm_UtActive[260] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((260u << 8) | j9mm_UtActive[260]), NULL);} \
	} while(0)
#else
#define Trc_MM_ConcurrentGC_heapAddRange_Exit(thr)   /* tracepoint name: j9mm.260 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ConcurrentGC_heapRemoveRange_Entry(thr, P1, P2, P3, P4, P5, P6) do { /* tracepoint name: j9mm.261 */ \
	if ((unsigned char) j9mm_UtActive[261] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((261u << 8) | j9mm_UtActive[261]), "\6\6\6\6\6\6", P1, P2, P3, P4, P5, P6);} \
	} while(0)
#else
#define Trc_MM_ConcurrentGC_heapRemoveRange_Entry(thr, P1, P2, P3, P4, P5, P6)   /* tracepoint name: j9mm.261 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ConcurrentGC_heapRemoveRange_Exit(thr) do { /* tracepoint name: j9mm.262 */ \
	if ((unsigned char) j9mm_UtActive[262] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((262u << 8) | j9mm_UtActive[262]), NULL);} \
	} while(0)
#else
#define Trc_MM_ConcurrentGC_heapRemoveRange_Exit(thr)   /* tracepoint name: j9mm.262 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_HeapRegionManager_enableRegionsInTable_Entry(thr, P1, P2, P3) do { /* tracepoint name: j9mm.265 */ \
	if ((unsigned char) j9mm_UtActive[265] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((265u << 8) | j9mm_UtActive[265]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_MM_HeapRegionManager_enableRegionsInTable_Entry(thr, P1, P2, P3)   /* tracepoint name: j9mm.265 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_HeapRegionManager_enableRegionsInTable_Exit(thr, P1, P2, P3) do { /* tracepoint name: j9mm.266 */ \
	if ((unsigned char) j9mm_UtActive[266] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((266u << 8) | j9mm_UtActive[266]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_MM_HeapRegionManager_enableRegionsInTable_Exit(thr, P1, P2, P3)   /* tracepoint name: j9mm.266 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_replenishContext_taxationWorkPreempted(thr, P1) do { /* tracepoint name: j9mm.267 */ \
	if ((unsigned char) j9mm_UtActive[267] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((267u << 8) | j9mm_UtActive[267]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_replenishContext_taxationWorkPreempted(thr, P1)   /* tracepoint name: j9mm.267 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CompactScheme_evacuateSubArea_evacuated(thr, P1, P2, P3, P4) do { /* tracepoint name: j9mm.268 */ \
	if ((unsigned char) j9mm_UtActive[268] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((268u << 8) | j9mm_UtActive[268]), "\6\6\6\6", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_MM_CompactScheme_evacuateSubArea_evacuated(thr, P1, P2, P3, P4)   /* tracepoint name: j9mm.268 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CompactScheme_evacuateSubArea_bytesRemainingIgnored(thr, P1, P2) do { /* tracepoint name: j9mm.269 */ \
	if ((unsigned char) j9mm_UtActive[269] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((269u << 8) | j9mm_UtActive[269]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_CompactScheme_evacuateSubArea_bytesRemainingIgnored(thr, P1, P2)   /* tracepoint name: j9mm.269 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CompactScheme_evacuateSubArea_bytesRemaining(thr, P1, P2) do { /* tracepoint name: j9mm.270 */ \
	if ((unsigned char) j9mm_UtActive[270] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((270u << 8) | j9mm_UtActive[270]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_CompactScheme_evacuateSubArea_bytesRemaining(thr, P1, P2)   /* tracepoint name: j9mm.270 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CompactScheme_evacuateSubArea_subAreaFullIgnored(thr, P1, P2, P3) do { /* tracepoint name: j9mm.271 */ \
	if ((unsigned char) j9mm_UtActive[271] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((271u << 8) | j9mm_UtActive[271]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_MM_CompactScheme_evacuateSubArea_subAreaFullIgnored(thr, P1, P2, P3)   /* tracepoint name: j9mm.271 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CompactScheme_evacuateSubArea_subAreaFull(thr, P1, P2, P3) do { /* tracepoint name: j9mm.272 */ \
	if ((unsigned char) j9mm_UtActive[272] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((272u << 8) | j9mm_UtActive[272]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_MM_CompactScheme_evacuateSubArea_subAreaFull(thr, P1, P2, P3)   /* tracepoint name: j9mm.272 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CompactScheme_evacuateSubArea_subAreaAlreadyCompacted(thr, P1, P2) do { /* tracepoint name: j9mm.273 */ \
	if ((unsigned char) j9mm_UtActive[273] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((273u << 8) | j9mm_UtActive[273]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_CompactScheme_evacuateSubArea_subAreaAlreadyCompacted(thr, P1, P2)   /* tracepoint name: j9mm.273 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CompactScheme_evacuateSubArea_subAreaAlreadyCompactedFreeSpaceIgnored(thr, P1, P2) do { /* tracepoint name: j9mm.274 */ \
	if ((unsigned char) j9mm_UtActive[274] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((274u << 8) | j9mm_UtActive[274]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_CompactScheme_evacuateSubArea_subAreaAlreadyCompactedFreeSpaceIgnored(thr, P1, P2)   /* tracepoint name: j9mm.274 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CompactScheme_evacuateSubArea_subAreaAlreadyCompactedFreeSpaceRemaining(thr, P1, P2, P3) do { /* tracepoint name: j9mm.275 */ \
	if ((unsigned char) j9mm_UtActive[275] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((275u << 8) | j9mm_UtActive[275]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_MM_CompactScheme_evacuateSubArea_subAreaAlreadyCompactedFreeSpaceRemaining(thr, P1, P2, P3)   /* tracepoint name: j9mm.275 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CompactScheme_evacuateSubArea_subAreaCompactedAFreeSpaceIgnored(thr, P1, P2, P3, P4) do { /* tracepoint name: j9mm.276 */ \
	if ((unsigned char) j9mm_UtActive[276] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((276u << 8) | j9mm_UtActive[276]), "\6\6\6\6", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_MM_CompactScheme_evacuateSubArea_subAreaCompactedAFreeSpaceIgnored(thr, P1, P2, P3, P4)   /* tracepoint name: j9mm.276 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CompactScheme_evacuateSubArea_subAreaCompactedAFreeSpaceRemaining(thr, P1, P2, P3, P4) do { /* tracepoint name: j9mm.277 */ \
	if ((unsigned char) j9mm_UtActive[277] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((277u << 8) | j9mm_UtActive[277]), "\6\6\6\6", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_MM_CompactScheme_evacuateSubArea_subAreaCompactedAFreeSpaceRemaining(thr, P1, P2, P3, P4)   /* tracepoint name: j9mm.277 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CompactScheme_evacuateSubArea_subAreaCompactedBFreeSpaceIgnored(thr, P1, P2, P3, P4) do { /* tracepoint name: j9mm.278 */ \
	if ((unsigned char) j9mm_UtActive[278] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((278u << 8) | j9mm_UtActive[278]), "\6\6\6\6", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_MM_CompactScheme_evacuateSubArea_subAreaCompactedBFreeSpaceIgnored(thr, P1, P2, P3, P4)   /* tracepoint name: j9mm.278 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CompactScheme_evacuateSubArea_subAreaCompactedBFreeSpaceRemaining(thr, P1, P2, P3, P4) do { /* tracepoint name: j9mm.279 */ \
	if ((unsigned char) j9mm_UtActive[279] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((279u << 8) | j9mm_UtActive[279]), "\6\6\6\6", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_MM_CompactScheme_evacuateSubArea_subAreaCompactedBFreeSpaceRemaining(thr, P1, P2, P3, P4)   /* tracepoint name: j9mm.279 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ReclaimDelegate_compactRegionSelectionTime(thr, P1) do { /* tracepoint name: j9mm.280 */ \
	if ((unsigned char) j9mm_UtActive[280] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((280u << 8) | j9mm_UtActive[280]), "\10", P1);} \
	} while(0)
#else
#define Trc_MM_ReclaimDelegate_compactRegionSelectionTime(thr, P1)   /* tracepoint name: j9mm.280 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ParallelGlobalGC_unloadDeadClassLoaders_entry(thr) do { /* tracepoint name: j9mm.281 */ \
	if ((unsigned char) j9mm_UtActive[281] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((281u << 8) | j9mm_UtActive[281]), NULL);} \
	} while(0)
#else
#define Trc_MM_ParallelGlobalGC_unloadDeadClassLoaders_entry(thr)   /* tracepoint name: j9mm.281 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ParallelGlobalGC_unloadDeadClassLoaders_exit(thr) do { /* tracepoint name: j9mm.282 */ \
	if ((unsigned char) j9mm_UtActive[282] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((282u << 8) | j9mm_UtActive[282]), NULL);} \
	} while(0)
#else
#define Trc_MM_ParallelGlobalGC_unloadDeadClassLoaders_exit(thr)   /* tracepoint name: j9mm.282 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SynchGCStart(thr, P1, P2, P3, P4, P5) do { /* tracepoint name: j9mm.285 */ \
	if ((unsigned char) j9mm_UtActive[285] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((285u << 8) | j9mm_UtActive[285]), "\6\377\6\6\6", P1, P2, P3, P4, P5);} \
	} while(0)
#else
#define Trc_MM_SynchGCStart(thr, P1, P2, P3, P4, P5)   /* tracepoint name: j9mm.285 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SynchGCEnd(thr, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12) do { /* tracepoint name: j9mm.286 */ \
	if ((unsigned char) j9mm_UtActive[286] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((286u << 8) | j9mm_UtActive[286]), "\6\6\6\6\6\6\6\6\6\6\6\6", P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12);} \
	} while(0)
#else
#define Trc_MM_SynchGCEnd(thr, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12)   /* tracepoint name: j9mm.286 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_cleanUpClassLoadersStart_Entry(thr) do { /* tracepoint name: j9mm.289 */ \
	if ((unsigned char) j9mm_UtActive[289] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((289u << 8) | j9mm_UtActive[289]), NULL);} \
	} while(0)
#else
#define Trc_MM_cleanUpClassLoadersStart_Entry(thr)   /* tracepoint name: j9mm.289 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_cleanUpClassLoadersStart_Exit(thr) do { /* tracepoint name: j9mm.290 */ \
	if ((unsigned char) j9mm_UtActive[290] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((290u << 8) | j9mm_UtActive[290]), NULL);} \
	} while(0)
#else
#define Trc_MM_cleanUpClassLoadersStart_Exit(thr)   /* tracepoint name: j9mm.290 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_cleanUpClassLoadersStart_triggerClassUnload(thr, P1, P2, P3) do { /* tracepoint name: j9mm.291 */ \
	if ((unsigned char) j9mm_UtActive[291] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((291u << 8) | j9mm_UtActive[291]), "\6\12\377", P1, P2, P3);} \
	} while(0)
#else
#define Trc_MM_cleanUpClassLoadersStart_triggerClassUnload(thr, P1, P2, P3)   /* tracepoint name: j9mm.291 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_cleanUpClassLoadersStart_triggerClassesUnload(thr, P1) do { /* tracepoint name: j9mm.292 */ \
	if ((unsigned char) j9mm_UtActive[292] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((292u << 8) | j9mm_UtActive[292]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_cleanUpClassLoadersStart_triggerClassesUnload(thr, P1)   /* tracepoint name: j9mm.292 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_VM_cleanUpClassLoaders_Exit(thr) do { /* tracepoint name: j9mm.293 */ \
	if ((unsigned char) j9mm_UtActive[293] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((293u << 8) | j9mm_UtActive[293]), NULL);} \
	} while(0)
#else
#define Trc_VM_cleanUpClassLoaders_Exit(thr)   /* tracepoint name: j9mm.293 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SchedulingDelegate_getNextTaxationThreshold_Entry(thr) do { /* tracepoint name: j9mm.294 */ \
	if ((unsigned char) j9mm_UtActive[294] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((294u << 8) | j9mm_UtActive[294]), NULL);} \
	} while(0)
#else
#define Trc_MM_SchedulingDelegate_getNextTaxationThreshold_Entry(thr)   /* tracepoint name: j9mm.294 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SchedulingDelegate_getNextTaxationThreshold_Exit(thr, P1, P2, P3, P4, P5) do { /* tracepoint name: j9mm.295 */ \
	if ((unsigned char) j9mm_UtActive[295] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((295u << 8) | j9mm_UtActive[295]), "\6\6\6\4\4", P1, P2, P3, P4, P5);} \
	} while(0)
#else
#define Trc_MM_SchedulingDelegate_getNextTaxationThreshold_Exit(thr, P1, P2, P3, P4, P5)   /* tracepoint name: j9mm.295 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ReclaimDelegate_runReclaimComplete_Entry(thr, P1, P2) do { /* tracepoint name: j9mm.306 */ \
	if ((unsigned char) j9mm_UtActive[306] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((306u << 8) | j9mm_UtActive[306]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_ReclaimDelegate_runReclaimComplete_Entry(thr, P1, P2)   /* tracepoint name: j9mm.306 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ReclaimDelegate_runReclaimComplete_freeBeforeReclaim(thr, P1) do { /* tracepoint name: j9mm.307 */ \
	if ((unsigned char) j9mm_UtActive[307] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((307u << 8) | j9mm_UtActive[307]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_ReclaimDelegate_runReclaimComplete_freeBeforeReclaim(thr, P1)   /* tracepoint name: j9mm.307 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ReclaimDelegate_runReclaimComplete_freeAfterSweep(thr, P1) do { /* tracepoint name: j9mm.308 */ \
	if ((unsigned char) j9mm_UtActive[308] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((308u << 8) | j9mm_UtActive[308]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_ReclaimDelegate_runReclaimComplete_freeAfterSweep(thr, P1)   /* tracepoint name: j9mm.308 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ReclaimDelegate_runReclaimComplete_freeAfterCompact(thr, P1) do { /* tracepoint name: j9mm.309 */ \
	if ((unsigned char) j9mm_UtActive[309] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((309u << 8) | j9mm_UtActive[309]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_ReclaimDelegate_runReclaimComplete_freeAfterCompact(thr, P1)   /* tracepoint name: j9mm.309 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ReclaimDelegate_runReclaimComplete_Exit(thr, P1) do { /* tracepoint name: j9mm.310 */ \
	if ((unsigned char) j9mm_UtActive[310] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((310u << 8) | j9mm_UtActive[310]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_ReclaimDelegate_runReclaimComplete_Exit(thr, P1)   /* tracepoint name: j9mm.310 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ParallelSweepScheme_sweepChunk_darkMatterComparison(thr, P1, P2, P3, P4, P5, P6) do { /* tracepoint name: j9mm.311 */ \
	if ((unsigned char) j9mm_UtActive[311] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((311u << 8) | j9mm_UtActive[311]), "\6\6\6\6\6\6", P1, P2, P3, P4, P5, P6);} \
	} while(0)
#else
#define Trc_MM_ParallelSweepScheme_sweepChunk_darkMatterComparison(thr, P1, P2, P3, P4, P5, P6)   /* tracepoint name: j9mm.311 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ReclaimDelegate_runCompact_Entry(thr, P1) do { /* tracepoint name: j9mm.312 */ \
	if ((unsigned char) j9mm_UtActive[312] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((312u << 8) | j9mm_UtActive[312]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_ReclaimDelegate_runCompact_Entry(thr, P1)   /* tracepoint name: j9mm.312 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ReclaimDelegate_runCompact_Exit(thr, P1) do { /* tracepoint name: j9mm.314 */ \
	if ((unsigned char) j9mm_UtActive[314] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((314u << 8) | j9mm_UtActive[314]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_ReclaimDelegate_runCompact_Exit(thr, P1)   /* tracepoint name: j9mm.314 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Assert_MM_mustNotHaveVMAccess(P1) do { /* tracepoint name: j9mm.315 */ \
	if ((unsigned char) j9mm_UtActive[315] != 0){ \
		if (0 == ((P1)->publicFlags & J9_PUBLIC_FLAGS_VM_ACCESS)) { /* assertion satisfied */ } else { \
			if (j9mm_UtModuleInfo.intf != NULL) { \
				j9mm_UtModuleInfo.intf->Trace((void *)NULL, &j9mm_UtModuleInfo, (UT_SPECIAL_ASSERTION | (315u << 8) | j9mm_UtActive[315]), "\377\4\377", __FILE__, __LINE__, UT_STR((0 == ((P1)->publicFlags & J9_PUBLIC_FLAGS_VM_ACCESS)))); \
				Trace_Unreachable(); \
			} else { \
				fprintf(stderr, "** ASSERTION FAILED ** j9mm.315 at %s:%d Assert_MM_mustNotHaveVMAccess%s\n", __FILE__, __LINE__, UT_STR((0 == ((P1)->publicFlags & J9_PUBLIC_FLAGS_VM_ACCESS)))); \
			} \
		}} \
	} while(0)
#else
#define Assert_MM_mustNotHaveVMAccess(P1)   /* tracepoint name: j9mm.315 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Assert_MM_mustBeClass(P1) do { /* tracepoint name: j9mm.316 */ \
	if ((unsigned char) j9mm_UtActive[316] != 0){ \
		if ((uintptr_t)0x99669966 == (P1)->eyecatcher) { /* assertion satisfied */ } else { \
			if (j9mm_UtModuleInfo.intf != NULL) { \
				j9mm_UtModuleInfo.intf->Trace((void *)NULL, &j9mm_UtModuleInfo, (UT_SPECIAL_ASSERTION | (316u << 8) | j9mm_UtActive[316]), "\377\4\377", __FILE__, __LINE__, UT_STR(((uintptr_t)0x99669966 == (P1)->eyecatcher))); \
				Trace_Unreachable(); \
			} else { \
				fprintf(stderr, "** ASSERTION FAILED ** j9mm.316 at %s:%d Assert_MM_mustBeClass%s\n", __FILE__, __LINE__, UT_STR(((uintptr_t)0x99669966 == (P1)->eyecatcher))); \
			} \
		}} \
	} while(0)
#else
#define Assert_MM_mustBeClass(P1)   /* tracepoint name: j9mm.316 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ReclaimDelegate_estimateReclaimableRegions_Entry(thr) do { /* tracepoint name: j9mm.317 */ \
	if ((unsigned char) j9mm_UtActive[317] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((317u << 8) | j9mm_UtActive[317]), NULL);} \
	} while(0)
#else
#define Trc_MM_ReclaimDelegate_estimateReclaimableRegions_Entry(thr)   /* tracepoint name: j9mm.317 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ReclaimDelegate_estimateReclaimableRegions_Exit(thr, P1, P2, P3) do { /* tracepoint name: j9mm.318 */ \
	if ((unsigned char) j9mm_UtActive[318] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((318u << 8) | j9mm_UtActive[318]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_MM_ReclaimDelegate_estimateReclaimableRegions_Exit(thr, P1, P2, P3)   /* tracepoint name: j9mm.318 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SchedulingDelegate_measureConsumptionForPartialGC_noPreviousData(thr) do { /* tracepoint name: j9mm.319 */ \
	if ((unsigned char) j9mm_UtActive[319] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((319u << 8) | j9mm_UtActive[319]), NULL);} \
	} while(0)
#else
#define Trc_MM_SchedulingDelegate_measureConsumptionForPartialGC_noPreviousData(thr)   /* tracepoint name: j9mm.319 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SchedulingDelegate_measureConsumptionForPartialGC_consumptionRate(thr, P1, P2, P3, P4) do { /* tracepoint name: j9mm.320 */ \
	if ((unsigned char) j9mm_UtActive[320] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((320u << 8) | j9mm_UtActive[320]), "\6\6\6\7", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_MM_SchedulingDelegate_measureConsumptionForPartialGC_consumptionRate(thr, P1, P2, P3, P4)   /* tracepoint name: j9mm.320 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SchedulingDelegate_estimatePartialGCsRemaining_Entry(thr, P1, P2) do { /* tracepoint name: j9mm.321 */ \
	if ((unsigned char) j9mm_UtActive[321] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((321u << 8) | j9mm_UtActive[321]), "\7\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_SchedulingDelegate_estimatePartialGCsRemaining_Entry(thr, P1, P2)   /* tracepoint name: j9mm.321 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SchedulingDelegate_estimatePartialGCsRemaining_Exit(thr, P1) do { /* tracepoint name: j9mm.322 */ \
	if ((unsigned char) j9mm_UtActive[322] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((322u << 8) | j9mm_UtActive[322]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_SchedulingDelegate_estimatePartialGCsRemaining_Exit(thr, P1)   /* tracepoint name: j9mm.322 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SchedulingDelegate_measureScanRate_Entry(thr, P1) do { /* tracepoint name: j9mm.323 */ \
	if ((unsigned char) j9mm_UtActive[323] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((323u << 8) | j9mm_UtActive[323]), "\4", P1);} \
	} while(0)
#else
#define Trc_MM_SchedulingDelegate_measureScanRate_Entry(thr, P1)   /* tracepoint name: j9mm.323 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SchedulingDelegate_measureScanRate_Exit(thr, P1) do { /* tracepoint name: j9mm.325 */ \
	if ((unsigned char) j9mm_UtActive[325] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((325u << 8) | j9mm_UtActive[325]), "\7", P1);} \
	} while(0)
#else
#define Trc_MM_SchedulingDelegate_measureScanRate_Exit(thr, P1)   /* tracepoint name: j9mm.325 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SchedulingDelegate_estimateGlobalMarkIncrements_Entry(thr) do { /* tracepoint name: j9mm.326 */ \
	if ((unsigned char) j9mm_UtActive[326] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((326u << 8) | j9mm_UtActive[326]), NULL);} \
	} while(0)
#else
#define Trc_MM_SchedulingDelegate_estimateGlobalMarkIncrements_Entry(thr)   /* tracepoint name: j9mm.326 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SchedulingDelegate_estimateGlobalMarkIncrements_summary(thr, P1, P2) do { /* tracepoint name: j9mm.327 */ \
	if ((unsigned char) j9mm_UtActive[327] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((327u << 8) | j9mm_UtActive[327]), "\7\7", P1, P2);} \
	} while(0)
#else
#define Trc_MM_SchedulingDelegate_estimateGlobalMarkIncrements_summary(thr, P1, P2)   /* tracepoint name: j9mm.327 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SchedulingDelegate_estimateGlobalMarkIncrements_Exit(thr, P1) do { /* tracepoint name: j9mm.328 */ \
	if ((unsigned char) j9mm_UtActive[328] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((328u << 8) | j9mm_UtActive[328]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_SchedulingDelegate_estimateGlobalMarkIncrements_Exit(thr, P1)   /* tracepoint name: j9mm.328 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_InterRegionRememberedSet_setRegionsAsRebuildingComplete_rebuildingSummary(thr, P1, P2) do { /* tracepoint name: j9mm.329 */ \
	if ((unsigned char) j9mm_UtActive[329] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((329u << 8) | j9mm_UtActive[329]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_InterRegionRememberedSet_setRegionsAsRebuildingComplete_rebuildingSummary(thr, P1, P2)   /* tracepoint name: j9mm.329 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SchedulingDelegate_calculateAutomaticGMPIntermission_Entry(thr, P1, P2) do { /* tracepoint name: j9mm.332 */ \
	if ((unsigned char) j9mm_UtActive[332] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((332u << 8) | j9mm_UtActive[332]), "\377\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_SchedulingDelegate_calculateAutomaticGMPIntermission_Entry(thr, P1, P2)   /* tracepoint name: j9mm.332 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SchedulingDelegate_calculateAutomaticGMPIntermission_Exit(thr, P1) do { /* tracepoint name: j9mm.333 */ \
	if ((unsigned char) j9mm_UtActive[333] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((333u << 8) | j9mm_UtActive[333]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_SchedulingDelegate_calculateAutomaticGMPIntermission_Exit(thr, P1)   /* tracepoint name: j9mm.333 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SchedulingDelegate_calculateEdenSize_Entry(thr, P1) do { /* tracepoint name: j9mm.335 */ \
	if ((unsigned char) j9mm_UtActive[335] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((335u << 8) | j9mm_UtActive[335]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_SchedulingDelegate_calculateEdenSize_Entry(thr, P1)   /* tracepoint name: j9mm.335 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SchedulingDelegate_calculateEdenSize_reduceToFreeBytes(thr, P1, P2) do { /* tracepoint name: j9mm.336 */ \
	if ((unsigned char) j9mm_UtActive[336] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((336u << 8) | j9mm_UtActive[336]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_SchedulingDelegate_calculateEdenSize_reduceToFreeBytes(thr, P1, P2)   /* tracepoint name: j9mm.336 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SchedulingDelegate_calculateEdenSize_reduceToMinimum(thr, P1, P2) do { /* tracepoint name: j9mm.337 */ \
	if ((unsigned char) j9mm_UtActive[337] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((337u << 8) | j9mm_UtActive[337]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_SchedulingDelegate_calculateEdenSize_reduceToMinimum(thr, P1, P2)   /* tracepoint name: j9mm.337 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SchedulingDelegate_calculateEdenSize_Exit(thr, P1) do { /* tracepoint name: j9mm.338 */ \
	if ((unsigned char) j9mm_UtActive[338] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((338u << 8) | j9mm_UtActive[338]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_SchedulingDelegate_calculateEdenSize_Exit(thr, P1)   /* tracepoint name: j9mm.338 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CollectionSetDelegate_createRegionCollectionSetForPartialGC_dynamicRegionSelectionBudget(thr, P1, P2) do { /* tracepoint name: j9mm.339 */ \
	if ((unsigned char) j9mm_UtActive[339] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((339u << 8) | j9mm_UtActive[339]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_CollectionSetDelegate_createRegionCollectionSetForPartialGC_dynamicRegionSelectionBudget(thr, P1, P2)   /* tracepoint name: j9mm.339 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CollectionSetDelegate_createRegionCollectionSetForPartialGC_dynamicRegionSelection(thr, P1, P2, P3, P4, P5) do { /* tracepoint name: j9mm.340 */ \
	if ((unsigned char) j9mm_UtActive[340] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((340u << 8) | j9mm_UtActive[340]), "\6\6\7\6\6", P1, P2, P3, P4, P5);} \
	} while(0)
#else
#define Trc_MM_CollectionSetDelegate_createRegionCollectionSetForPartialGC_dynamicRegionSelection(thr, P1, P2, P3, P4, P5)   /* tracepoint name: j9mm.340 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CollectionSetDelegate_createRegionCollectionSetForPartialGC_dynamicRegionSelectionBudgetRemaining(thr, P1) do { /* tracepoint name: j9mm.341 */ \
	if ((unsigned char) j9mm_UtActive[341] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((341u << 8) | j9mm_UtActive[341]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_CollectionSetDelegate_createRegionCollectionSetForPartialGC_dynamicRegionSelectionBudgetRemaining(thr, P1)   /* tracepoint name: j9mm.341 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CollectionSetDelegate_createRegionCollectionSetForPartialGC_coreSamplingBudget(thr, P1, P2) do { /* tracepoint name: j9mm.342 */ \
	if ((unsigned char) j9mm_UtActive[342] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((342u << 8) | j9mm_UtActive[342]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_CollectionSetDelegate_createRegionCollectionSetForPartialGC_coreSamplingBudget(thr, P1, P2)   /* tracepoint name: j9mm.342 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CollectionSetDelegate_createRegionCollectionSetForPartialGC_coreSamplingSelection(thr, P1, P2, P3, P4) do { /* tracepoint name: j9mm.343 */ \
	if ((unsigned char) j9mm_UtActive[343] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((343u << 8) | j9mm_UtActive[343]), "\6\6\6\6", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_MM_CollectionSetDelegate_createRegionCollectionSetForPartialGC_coreSamplingSelection(thr, P1, P2, P3, P4)   /* tracepoint name: j9mm.343 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CollectionSetDelegate_createRegionCollectionSetForPartialGC_coreSamplingBudgetRemaining(thr, P1) do { /* tracepoint name: j9mm.344 */ \
	if ((unsigned char) j9mm_UtActive[344] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((344u << 8) | j9mm_UtActive[344]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_CollectionSetDelegate_createRegionCollectionSetForPartialGC_coreSamplingBudgetRemaining(thr, P1)   /* tracepoint name: j9mm.344 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_PGCStart(thr, P1, P2) do { /* tracepoint name: j9mm.345 */ \
	if ((unsigned char) j9mm_UtActive[345] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((345u << 8) | j9mm_UtActive[345]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_PGCStart(thr, P1, P2)   /* tracepoint name: j9mm.345 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_PGCEnd(thr, P1, P2, P3, P4) do { /* tracepoint name: j9mm.346 */ \
	if ((unsigned char) j9mm_UtActive[346] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((346u << 8) | j9mm_UtActive[346]), "\6\6\6\6", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_MM_PGCEnd(thr, P1, P2, P3, P4)   /* tracepoint name: j9mm.346 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_GMPIncrementStart(thr, P1, P2) do { /* tracepoint name: j9mm.347 */ \
	if ((unsigned char) j9mm_UtActive[347] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((347u << 8) | j9mm_UtActive[347]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_GMPIncrementStart(thr, P1, P2)   /* tracepoint name: j9mm.347 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_GMPIncrementEnd(thr, P1, P2, P3, P4, P5) do { /* tracepoint name: j9mm.348 */ \
	if ((unsigned char) j9mm_UtActive[348] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((348u << 8) | j9mm_UtActive[348]), "\6\6\6\6\6", P1, P2, P3, P4, P5);} \
	} while(0)
#else
#define Trc_MM_GMPIncrementEnd(thr, P1, P2, P3, P4, P5)   /* tracepoint name: j9mm.348 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_PartialMarkingScheme_deleteDeadObjectsFromExternalCycle_Entry(thr) do { /* tracepoint name: j9mm.349 */ \
	if ((unsigned char) j9mm_UtActive[349] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((349u << 8) | j9mm_UtActive[349]), NULL);} \
	} while(0)
#else
#define Trc_MM_PartialMarkingScheme_deleteDeadObjectsFromExternalCycle_Entry(thr)   /* tracepoint name: j9mm.349 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_PartialMarkingScheme_deleteDeadObjectsFromExternalCycle_Exit(thr, P1, P2) do { /* tracepoint name: j9mm.350 */ \
	if ((unsigned char) j9mm_UtActive[350] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((350u << 8) | j9mm_UtActive[350]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_PartialMarkingScheme_deleteDeadObjectsFromExternalCycle_Exit(thr, P1, P2)   /* tracepoint name: j9mm.350 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ReclaimDelegate_performAtomicCompactAndCleanup_regionsDeferredForNextMark(thr, P1, P2, P3) do { /* tracepoint name: j9mm.352 */ \
	if ((unsigned char) j9mm_UtActive[352] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((352u << 8) | j9mm_UtActive[352]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_MM_ReclaimDelegate_performAtomicCompactAndCleanup_regionsDeferredForNextMark(thr, P1, P2, P3)   /* tracepoint name: j9mm.352 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_createJavaLangString_Entry(thr, P1, P2, P3) do { /* tracepoint name: j9mm.353 */ \
	if ((unsigned char) j9mm_UtActive[353] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((353u << 8) | j9mm_UtActive[353]), "\12\377\4", P1, P2, P3);} \
	} while(0)
#else
#define Trc_MM_createJavaLangString_Entry(thr, P1, P2, P3)   /* tracepoint name: j9mm.353 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_createJavaLangString_Exit(thr, P1) do { /* tracepoint name: j9mm.354 */ \
	if ((unsigned char) j9mm_UtActive[354] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((354u << 8) | j9mm_UtActive[354]), "\4", P1);} \
	} while(0)
#else
#define Trc_MM_createJavaLangString_Exit(thr, P1)   /* tracepoint name: j9mm.354 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_stringTableCacheHit(thr, P1) do { /* tracepoint name: j9mm.355 */ \
	if ((unsigned char) j9mm_UtActive[355] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((355u << 8) | j9mm_UtActive[355]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_stringTableCacheHit(thr, P1)   /* tracepoint name: j9mm.355 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_stringTableCacheMiss(thr, P1) do { /* tracepoint name: j9mm.356 */ \
	if ((unsigned char) j9mm_UtActive[356] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((356u << 8) | j9mm_UtActive[356]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_stringTableCacheMiss(thr, P1)   /* tracepoint name: j9mm.356 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CopyForwardScheme_deleteDeadObjectsFromExternalCycle(thr, P1, P2, P3) do { /* tracepoint name: j9mm.357 */ \
	if ((unsigned char) j9mm_UtActive[357] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((357u << 8) | j9mm_UtActive[357]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_MM_CopyForwardScheme_deleteDeadObjectsFromExternalCycle(thr, P1, P2, P3)   /* tracepoint name: j9mm.357 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CopyForwardScheme_abortFlagRaised(thr) do { /* tracepoint name: j9mm.358 */ \
	if ((unsigned char) j9mm_UtActive[358] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((358u << 8) | j9mm_UtActive[358]), NULL);} \
	} while(0)
#else
#define Trc_MM_CopyForwardScheme_abortFlagRaised(thr)   /* tracepoint name: j9mm.358 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SchedulingDelegate_estimatePartialGCsRemaining_survivorNeeds(thr, P1, P2, P3) do { /* tracepoint name: j9mm.359 */ \
	if ((unsigned char) j9mm_UtActive[359] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((359u << 8) | j9mm_UtActive[359]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_MM_SchedulingDelegate_estimatePartialGCsRemaining_survivorNeeds(thr, P1, P2, P3)   /* tracepoint name: j9mm.359 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ReclaimDelegate_tagRegionsBeforeCompactWithWorkGoal_Entry(thr, P1) do { /* tracepoint name: j9mm.364 */ \
	if ((unsigned char) j9mm_UtActive[364] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((364u << 8) | j9mm_UtActive[364]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_ReclaimDelegate_tagRegionsBeforeCompactWithWorkGoal_Entry(thr, P1)   /* tracepoint name: j9mm.364 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ReclaimDelegate_tagRegionsBeforeCompactWithWorkGoal_addingToCompactSet(thr, P1, P2, P3, P4, P5, P6) do { /* tracepoint name: j9mm.365 */ \
	if ((unsigned char) j9mm_UtActive[365] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((365u << 8) | j9mm_UtActive[365]), "\6\6\6\7\6\7", P1, P2, P3, P4, P5, P6);} \
	} while(0)
#else
#define Trc_MM_ReclaimDelegate_tagRegionsBeforeCompactWithWorkGoal_addingToCompactSet(thr, P1, P2, P3, P4, P5, P6)   /* tracepoint name: j9mm.365 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ReclaimDelegate_tagRegionsBeforeCompactWithWorkGoal_Exit(thr, P1, P2) do { /* tracepoint name: j9mm.366 */ \
	if ((unsigned char) j9mm_UtActive[366] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((366u << 8) | j9mm_UtActive[366]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_ReclaimDelegate_tagRegionsBeforeCompactWithWorkGoal_Exit(thr, P1, P2)   /* tracepoint name: j9mm.366 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CopyForwardScheme_mergeGCStats_efficiency(thr, P1, P2, P3, P4) do { /* tracepoint name: j9mm.367 */ \
	if ((unsigned char) j9mm_UtActive[367] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((367u << 8) | j9mm_UtActive[367]), "\6\6\6\7", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_MM_CopyForwardScheme_mergeGCStats_efficiency(thr, P1, P2, P3, P4)   /* tracepoint name: j9mm.367 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CopyForwardScheme_clearReservedRegionLists_Entry(thr, P1) do { /* tracepoint name: j9mm.369 */ \
	if ((unsigned char) j9mm_UtActive[369] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((369u << 8) | j9mm_UtActive[369]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_CopyForwardScheme_clearReservedRegionLists_Entry(thr, P1)   /* tracepoint name: j9mm.369 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CopyForwardScheme_clearReservedRegionLists_compactGroup(thr, P1, P2, P3, P4, P5) do { /* tracepoint name: j9mm.370 */ \
	if ((unsigned char) j9mm_UtActive[370] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((370u << 8) | j9mm_UtActive[370]), "\6\6\6\6\6", P1, P2, P3, P4, P5);} \
	} while(0)
#else
#define Trc_MM_CopyForwardScheme_clearReservedRegionLists_compactGroup(thr, P1, P2, P3, P4, P5)   /* tracepoint name: j9mm.370 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CopyForwardScheme_clearReservedRegionLists_sublist(thr, P1, P2, P3, P4, P5) do { /* tracepoint name: j9mm.371 */ \
	if ((unsigned char) j9mm_UtActive[371] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((371u << 8) | j9mm_UtActive[371]), "\6\6\6\6\6", P1, P2, P3, P4, P5);} \
	} while(0)
#else
#define Trc_MM_CopyForwardScheme_clearReservedRegionLists_sublist(thr, P1, P2, P3, P4, P5)   /* tracepoint name: j9mm.371 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CopyForwardScheme_clearReservedRegionLists_Exit(thr) do { /* tracepoint name: j9mm.372 */ \
	if ((unsigned char) j9mm_UtActive[372] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((372u << 8) | j9mm_UtActive[372]), NULL);} \
	} while(0)
#else
#define Trc_MM_CopyForwardScheme_clearReservedRegionLists_Exit(thr)   /* tracepoint name: j9mm.372 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SchedulingDelegate_estimateMacroDefragmentationWork(thr, P1, P2) do { /* tracepoint name: j9mm.373 */ \
	if ((unsigned char) j9mm_UtActive[373] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((373u << 8) | j9mm_UtActive[373]), "\6\7", P1, P2);} \
	} while(0)
#else
#define Trc_MM_SchedulingDelegate_estimateMacroDefragmentationWork(thr, P1, P2)   /* tracepoint name: j9mm.373 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SchedulingDelegate_calculateHeapOccupancyTrend_liveSetBytes(thr, P1, P2, P3) do { /* tracepoint name: j9mm.374 */ \
	if ((unsigned char) j9mm_UtActive[374] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((374u << 8) | j9mm_UtActive[374]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_MM_SchedulingDelegate_calculateHeapOccupancyTrend_liveSetBytes(thr, P1, P2, P3)   /* tracepoint name: j9mm.374 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SchedulingDelegate_calculateHeapOccupancyTrend_heapOccupancy(thr, P1) do { /* tracepoint name: j9mm.375 */ \
	if ((unsigned char) j9mm_UtActive[375] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((375u << 8) | j9mm_UtActive[375]), "\7", P1);} \
	} while(0)
#else
#define Trc_MM_SchedulingDelegate_calculateHeapOccupancyTrend_heapOccupancy(thr, P1)   /* tracepoint name: j9mm.375 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SchedulingDelegate_estimateGlobalMarkIncrements_liveSetBytes(thr, P1, P2, P3) do { /* tracepoint name: j9mm.376 */ \
	if ((unsigned char) j9mm_UtActive[376] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((376u << 8) | j9mm_UtActive[376]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_MM_SchedulingDelegate_estimateGlobalMarkIncrements_liveSetBytes(thr, P1, P2, P3)   /* tracepoint name: j9mm.376 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SchedulingDelegate_globalGarbageCollectCompleted(thr, P1) do { /* tracepoint name: j9mm.377 */ \
	if ((unsigned char) j9mm_UtActive[377] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((377u << 8) | j9mm_UtActive[377]), "\7", P1);} \
	} while(0)
#else
#define Trc_MM_SchedulingDelegate_globalGarbageCollectCompleted(thr, P1)   /* tracepoint name: j9mm.377 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_cleanUpClassLoadersEnd_Entry(thr) do { /* tracepoint name: j9mm.378 */ \
	if ((unsigned char) j9mm_UtActive[378] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((378u << 8) | j9mm_UtActive[378]), NULL);} \
	} while(0)
#else
#define Trc_MM_cleanUpClassLoadersEnd_Entry(thr)   /* tracepoint name: j9mm.378 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_cleanUpClassLoadersEnd_Exit(thr) do { /* tracepoint name: j9mm.379 */ \
	if ((unsigned char) j9mm_UtActive[379] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((379u << 8) | j9mm_UtActive[379]), NULL);} \
	} while(0)
#else
#define Trc_MM_cleanUpClassLoadersEnd_Exit(thr)   /* tracepoint name: j9mm.379 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_cleanUpClassLoadersEnd_deleteDeadClassLoaderClassSegmentsStart(thr) do { /* tracepoint name: j9mm.380 */ \
	if ((unsigned char) j9mm_UtActive[380] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((380u << 8) | j9mm_UtActive[380]), NULL);} \
	} while(0)
#else
#define Trc_MM_cleanUpClassLoadersEnd_deleteDeadClassLoaderClassSegmentsStart(thr)   /* tracepoint name: j9mm.380 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_cleanUpClassLoadersEnd_unloadClassLoadersNotRequiringFinalizerStart(thr) do { /* tracepoint name: j9mm.381 */ \
	if ((unsigned char) j9mm_UtActive[381] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((381u << 8) | j9mm_UtActive[381]), NULL);} \
	} while(0)
#else
#define Trc_MM_cleanUpClassLoadersEnd_unloadClassLoadersNotRequiringFinalizerStart(thr)   /* tracepoint name: j9mm.381 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SchedulingDelegate_calculateEdenSize_dynamic(thr, P1, P2, P3, P4, P5, P6) do { /* tracepoint name: j9mm.382 */ \
	if ((unsigned char) j9mm_UtActive[382] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((382u << 8) | j9mm_UtActive[382]), "\6\7\6\6\6\6", P1, P2, P3, P4, P5, P6);} \
	} while(0)
#else
#define Trc_MM_SchedulingDelegate_calculateEdenSize_dynamic(thr, P1, P2, P3, P4, P5, P6)   /* tracepoint name: j9mm.382 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_GlobalMarkDelegate_performMarkIncremental_Entry(thr, P1) do { /* tracepoint name: j9mm.385 */ \
	if ((unsigned char) j9mm_UtActive[385] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((385u << 8) | j9mm_UtActive[385]), "\10", P1);} \
	} while(0)
#else
#define Trc_MM_GlobalMarkDelegate_performMarkIncremental_Entry(thr, P1)   /* tracepoint name: j9mm.385 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_GlobalMarkDelegate_performMarkIncremental_State(thr, P1, P2) do { /* tracepoint name: j9mm.386 */ \
	if ((unsigned char) j9mm_UtActive[386] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((386u << 8) | j9mm_UtActive[386]), "\377\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_GlobalMarkDelegate_performMarkIncremental_State(thr, P1, P2)   /* tracepoint name: j9mm.386 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_GlobalMarkDelegate_performMarkIncremental_Exit(thr, P1) do { /* tracepoint name: j9mm.387 */ \
	if ((unsigned char) j9mm_UtActive[387] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((387u << 8) | j9mm_UtActive[387]), "\377", P1);} \
	} while(0)
#else
#define Trc_MM_GlobalMarkDelegate_performMarkIncremental_Exit(thr, P1)   /* tracepoint name: j9mm.387 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ParallelScrubCardTableTask_scrubCardTable_Entry(thr) do { /* tracepoint name: j9mm.389 */ \
	if ((unsigned char) j9mm_UtActive[389] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((389u << 8) | j9mm_UtActive[389]), NULL);} \
	} while(0)
#else
#define Trc_MM_ParallelScrubCardTableTask_scrubCardTable_Entry(thr)   /* tracepoint name: j9mm.389 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ParallelScrubCardTableTask_scrubCardTable_Exit(thr, P1, P2, P3, P4, P5, P6, P7) do { /* tracepoint name: j9mm.390 */ \
	if ((unsigned char) j9mm_UtActive[390] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((390u << 8) | j9mm_UtActive[390]), "\6\6\6\6\6\10\377", P1, P2, P3, P4, P5, P6, P7);} \
	} while(0)
#else
#define Trc_MM_ParallelScrubCardTableTask_scrubCardTable_Exit(thr, P1, P2, P3, P4, P5, P6, P7)   /* tracepoint name: j9mm.390 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_Scavenger_percolate_activeJNICritical(thr) do { /* tracepoint name: j9mm.392 */ \
	if ((unsigned char) j9mm_UtActive[392] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((392u << 8) | j9mm_UtActive[392]), NULL);} \
	} while(0)
#else
#define Trc_MM_Scavenger_percolate_activeJNICritical(thr)   /* tracepoint name: j9mm.392 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CompactPrevented(thr, P1) do { /* tracepoint name: j9mm.393 */ \
	if ((unsigned char) j9mm_UtActive[393] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((393u << 8) | j9mm_UtActive[393]), "\377", P1);} \
	} while(0)
#else
#define Trc_MM_CompactPrevented(thr, P1)   /* tracepoint name: j9mm.393 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_J9AllocateIndexableObject_outOfLineObjectAllocation(thr, P1, P2, P3, P4, P5, P6, P7) do { /* tracepoint name: j9mm.394 */ \
	if ((unsigned char) j9mm_UtActive[394] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((394u << 8) | j9mm_UtActive[394]), "\6\12\377\12\377\6\6", P1, P2, P3, P4, P5, P6, P7);} \
	} while(0)
#else
#define Trc_MM_J9AllocateIndexableObject_outOfLineObjectAllocation(thr, P1, P2, P3, P4, P5, P6, P7)   /* tracepoint name: j9mm.394 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_J9AllocateObject_outOfLineObjectAllocation(thr, P1, P2, P3, P4) do { /* tracepoint name: j9mm.395 */ \
	if ((unsigned char) j9mm_UtActive[395] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((395u << 8) | j9mm_UtActive[395]), "\6\12\377\6", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_MM_J9AllocateObject_outOfLineObjectAllocation(thr, P1, P2, P3, P4)   /* tracepoint name: j9mm.395 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceTarok_calculateExpandSize_Entry(thr, P1) do { /* tracepoint name: j9mm.396 */ \
	if ((unsigned char) j9mm_UtActive[396] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((396u << 8) | j9mm_UtActive[396]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceTarok_calculateExpandSize_Entry(thr, P1)   /* tracepoint name: j9mm.396 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceTarok_calculateExpandSize_Exit1(thr, P1, P2, P3) do { /* tracepoint name: j9mm.397 */ \
	if ((unsigned char) j9mm_UtActive[397] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((397u << 8) | j9mm_UtActive[397]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceTarok_calculateExpandSize_Exit1(thr, P1, P2, P3)   /* tracepoint name: j9mm.397 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceTarok_checkForRatioExpand_Entry(thr, P1) do { /* tracepoint name: j9mm.398 */ \
	if ((unsigned char) j9mm_UtActive[398] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((398u << 8) | j9mm_UtActive[398]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceTarok_checkForRatioExpand_Entry(thr, P1)   /* tracepoint name: j9mm.398 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceTarok_checkForRatioExpand_Exit1(thr) do { /* tracepoint name: j9mm.399 */ \
	if ((unsigned char) j9mm_UtActive[399] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((399u << 8) | j9mm_UtActive[399]), NULL);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceTarok_checkForRatioExpand_Exit1(thr)   /* tracepoint name: j9mm.399 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceTarok_checkForRatioExpand_Exit2(thr, P1) do { /* tracepoint name: j9mm.400 */ \
	if ((unsigned char) j9mm_UtActive[400] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((400u << 8) | j9mm_UtActive[400]), "\4", P1);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceTarok_checkForRatioExpand_Exit2(thr, P1)   /* tracepoint name: j9mm.400 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceTarok_checkForRatioExpand_Exit3(thr, P1, P2) do { /* tracepoint name: j9mm.401 */ \
	if ((unsigned char) j9mm_UtActive[401] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((401u << 8) | j9mm_UtActive[401]), "\4\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceTarok_checkForRatioExpand_Exit3(thr, P1, P2)   /* tracepoint name: j9mm.401 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceTarok_checkForRatioContract_Entry(thr) do { /* tracepoint name: j9mm.402 */ \
	if ((unsigned char) j9mm_UtActive[402] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((402u << 8) | j9mm_UtActive[402]), NULL);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceTarok_checkForRatioContract_Entry(thr)   /* tracepoint name: j9mm.402 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceTarok_checkForRatioContract_Exit1(thr, P1) do { /* tracepoint name: j9mm.403 */ \
	if ((unsigned char) j9mm_UtActive[403] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((403u << 8) | j9mm_UtActive[403]), "\4", P1);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceTarok_checkForRatioContract_Exit1(thr, P1)   /* tracepoint name: j9mm.403 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceTarok_checkForRatioContract_Exit2(thr, P1) do { /* tracepoint name: j9mm.404 */ \
	if ((unsigned char) j9mm_UtActive[404] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((404u << 8) | j9mm_UtActive[404]), "\4", P1);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceTarok_checkForRatioContract_Exit2(thr, P1)   /* tracepoint name: j9mm.404 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceTarok_performExpand_Entry(thr, P1) do { /* tracepoint name: j9mm.405 */ \
	if ((unsigned char) j9mm_UtActive[405] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((405u << 8) | j9mm_UtActive[405]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceTarok_performExpand_Entry(thr, P1)   /* tracepoint name: j9mm.405 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceTarok_performExpand_Exit(thr, P1) do { /* tracepoint name: j9mm.406 */ \
	if ((unsigned char) j9mm_UtActive[406] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((406u << 8) | j9mm_UtActive[406]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceTarok_performExpand_Exit(thr, P1)   /* tracepoint name: j9mm.406 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceTarok_timeForHeapContract_Entry(thr, P1) do { /* tracepoint name: j9mm.407 */ \
	if ((unsigned char) j9mm_UtActive[407] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((407u << 8) | j9mm_UtActive[407]), "\377", P1);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceTarok_timeForHeapContract_Entry(thr, P1)   /* tracepoint name: j9mm.407 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceTarok_timeForHeapContract_Exit1(thr) do { /* tracepoint name: j9mm.408 */ \
	if ((unsigned char) j9mm_UtActive[408] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((408u << 8) | j9mm_UtActive[408]), NULL);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceTarok_timeForHeapContract_Exit1(thr)   /* tracepoint name: j9mm.408 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceTarok_timeForHeapContract_Exit2(thr) do { /* tracepoint name: j9mm.409 */ \
	if ((unsigned char) j9mm_UtActive[409] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((409u << 8) | j9mm_UtActive[409]), NULL);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceTarok_timeForHeapContract_Exit2(thr)   /* tracepoint name: j9mm.409 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceTarok_timeForHeapContract_Exit3(thr) do { /* tracepoint name: j9mm.410 */ \
	if ((unsigned char) j9mm_UtActive[410] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((410u << 8) | j9mm_UtActive[410]), NULL);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceTarok_timeForHeapContract_Exit3(thr)   /* tracepoint name: j9mm.410 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceTarok_timeForHeapContract_Exit4(thr, P1, P2) do { /* tracepoint name: j9mm.411 */ \
	if ((unsigned char) j9mm_UtActive[411] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((411u << 8) | j9mm_UtActive[411]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceTarok_timeForHeapContract_Exit4(thr, P1, P2)   /* tracepoint name: j9mm.411 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceTarok_timeForHeapContract_Exit5(thr) do { /* tracepoint name: j9mm.412 */ \
	if ((unsigned char) j9mm_UtActive[412] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((412u << 8) | j9mm_UtActive[412]), NULL);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceTarok_timeForHeapContract_Exit5(thr)   /* tracepoint name: j9mm.412 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceTarok_timeForHeapContract_Exit6(thr, P1, P2) do { /* tracepoint name: j9mm.413 */ \
	if ((unsigned char) j9mm_UtActive[413] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((413u << 8) | j9mm_UtActive[413]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceTarok_timeForHeapContract_Exit6(thr, P1, P2)   /* tracepoint name: j9mm.413 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceTarok_timeForHeapContract_Exit7(thr, P1) do { /* tracepoint name: j9mm.414 */ \
	if ((unsigned char) j9mm_UtActive[414] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((414u << 8) | j9mm_UtActive[414]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceTarok_timeForHeapContract_Exit7(thr, P1)   /* tracepoint name: j9mm.414 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceTarok_calculateTargetContractSize_Entry(thr, P1, P2) do { /* tracepoint name: j9mm.415 */ \
	if ((unsigned char) j9mm_UtActive[415] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((415u << 8) | j9mm_UtActive[415]), "\6\377", P1, P2);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceTarok_calculateTargetContractSize_Entry(thr, P1, P2)   /* tracepoint name: j9mm.415 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceTarok_calculateTargetContractSize_Event1(thr, P1) do { /* tracepoint name: j9mm.416 */ \
	if ((unsigned char) j9mm_UtActive[416] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((416u << 8) | j9mm_UtActive[416]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceTarok_calculateTargetContractSize_Event1(thr, P1)   /* tracepoint name: j9mm.416 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceTarok_calculateTargetContractSize_Event2(thr, P1, P2) do { /* tracepoint name: j9mm.417 */ \
	if ((unsigned char) j9mm_UtActive[417] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((417u << 8) | j9mm_UtActive[417]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceTarok_calculateTargetContractSize_Event2(thr, P1, P2)   /* tracepoint name: j9mm.417 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceTarok_calculateTargetContractSize_Exit1(thr, P1) do { /* tracepoint name: j9mm.418 */ \
	if ((unsigned char) j9mm_UtActive[418] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((418u << 8) | j9mm_UtActive[418]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceTarok_calculateTargetContractSize_Exit1(thr, P1)   /* tracepoint name: j9mm.418 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceTarok_performContract_Entry(thr, P1) do { /* tracepoint name: j9mm.419 */ \
	if ((unsigned char) j9mm_UtActive[419] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((419u << 8) | j9mm_UtActive[419]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceTarok_performContract_Entry(thr, P1)   /* tracepoint name: j9mm.419 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceTarok_performContract_Exit1(thr) do { /* tracepoint name: j9mm.420 */ \
	if ((unsigned char) j9mm_UtActive[420] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((420u << 8) | j9mm_UtActive[420]), NULL);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceTarok_performContract_Exit1(thr)   /* tracepoint name: j9mm.420 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceTarok_performContract_Event1(thr, P1, P2, P3) do { /* tracepoint name: j9mm.421 */ \
	if ((unsigned char) j9mm_UtActive[421] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((421u << 8) | j9mm_UtActive[421]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceTarok_performContract_Event1(thr, P1, P2, P3)   /* tracepoint name: j9mm.421 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceTarok_performContract_Event2(thr, P1, P2, P3) do { /* tracepoint name: j9mm.422 */ \
	if ((unsigned char) j9mm_UtActive[422] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((422u << 8) | j9mm_UtActive[422]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceTarok_performContract_Event2(thr, P1, P2, P3)   /* tracepoint name: j9mm.422 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceTarok_performContract_Exit2(thr) do { /* tracepoint name: j9mm.423 */ \
	if ((unsigned char) j9mm_UtActive[423] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((423u << 8) | j9mm_UtActive[423]), NULL);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceTarok_performContract_Exit2(thr)   /* tracepoint name: j9mm.423 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceTarok_performContract_Exit3(thr, P1) do { /* tracepoint name: j9mm.424 */ \
	if ((unsigned char) j9mm_UtActive[424] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((424u << 8) | j9mm_UtActive[424]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceTarok_performContract_Exit3(thr, P1)   /* tracepoint name: j9mm.424 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceTarok_calculateCollectorExpandSize_Entry(thr) do { /* tracepoint name: j9mm.425 */ \
	if ((unsigned char) j9mm_UtActive[425] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((425u << 8) | j9mm_UtActive[425]), NULL);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceTarok_calculateCollectorExpandSize_Entry(thr)   /* tracepoint name: j9mm.425 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceTarok_calculateCollectorExpandSize_Exit1(thr, P1) do { /* tracepoint name: j9mm.426 */ \
	if ((unsigned char) j9mm_UtActive[426] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((426u << 8) | j9mm_UtActive[426]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceTarok_calculateCollectorExpandSize_Exit1(thr, P1)   /* tracepoint name: j9mm.426 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceTarok_collectorExpand_Entry(thr) do { /* tracepoint name: j9mm.427 */ \
	if ((unsigned char) j9mm_UtActive[427] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((427u << 8) | j9mm_UtActive[427]), NULL);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceTarok_collectorExpand_Entry(thr)   /* tracepoint name: j9mm.427 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceTarok_collectorExpand_Exit(thr, P1) do { /* tracepoint name: j9mm.428 */ \
	if ((unsigned char) j9mm_UtActive[428] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((428u << 8) | j9mm_UtActive[428]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceTarok_collectorExpand_Exit(thr, P1)   /* tracepoint name: j9mm.428 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_IncrementalGenerationalGC_globalGCHookSysStart(thr, P1) do { /* tracepoint name: j9mm.429 */ \
	if ((unsigned char) j9mm_UtActive[429] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((429u << 8) | j9mm_UtActive[429]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_IncrementalGenerationalGC_globalGCHookSysStart(thr, P1)   /* tracepoint name: j9mm.429 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_IncrementalGenerationalGC_globalGCHookSysEnd(thr, P1) do { /* tracepoint name: j9mm.430 */ \
	if ((unsigned char) j9mm_UtActive[430] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((430u << 8) | j9mm_UtActive[430]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_IncrementalGenerationalGC_globalGCHookSysEnd(thr, P1)   /* tracepoint name: j9mm.430 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_IncrementalGenerationalGC_globalGCHookAFStart(thr, P1) do { /* tracepoint name: j9mm.431 */ \
	if ((unsigned char) j9mm_UtActive[431] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((431u << 8) | j9mm_UtActive[431]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_IncrementalGenerationalGC_globalGCHookAFStart(thr, P1)   /* tracepoint name: j9mm.431 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_IncrementalGenerationalGC_globalGCHookAFEnd(thr, P1) do { /* tracepoint name: j9mm.432 */ \
	if ((unsigned char) j9mm_UtActive[432] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((432u << 8) | j9mm_UtActive[432]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_IncrementalGenerationalGC_globalGCHookAFEnd(thr, P1)   /* tracepoint name: j9mm.432 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_IncrementalGenerationalGC_globalGCHookIncrementStart(thr, P1) do { /* tracepoint name: j9mm.433 */ \
	if ((unsigned char) j9mm_UtActive[433] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((433u << 8) | j9mm_UtActive[433]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_IncrementalGenerationalGC_globalGCHookIncrementStart(thr, P1)   /* tracepoint name: j9mm.433 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_IncrementalGenerationalGC_globalGCHookIncrementEnd(thr, P1) do { /* tracepoint name: j9mm.434 */ \
	if ((unsigned char) j9mm_UtActive[434] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((434u << 8) | j9mm_UtActive[434]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_IncrementalGenerationalGC_globalGCHookIncrementEnd(thr, P1)   /* tracepoint name: j9mm.434 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_PhysicalSubArenaRegionBased_validateNumaSymmetry_Entry(thr) do { /* tracepoint name: j9mm.435 */ \
	if ((unsigned char) j9mm_UtActive[435] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((435u << 8) | j9mm_UtActive[435]), NULL);} \
	} while(0)
#else
#define Trc_MM_PhysicalSubArenaRegionBased_validateNumaSymmetry_Entry(thr)   /* tracepoint name: j9mm.435 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_PhysicalSubArenaRegionBased_validateNumaSymmetry_NodeSummary(thr, P1, P2) do { /* tracepoint name: j9mm.436 */ \
	if ((unsigned char) j9mm_UtActive[436] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((436u << 8) | j9mm_UtActive[436]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_PhysicalSubArenaRegionBased_validateNumaSymmetry_NodeSummary(thr, P1, P2)   /* tracepoint name: j9mm.436 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_PhysicalSubArenaRegionBased_validateNumaSymmetry_TotalSummary(thr, P1, P2, P3, P4) do { /* tracepoint name: j9mm.437 */ \
	if ((unsigned char) j9mm_UtActive[437] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((437u << 8) | j9mm_UtActive[437]), "\6\6\6\6", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_MM_PhysicalSubArenaRegionBased_validateNumaSymmetry_TotalSummary(thr, P1, P2, P3, P4)   /* tracepoint name: j9mm.437 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_PhysicalSubArenaRegionBased_validateNumaSymmetry_Exit(thr) do { /* tracepoint name: j9mm.438 */ \
	if ((unsigned char) j9mm_UtActive[438] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((438u << 8) | j9mm_UtActive[438]), NULL);} \
	} while(0)
#else
#define Trc_MM_PhysicalSubArenaRegionBased_validateNumaSymmetry_Exit(thr)   /* tracepoint name: j9mm.438 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SchedulingDelegate_heapReconfigured_Entry(thr, P1, P2) do { /* tracepoint name: j9mm.439 */ \
	if ((unsigned char) j9mm_UtActive[439] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((439u << 8) | j9mm_UtActive[439]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_SchedulingDelegate_heapReconfigured_Entry(thr, P1, P2)   /* tracepoint name: j9mm.439 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SchedulingDelegate_heapReconfigured_Exit(thr, P1, P2, P3) do { /* tracepoint name: j9mm.440 */ \
	if ((unsigned char) j9mm_UtActive[440] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((440u << 8) | j9mm_UtActive[440]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_MM_SchedulingDelegate_heapReconfigured_Exit(thr, P1, P2, P3)   /* tracepoint name: j9mm.440 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CopyForwardScheme_scanPointerArrayObjectSlotsSplit_failedToAllocateCache(thr, P1) do { /* tracepoint name: j9mm.441 */ \
	if ((unsigned char) j9mm_UtActive[441] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((441u << 8) | j9mm_UtActive[441]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_CopyForwardScheme_scanPointerArrayObjectSlotsSplit_failedToAllocateCache(thr, P1)   /* tracepoint name: j9mm.441 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_identifyClassLoadersToUnload_Entry(thr) do { /* tracepoint name: j9mm.442 */ \
	if ((unsigned char) j9mm_UtActive[442] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((442u << 8) | j9mm_UtActive[442]), NULL);} \
	} while(0)
#else
#define Trc_MM_identifyClassLoadersToUnload_Entry(thr)   /* tracepoint name: j9mm.442 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_identifyClassLoadersToUnload_Exit(thr) do { /* tracepoint name: j9mm.443 */ \
	if ((unsigned char) j9mm_UtActive[443] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((443u << 8) | j9mm_UtActive[443]), NULL);} \
	} while(0)
#else
#define Trc_MM_identifyClassLoadersToUnload_Exit(thr)   /* tracepoint name: j9mm.443 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_IncrementalGenerationalGC_unloadDeadClassLoaders_entry(thr) do { /* tracepoint name: j9mm.444 */ \
	if ((unsigned char) j9mm_UtActive[444] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((444u << 8) | j9mm_UtActive[444]), NULL);} \
	} while(0)
#else
#define Trc_MM_IncrementalGenerationalGC_unloadDeadClassLoaders_entry(thr)   /* tracepoint name: j9mm.444 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_IncrementalGenerationalGC_unloadDeadClassLoaders_exit(thr) do { /* tracepoint name: j9mm.445 */ \
	if ((unsigned char) j9mm_UtActive[445] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((445u << 8) | j9mm_UtActive[445]), NULL);} \
	} while(0)
#else
#define Trc_MM_IncrementalGenerationalGC_unloadDeadClassLoaders_exit(thr)   /* tracepoint name: j9mm.445 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_FrequentObjectStats_AllocationCacheIndexableObjectAllocation(thr, P1, P2, P3, P4, P5, P6, P7) do { /* tracepoint name: j9mm.446 */ \
	if ((unsigned char) j9mm_UtActive[446] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((446u << 8) | j9mm_UtActive[446]), "\6\12\377\12\377\6\6", P1, P2, P3, P4, P5, P6, P7);} \
	} while(0)
#else
#define Trc_MM_FrequentObjectStats_AllocationCacheIndexableObjectAllocation(thr, P1, P2, P3, P4, P5, P6, P7)   /* tracepoint name: j9mm.446 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_FrequentObjectStats_AllocationCacheObjectAllocation(thr, P1, P2, P3, P4, P5, P6) do { /* tracepoint name: j9mm.447 */ \
	if ((unsigned char) j9mm_UtActive[447] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((447u << 8) | j9mm_UtActive[447]), "\6\12\377\6\6\6", P1, P2, P3, P4, P5, P6);} \
	} while(0)
#else
#define Trc_MM_FrequentObjectStats_AllocationCacheObjectAllocation(thr, P1, P2, P3, P4, P5, P6)   /* tracepoint name: j9mm.447 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SchedulingDelegate_partialGarbageCollectCompleted_Entry(thr, P1, P2) do { /* tracepoint name: j9mm.448 */ \
	if ((unsigned char) j9mm_UtActive[448] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((448u << 8) | j9mm_UtActive[448]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_SchedulingDelegate_partialGarbageCollectCompleted_Entry(thr, P1, P2)   /* tracepoint name: j9mm.448 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SchedulingDelegate_partialGarbageCollectCompleted_stats(thr, P1, P2, P3, P4, P5) do { /* tracepoint name: j9mm.449 */ \
	if ((unsigned char) j9mm_UtActive[449] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((449u << 8) | j9mm_UtActive[449]), "\6\6\6\6\6", P1, P2, P3, P4, P5);} \
	} while(0)
#else
#define Trc_MM_SchedulingDelegate_partialGarbageCollectCompleted_stats(thr, P1, P2, P3, P4, P5)   /* tracepoint name: j9mm.449 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SchedulingDelegate_partialGarbageCollectCompleted_Exit(thr) do { /* tracepoint name: j9mm.450 */ \
	if ((unsigned char) j9mm_UtActive[450] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((450u << 8) | j9mm_UtActive[450]), NULL);} \
	} while(0)
#else
#define Trc_MM_SchedulingDelegate_partialGarbageCollectCompleted_Exit(thr)   /* tracepoint name: j9mm.450 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CollectionSetDelegate_createNurseryCollectionSet_Entry(thr, P1) do { /* tracepoint name: j9mm.451 */ \
	if ((unsigned char) j9mm_UtActive[451] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((451u << 8) | j9mm_UtActive[451]), "\377", P1);} \
	} while(0)
#else
#define Trc_MM_CollectionSetDelegate_createNurseryCollectionSet_Entry(thr, P1)   /* tracepoint name: j9mm.451 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CollectionSetDelegate_createNurseryCollectionSet_Exit(thr, P1) do { /* tracepoint name: j9mm.452 */ \
	if ((unsigned char) j9mm_UtActive[452] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((452u << 8) | j9mm_UtActive[452]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_CollectionSetDelegate_createNurseryCollectionSet_Exit(thr, P1)   /* tracepoint name: j9mm.452 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CollectionSetDelegate_selectRegionsForBudget_Entry(thr, P1) do { /* tracepoint name: j9mm.453 */ \
	if ((unsigned char) j9mm_UtActive[453] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((453u << 8) | j9mm_UtActive[453]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_CollectionSetDelegate_selectRegionsForBudget_Entry(thr, P1)   /* tracepoint name: j9mm.453 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CollectionSetDelegate_selectRegionsForBudget_Exit(thr, P1) do { /* tracepoint name: j9mm.454 */ \
	if ((unsigned char) j9mm_UtActive[454] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((454u << 8) | j9mm_UtActive[454]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_CollectionSetDelegate_selectRegionsForBudget_Exit(thr, P1)   /* tracepoint name: j9mm.454 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ReclaimDelegate_tagRegionsBeforeCompact_Entry(thr) do { /* tracepoint name: j9mm.455 */ \
	if ((unsigned char) j9mm_UtActive[455] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((455u << 8) | j9mm_UtActive[455]), NULL);} \
	} while(0)
#else
#define Trc_MM_ReclaimDelegate_tagRegionsBeforeCompact_Entry(thr)   /* tracepoint name: j9mm.455 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ReclaimDelegate_tagRegionsBeforeCompact_Exit(thr, P1, P2) do { /* tracepoint name: j9mm.456 */ \
	if ((unsigned char) j9mm_UtActive[456] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((456u << 8) | j9mm_UtActive[456]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_ReclaimDelegate_tagRegionsBeforeCompact_Exit(thr, P1, P2)   /* tracepoint name: j9mm.456 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ReclaimDelegate_deriveCompactScore_Entry(thr) do { /* tracepoint name: j9mm.457 */ \
	if ((unsigned char) j9mm_UtActive[457] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((457u << 8) | j9mm_UtActive[457]), NULL);} \
	} while(0)
#else
#define Trc_MM_ReclaimDelegate_deriveCompactScore_Entry(thr)   /* tracepoint name: j9mm.457 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ReclaimDelegate_tagRegionsBeforeCompactWithWorkGoal_searching(thr, P1) do { /* tracepoint name: j9mm.459 */ \
	if ((unsigned char) j9mm_UtActive[459] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((459u << 8) | j9mm_UtActive[459]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_ReclaimDelegate_tagRegionsBeforeCompactWithWorkGoal_searching(thr, P1)   /* tracepoint name: j9mm.459 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CompactGroupPersistentStats_deriveWeightedSurvivalRates_Entry(thr, P1) do { /* tracepoint name: j9mm.460 */ \
	if ((unsigned char) j9mm_UtActive[460] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((460u << 8) | j9mm_UtActive[460]), "\7", P1);} \
	} while(0)
#else
#define Trc_MM_CompactGroupPersistentStats_deriveWeightedSurvivalRates_Entry(thr, P1)   /* tracepoint name: j9mm.460 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CompactGroupPersistentStats_deriveWeightedSurvivalRates_group(thr, P1, P2, P3, P4) do { /* tracepoint name: j9mm.461 */ \
	if ((unsigned char) j9mm_UtActive[461] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((461u << 8) | j9mm_UtActive[461]), "\6\6\7\7", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_MM_CompactGroupPersistentStats_deriveWeightedSurvivalRates_group(thr, P1, P2, P3, P4)   /* tracepoint name: j9mm.461 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CompactGroupPersistentStats_deriveWeightedSurvivalRates_Exit(thr) do { /* tracepoint name: j9mm.462 */ \
	if ((unsigned char) j9mm_UtActive[462] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((462u << 8) | j9mm_UtActive[462]), NULL);} \
	} while(0)
#else
#define Trc_MM_CompactGroupPersistentStats_deriveWeightedSurvivalRates_Exit(thr)   /* tracepoint name: j9mm.462 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_GMPCycleStart(thr) do { /* tracepoint name: j9mm.463 */ \
	if ((unsigned char) j9mm_UtActive[463] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((463u << 8) | j9mm_UtActive[463]), NULL);} \
	} while(0)
#else
#define Trc_MM_GMPCycleStart(thr)   /* tracepoint name: j9mm.463 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_GMPCycleEnd(thr) do { /* tracepoint name: j9mm.464 */ \
	if ((unsigned char) j9mm_UtActive[464] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((464u << 8) | j9mm_UtActive[464]), NULL);} \
	} while(0)
#else
#define Trc_MM_GMPCycleEnd(thr)   /* tracepoint name: j9mm.464 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CopyForwardStart(thr) do { /* tracepoint name: j9mm.465 */ \
	if ((unsigned char) j9mm_UtActive[465] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((465u << 8) | j9mm_UtActive[465]), NULL);} \
	} while(0)
#else
#define Trc_MM_CopyForwardStart(thr)   /* tracepoint name: j9mm.465 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CopyForwardEnd(thr) do { /* tracepoint name: j9mm.466 */ \
	if ((unsigned char) j9mm_UtActive[466] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((466u << 8) | j9mm_UtActive[466]), NULL);} \
	} while(0)
#else
#define Trc_MM_CopyForwardEnd(thr)   /* tracepoint name: j9mm.466 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CycleStart(thr, P1, P2) do { /* tracepoint name: j9mm.467 */ \
	if ((unsigned char) j9mm_UtActive[467] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((467u << 8) | j9mm_UtActive[467]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_CycleStart(thr, P1, P2)   /* tracepoint name: j9mm.467 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CycleEnd(thr, P1, P2) do { /* tracepoint name: j9mm.468 */ \
	if ((unsigned char) j9mm_UtActive[468] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((468u << 8) | j9mm_UtActive[468]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_CycleEnd(thr, P1, P2)   /* tracepoint name: j9mm.468 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AllocationFailureCycleStart(thr, P1, P2, P3, P4, P5, P6, P7) do { /* tracepoint name: j9mm.469 */ \
	if ((unsigned char) j9mm_UtActive[469] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((469u << 8) | j9mm_UtActive[469]), "\6\6\6\6\6\6\6", P1, P2, P3, P4, P5, P6, P7);} \
	} while(0)
#else
#define Trc_MM_AllocationFailureCycleStart(thr, P1, P2, P3, P4, P5, P6, P7)   /* tracepoint name: j9mm.469 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AllocationFailureCycleEnd(thr, P1, P2, P3, P4, P5, P6) do { /* tracepoint name: j9mm.470 */ \
	if ((unsigned char) j9mm_UtActive[470] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((470u << 8) | j9mm_UtActive[470]), "\6\6\6\6\6\6", P1, P2, P3, P4, P5, P6);} \
	} while(0)
#else
#define Trc_MM_AllocationFailureCycleEnd(thr, P1, P2, P3, P4, P5, P6)   /* tracepoint name: j9mm.470 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AcquiredExclusiveToSatisfyAllocation(thr, P1, P2) do { /* tracepoint name: j9mm.471 */ \
	if ((unsigned char) j9mm_UtActive[471] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((471u << 8) | j9mm_UtActive[471]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_AcquiredExclusiveToSatisfyAllocation(thr, P1, P2)   /* tracepoint name: j9mm.471 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ReclaimDelegate_runReclaimForAbortedCopyForward_Entry(thr, P1) do { /* tracepoint name: j9mm.472 */ \
	if ((unsigned char) j9mm_UtActive[472] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((472u << 8) | j9mm_UtActive[472]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_ReclaimDelegate_runReclaimForAbortedCopyForward_Entry(thr, P1)   /* tracepoint name: j9mm.472 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ReclaimDelegate_runReclaimForAbortedCopyForward_Exit(thr, P1, P2) do { /* tracepoint name: j9mm.473 */ \
	if ((unsigned char) j9mm_UtActive[473] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((473u << 8) | j9mm_UtActive[473]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_ReclaimDelegate_runReclaimForAbortedCopyForward_Exit(thr, P1, P2)   /* tracepoint name: j9mm.473 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_GlobalGCStart(thr, P1) do { /* tracepoint name: j9mm.474 */ \
	if ((unsigned char) j9mm_UtActive[474] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((474u << 8) | j9mm_UtActive[474]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_GlobalGCStart(thr, P1)   /* tracepoint name: j9mm.474 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_GlobalGCEnd(thr, P1, P2, P3, P4) do { /* tracepoint name: j9mm.475 */ \
	if ((unsigned char) j9mm_UtActive[475] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((475u << 8) | j9mm_UtActive[475]), "\6\6\6\6", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_MM_GlobalGCEnd(thr, P1, P2, P3, P4)   /* tracepoint name: j9mm.475 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_IncrementalGenerationalGC_partialGarbageCollectUsingCopyForward_Entry(thr) do { /* tracepoint name: j9mm.476 */ \
	if ((unsigned char) j9mm_UtActive[476] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((476u << 8) | j9mm_UtActive[476]), NULL);} \
	} while(0)
#else
#define Trc_MM_IncrementalGenerationalGC_partialGarbageCollectUsingCopyForward_Entry(thr)   /* tracepoint name: j9mm.476 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_IncrementalGenerationalGC_partialGarbageCollectUsingCopyForward_ChooseCompactor(thr, P1, P2, P3, P4) do { /* tracepoint name: j9mm.477 */ \
	if ((unsigned char) j9mm_UtActive[477] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((477u << 8) | j9mm_UtActive[477]), "\6\6\6\377", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_MM_IncrementalGenerationalGC_partialGarbageCollectUsingCopyForward_ChooseCompactor(thr, P1, P2, P3, P4)   /* tracepoint name: j9mm.477 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_IncrementalGenerationalGC_partialGarbageCollectUsingCopyForward_Exit(thr) do { /* tracepoint name: j9mm.478 */ \
	if ((unsigned char) j9mm_UtActive[478] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((478u << 8) | j9mm_UtActive[478]), NULL);} \
	} while(0)
#else
#define Trc_MM_IncrementalGenerationalGC_partialGarbageCollectUsingCopyForward_Exit(thr)   /* tracepoint name: j9mm.478 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Assert_MM_validStackSlot(P1) do { /* tracepoint name: j9mm.479 */ \
	if ((unsigned char) j9mm_UtActive[479] != 0){ \
		if ((P1)) { /* assertion satisfied */ } else { \
			if (j9mm_UtModuleInfo.intf != NULL) { \
				j9mm_UtModuleInfo.intf->Trace((void *)NULL, &j9mm_UtModuleInfo, (UT_SPECIAL_ASSERTION | (479u << 8) | j9mm_UtActive[479]), "\377\4\377", __FILE__, __LINE__, UT_STR(((P1)))); \
				Trace_Unreachable(); \
			} else { \
				fprintf(stderr, "** ASSERTION FAILED ** j9mm.479 at %s:%d Assert_MM_validStackSlot%s\n", __FILE__, __LINE__, UT_STR(((P1)))); \
			} \
		}} \
	} while(0)
#else
#define Assert_MM_validStackSlot(P1)   /* tracepoint name: j9mm.479 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_StackSlotValidator_reportStackSlot_Entry(thr, P1) do { /* tracepoint name: j9mm.480 */ \
	if ((unsigned char) j9mm_UtActive[480] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((480u << 8) | j9mm_UtActive[480]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_StackSlotValidator_reportStackSlot_Entry(thr, P1)   /* tracepoint name: j9mm.480 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_StackSlotValidator_thread(thr, P1, P2) do { /* tracepoint name: j9mm.481 */ \
	if ((unsigned char) j9mm_UtActive[481] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((481u << 8) | j9mm_UtActive[481]), "\377\377", P1, P2);} \
	} while(0)
#else
#define Trc_MM_StackSlotValidator_thread(thr, P1, P2)   /* tracepoint name: j9mm.481 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_StackSlotValidator_OSlot(thr, P1) do { /* tracepoint name: j9mm.482 */ \
	if ((unsigned char) j9mm_UtActive[482] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((482u << 8) | j9mm_UtActive[482]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_StackSlotValidator_OSlot(thr, P1)   /* tracepoint name: j9mm.482 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_StackSlotValidator_OSlotValue(thr, P1) do { /* tracepoint name: j9mm.483 */ \
	if ((unsigned char) j9mm_UtActive[483] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((483u << 8) | j9mm_UtActive[483]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_StackSlotValidator_OSlotValue(thr, P1)   /* tracepoint name: j9mm.483 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_StackSlotValidator_PC(thr, P1) do { /* tracepoint name: j9mm.484 */ \
	if ((unsigned char) j9mm_UtActive[484] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((484u << 8) | j9mm_UtActive[484]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_StackSlotValidator_PC(thr, P1)   /* tracepoint name: j9mm.484 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_StackSlotValidator_framesWalked(thr, P1) do { /* tracepoint name: j9mm.485 */ \
	if ((unsigned char) j9mm_UtActive[485] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((485u << 8) | j9mm_UtActive[485]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_StackSlotValidator_framesWalked(thr, P1)   /* tracepoint name: j9mm.485 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_StackSlotValidator_arg0EA(thr, P1) do { /* tracepoint name: j9mm.486 */ \
	if ((unsigned char) j9mm_UtActive[486] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((486u << 8) | j9mm_UtActive[486]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_StackSlotValidator_arg0EA(thr, P1)   /* tracepoint name: j9mm.486 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_StackSlotValidator_walkSP(thr, P1) do { /* tracepoint name: j9mm.487 */ \
	if ((unsigned char) j9mm_UtActive[487] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((487u << 8) | j9mm_UtActive[487]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_StackSlotValidator_walkSP(thr, P1)   /* tracepoint name: j9mm.487 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_StackSlotValidator_literals(thr, P1) do { /* tracepoint name: j9mm.488 */ \
	if ((unsigned char) j9mm_UtActive[488] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((488u << 8) | j9mm_UtActive[488]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_StackSlotValidator_literals(thr, P1)   /* tracepoint name: j9mm.488 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_StackSlotValidator_jitInfo(thr, P1) do { /* tracepoint name: j9mm.489 */ \
	if ((unsigned char) j9mm_UtActive[489] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((489u << 8) | j9mm_UtActive[489]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_StackSlotValidator_jitInfo(thr, P1)   /* tracepoint name: j9mm.489 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_StackSlotValidator_method(thr, P1, P2, P3, P4, P5, P6, P7, P8) do { /* tracepoint name: j9mm.490 */ \
	if ((unsigned char) j9mm_UtActive[490] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((490u << 8) | j9mm_UtActive[490]), "\6\12\377\12\377\12\377\377", P1, P2, P3, P4, P5, P6, P7, P8);} \
	} while(0)
#else
#define Trc_MM_StackSlotValidator_method(thr, P1, P2, P3, P4, P5, P6, P7, P8)   /* tracepoint name: j9mm.490 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_StackSlotValidator_reportStackSlot_Exit(thr) do { /* tracepoint name: j9mm.491 */ \
	if ((unsigned char) j9mm_UtActive[491] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((491u << 8) | j9mm_UtActive[491]), NULL);} \
	} while(0)
#else
#define Trc_MM_StackSlotValidator_reportStackSlot_Exit(thr)   /* tracepoint name: j9mm.491 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CycleContinue(thr, P1, P2, P3) do { /* tracepoint name: j9mm.492 */ \
	if ((unsigned char) j9mm_UtActive[492] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((492u << 8) | j9mm_UtActive[492]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_MM_CycleContinue(thr, P1, P2, P3)   /* tracepoint name: j9mm.492 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_StackSlotValidator_stack(thr, P1, P2) do { /* tracepoint name: j9mm.493 */ \
	if ((unsigned char) j9mm_UtActive[493] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((493u << 8) | j9mm_UtActive[493]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_StackSlotValidator_stack(thr, P1, P2)   /* tracepoint name: j9mm.493 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CopyForwardScheme_scanObject_invalid(thr, P1, P2) do { /* tracepoint name: j9mm.494 */ \
	if ((unsigned char) j9mm_UtActive[494] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((494u << 8) | j9mm_UtActive[494]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_CopyForwardScheme_scanObject_invalid(thr, P1, P2)   /* tracepoint name: j9mm.494 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_GlobalMarkCardScrubber_scrubObject_invalid(thr, P1) do { /* tracepoint name: j9mm.495 */ \
	if ((unsigned char) j9mm_UtActive[495] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((495u << 8) | j9mm_UtActive[495]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_GlobalMarkCardScrubber_scrubObject_invalid(thr, P1)   /* tracepoint name: j9mm.495 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_GlobalMarkingScheme_scanObject_invalid(thr, P1, P2) do { /* tracepoint name: j9mm.496 */ \
	if ((unsigned char) j9mm_UtActive[496] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((496u << 8) | j9mm_UtActive[496]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_GlobalMarkingScheme_scanObject_invalid(thr, P1, P2)   /* tracepoint name: j9mm.496 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_PartialMarkingScheme_scanObject_invalid(thr, P1, P2) do { /* tracepoint name: j9mm.497 */ \
	if ((unsigned char) j9mm_UtActive[497] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((497u << 8) | j9mm_UtActive[497]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_PartialMarkingScheme_scanObject_invalid(thr, P1, P2)   /* tracepoint name: j9mm.497 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_WriteOnceCompactor_fixupObject_invalid(thr, P1, P2) do { /* tracepoint name: j9mm.498 */ \
	if ((unsigned char) j9mm_UtActive[498] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((498u << 8) | j9mm_UtActive[498]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_WriteOnceCompactor_fixupObject_invalid(thr, P1, P2)   /* tracepoint name: j9mm.498 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_RegionValidator_reportRegion_Entry(thr, P1) do { /* tracepoint name: j9mm.499 */ \
	if ((unsigned char) j9mm_UtActive[499] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((499u << 8) | j9mm_UtActive[499]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_RegionValidator_reportRegion_Entry(thr, P1)   /* tracepoint name: j9mm.499 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_RegionValidator_leafRegion(thr, P1, P2, P3, P4, P5, P6) do { /* tracepoint name: j9mm.500 */ \
	if ((unsigned char) j9mm_UtActive[500] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((500u << 8) | j9mm_UtActive[500]), "\377\6\6\6\6\6", P1, P2, P3, P4, P5, P6);} \
	} while(0)
#else
#define Trc_MM_RegionValidator_leafRegion(thr, P1, P2, P3, P4, P5, P6)   /* tracepoint name: j9mm.500 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_RegionValidator_objectRegion(thr, P1, P2, P3, P4, P5) do { /* tracepoint name: j9mm.501 */ \
	if ((unsigned char) j9mm_UtActive[501] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((501u << 8) | j9mm_UtActive[501]), "\377\6\6\6\6", P1, P2, P3, P4, P5);} \
	} while(0)
#else
#define Trc_MM_RegionValidator_objectRegion(thr, P1, P2, P3, P4, P5)   /* tracepoint name: j9mm.501 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_RegionValidator_reportRegion_Exit(thr) do { /* tracepoint name: j9mm.502 */ \
	if ((unsigned char) j9mm_UtActive[502] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((502u << 8) | j9mm_UtActive[502]), NULL);} \
	} while(0)
#else
#define Trc_MM_RegionValidator_reportRegion_Exit(thr)   /* tracepoint name: j9mm.502 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_RegionValidator_previousLeafRegion(thr, P1, P2, P3, P4, P5) do { /* tracepoint name: j9mm.503 */ \
	if ((unsigned char) j9mm_UtActive[503] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((503u << 8) | j9mm_UtActive[503]), "\6\6\6\6\6", P1, P2, P3, P4, P5);} \
	} while(0)
#else
#define Trc_MM_RegionValidator_previousLeafRegion(thr, P1, P2, P3, P4, P5)   /* tracepoint name: j9mm.503 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_RegionValidator_previousObjectRegion(thr, P1, P2, P3, P4) do { /* tracepoint name: j9mm.504 */ \
	if ((unsigned char) j9mm_UtActive[504] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((504u << 8) | j9mm_UtActive[504]), "\6\6\6\6", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_MM_RegionValidator_previousObjectRegion(thr, P1, P2, P3, P4)   /* tracepoint name: j9mm.504 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_VirtualMemory_commitMemory_success(P1, P2) do { /* tracepoint name: j9mm.505 */ \
	if ((unsigned char) j9mm_UtActive[505] != 0){ \
		j9mm_UtModuleInfo.intf->Trace((void *)NULL, &j9mm_UtModuleInfo, ((505u << 8) | j9mm_UtActive[505]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_VirtualMemory_commitMemory_success(P1, P2)   /* tracepoint name: j9mm.505 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_VirtualMemory_commitMemory_failure(P1, P2) do { /* tracepoint name: j9mm.506 */ \
	if ((unsigned char) j9mm_UtActive[506] != 0){ \
		j9mm_UtModuleInfo.intf->Trace((void *)NULL, &j9mm_UtModuleInfo, ((506u << 8) | j9mm_UtActive[506]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_VirtualMemory_commitMemory_failure(P1, P2)   /* tracepoint name: j9mm.506 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CopyForwardScheme_convertTailCandidateToSurvivorRegion_Entry(thr, P1, P2) do { /* tracepoint name: j9mm.507 */ \
	if ((unsigned char) j9mm_UtActive[507] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((507u << 8) | j9mm_UtActive[507]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_CopyForwardScheme_convertTailCandidateToSurvivorRegion_Entry(thr, P1, P2)   /* tracepoint name: j9mm.507 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CopyForwardScheme_convertTailCandidateToSurvivorRegion_Exit(thr) do { /* tracepoint name: j9mm.508 */ \
	if ((unsigned char) j9mm_UtActive[508] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((508u << 8) | j9mm_UtActive[508]), NULL);} \
	} while(0)
#else
#define Trc_MM_CopyForwardScheme_convertTailCandidateToSurvivorRegion_Exit(thr)   /* tracepoint name: j9mm.508 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CopyForwardScheme_rememberAndResetReferenceLists_rememberWeak(thr, P1, P2) do { /* tracepoint name: j9mm.509 */ \
	if ((unsigned char) j9mm_UtActive[509] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((509u << 8) | j9mm_UtActive[509]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_CopyForwardScheme_rememberAndResetReferenceLists_rememberWeak(thr, P1, P2)   /* tracepoint name: j9mm.509 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CopyForwardScheme_rememberAndResetReferenceLists_rememberSoft(thr, P1, P2) do { /* tracepoint name: j9mm.510 */ \
	if ((unsigned char) j9mm_UtActive[510] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((510u << 8) | j9mm_UtActive[510]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_CopyForwardScheme_rememberAndResetReferenceLists_rememberSoft(thr, P1, P2)   /* tracepoint name: j9mm.510 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CopyForwardScheme_rememberAndResetReferenceLists_rememberPhantom(thr, P1, P2) do { /* tracepoint name: j9mm.511 */ \
	if ((unsigned char) j9mm_UtActive[511] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((511u << 8) | j9mm_UtActive[511]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_CopyForwardScheme_rememberAndResetReferenceLists_rememberPhantom(thr, P1, P2)   /* tracepoint name: j9mm.511 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceTarok_replenishAllocationContextFailed_Entry(thr, P1, P2, P3) do { /* tracepoint name: j9mm.512 */ \
	if ((unsigned char) j9mm_UtActive[512] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((512u << 8) | j9mm_UtActive[512]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceTarok_replenishAllocationContextFailed_Entry(thr, P1, P2, P3)   /* tracepoint name: j9mm.512 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceTarok_replenishAllocationContextFailed_didPerformTaxationAndReplenish(thr, P1, P2, P3, P4) do { /* tracepoint name: j9mm.513 */ \
	if ((unsigned char) j9mm_UtActive[513] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((513u << 8) | j9mm_UtActive[513]), "\6\6\6\6", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceTarok_replenishAllocationContextFailed_didPerformTaxationAndReplenish(thr, P1, P2, P3, P4)   /* tracepoint name: j9mm.513 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceTarok_replenishAllocationContextFailed_didPerformResizeAndReplenish(thr, P1, P2, P3, P4) do { /* tracepoint name: j9mm.514 */ \
	if ((unsigned char) j9mm_UtActive[514] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((514u << 8) | j9mm_UtActive[514]), "\6\6\6\6", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceTarok_replenishAllocationContextFailed_didPerformResizeAndReplenish(thr, P1, P2, P3, P4)   /* tracepoint name: j9mm.514 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceTarok_replenishAllocationContextFailed_didPerformCollect(thr, P1, P2, P3, P4) do { /* tracepoint name: j9mm.515 */ \
	if ((unsigned char) j9mm_UtActive[515] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((515u << 8) | j9mm_UtActive[515]), "\6\6\6\6", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceTarok_replenishAllocationContextFailed_didPerformCollect(thr, P1, P2, P3, P4)   /* tracepoint name: j9mm.515 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceTarok_replenishAllocationContextFailed_didPerformAggressiveCollect(thr, P1, P2, P3, P4) do { /* tracepoint name: j9mm.516 */ \
	if ((unsigned char) j9mm_UtActive[516] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((516u << 8) | j9mm_UtActive[516]), "\6\6\6\6", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceTarok_replenishAllocationContextFailed_didPerformAggressiveCollect(thr, P1, P2, P3, P4)   /* tracepoint name: j9mm.516 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_MemorySubSpaceTarok_replenishAllocationContextFailed_Exit(thr, P1) do { /* tracepoint name: j9mm.517 */ \
	if ((unsigned char) j9mm_UtActive[517] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((517u << 8) | j9mm_UtActive[517]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_MemorySubSpaceTarok_replenishAllocationContextFailed_Exit(thr, P1)   /* tracepoint name: j9mm.517 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AllocationContextTarok_Deprecated_acquireMPAOLRegionFromNode_Entry(thr, P1, P2) do { /* tracepoint name: j9mm.518 */ \
	if ((unsigned char) j9mm_UtActive[518] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((518u << 8) | j9mm_UtActive[518]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_AllocationContextTarok_Deprecated_acquireMPAOLRegionFromNode_Entry(thr, P1, P2)   /* tracepoint name: j9mm.518 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AllocationContextTarok_Deprecated_acquireMPAOLRegionFromNode_Exit(thr, P1) do { /* tracepoint name: j9mm.519 */ \
	if ((unsigned char) j9mm_UtActive[519] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((519u << 8) | j9mm_UtActive[519]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_AllocationContextTarok_Deprecated_acquireMPAOLRegionFromNode_Exit(thr, P1)   /* tracepoint name: j9mm.519 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_RuntimeExecManager_jniNativeBindHook_foundMethod(thr, P1, P2, P3, P4, P5, P6) do { /* tracepoint name: j9mm.520 */ \
	if ((unsigned char) j9mm_UtActive[520] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((520u << 8) | j9mm_UtActive[520]), "\12\377\12\377\12\377", P1, P2, P3, P4, P5, P6);} \
	} while(0)
#else
#define Trc_MM_RuntimeExecManager_jniNativeBindHook_foundMethod(thr, P1, P2, P3, P4, P5, P6)   /* tracepoint name: j9mm.520 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_RuntimeExecManager_jniNativeBindHook_replacedMethod(thr, P1, P2) do { /* tracepoint name: j9mm.521 */ \
	if ((unsigned char) j9mm_UtActive[521] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((521u << 8) | j9mm_UtActive[521]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_RuntimeExecManager_jniNativeBindHook_replacedMethod(thr, P1, P2)   /* tracepoint name: j9mm.521 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_RuntimeExecManager_forkAndExecNativeV6_Entry(thr) do { /* tracepoint name: j9mm.522 */ \
	if ((unsigned char) j9mm_UtActive[522] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((522u << 8) | j9mm_UtActive[522]), NULL);} \
	} while(0)
#else
#define Trc_MM_RuntimeExecManager_forkAndExecNativeV6_Entry(thr)   /* tracepoint name: j9mm.522 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_RuntimeExecManager_forkAndExecNativeV6_Exit(thr) do { /* tracepoint name: j9mm.523 */ \
	if ((unsigned char) j9mm_UtActive[523] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((523u << 8) | j9mm_UtActive[523]), NULL);} \
	} while(0)
#else
#define Trc_MM_RuntimeExecManager_forkAndExecNativeV6_Exit(thr)   /* tracepoint name: j9mm.523 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_RuntimeExecManager_forkAndExecNativeV7_Entry(thr) do { /* tracepoint name: j9mm.524 */ \
	if ((unsigned char) j9mm_UtActive[524] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((524u << 8) | j9mm_UtActive[524]), NULL);} \
	} while(0)
#else
#define Trc_MM_RuntimeExecManager_forkAndExecNativeV7_Entry(thr)   /* tracepoint name: j9mm.524 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_RuntimeExecManager_forkAndExecNativeV7_Exit(thr) do { /* tracepoint name: j9mm.525 */ \
	if ((unsigned char) j9mm_UtActive[525] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((525u << 8) | j9mm_UtActive[525]), NULL);} \
	} while(0)
#else
#define Trc_MM_RuntimeExecManager_forkAndExecNativeV7_Exit(thr)   /* tracepoint name: j9mm.525 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_InterRegionRememberedSet_clearFromRegionReferencesForMark_timesus(thr, P1, P2) do { /* tracepoint name: j9mm.526 */ \
	if ((unsigned char) j9mm_UtActive[526] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((526u << 8) | j9mm_UtActive[526]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_InterRegionRememberedSet_clearFromRegionReferencesForMark_timesus(thr, P1, P2)   /* tracepoint name: j9mm.526 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_InterRegionRememberedSet_clearFromRegionReferencesForCompact_timesus(thr, P1, P2) do { /* tracepoint name: j9mm.527 */ \
	if ((unsigned char) j9mm_UtActive[527] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((527u << 8) | j9mm_UtActive[527]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_InterRegionRememberedSet_clearFromRegionReferencesForCompact_timesus(thr, P1, P2)   /* tracepoint name: j9mm.527 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_InterRegionRememberedSet_clearFromRegionReferencesForMark_cardCounts(thr, P1, P2, P3, P4, P5) do { /* tracepoint name: j9mm.528 */ \
	if ((unsigned char) j9mm_UtActive[528] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((528u << 8) | j9mm_UtActive[528]), "\6\6\6\6\6", P1, P2, P3, P4, P5);} \
	} while(0)
#else
#define Trc_MM_InterRegionRememberedSet_clearFromRegionReferencesForMark_cardCounts(thr, P1, P2, P3, P4, P5)   /* tracepoint name: j9mm.528 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_InterRegionRememberedSet_clearFromRegionReferencesForCompact_cardCounts(thr, P1, P2, P3, P4, P5) do { /* tracepoint name: j9mm.529 */ \
	if ((unsigned char) j9mm_UtActive[529] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((529u << 8) | j9mm_UtActive[529]), "\6\6\6\6\6", P1, P2, P3, P4, P5);} \
	} while(0)
#else
#define Trc_MM_InterRegionRememberedSet_clearFromRegionReferencesForCompact_cardCounts(thr, P1, P2, P3, P4, P5)   /* tracepoint name: j9mm.529 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AllocationContextTarok_Deprecated_flushInternal_clearAllocationRegion(thr, P1) do { /* tracepoint name: j9mm.530 */ \
	if ((unsigned char) j9mm_UtActive[530] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((530u << 8) | j9mm_UtActive[530]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_AllocationContextTarok_Deprecated_flushInternal_clearAllocationRegion(thr, P1)   /* tracepoint name: j9mm.530 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AllocationContextTarok_Deprecated_lockedAllocateTLH_clearAllocationRegion(thr, P1) do { /* tracepoint name: j9mm.531 */ \
	if ((unsigned char) j9mm_UtActive[531] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((531u << 8) | j9mm_UtActive[531]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_AllocationContextTarok_Deprecated_lockedAllocateTLH_clearAllocationRegion(thr, P1)   /* tracepoint name: j9mm.531 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AllocationContextTarok_Deprecated_lockedAllocateTLH_setAllocationRegion(thr, P1, P2) do { /* tracepoint name: j9mm.532 */ \
	if ((unsigned char) j9mm_UtActive[532] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((532u << 8) | j9mm_UtActive[532]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_AllocationContextTarok_Deprecated_lockedAllocateTLH_setAllocationRegion(thr, P1, P2)   /* tracepoint name: j9mm.532 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AllocationContextTarok_Deprecated_lockedAllocateObject_clearAllocationRegion(thr, P1) do { /* tracepoint name: j9mm.533 */ \
	if ((unsigned char) j9mm_UtActive[533] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((533u << 8) | j9mm_UtActive[533]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_AllocationContextTarok_Deprecated_lockedAllocateObject_clearAllocationRegion(thr, P1)   /* tracepoint name: j9mm.533 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AllocationContextTarok_Deprecated_internalCollectorAcquireRegion_clearAllocationRegion(thr, P1) do { /* tracepoint name: j9mm.534 */ \
	if ((unsigned char) j9mm_UtActive[534] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((534u << 8) | j9mm_UtActive[534]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_AllocationContextTarok_Deprecated_internalCollectorAcquireRegion_clearAllocationRegion(thr, P1)   /* tracepoint name: j9mm.534 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AllocationContextTarok_Deprecated_acquireMPAOLRegionFromNode_setAllocationRegion(thr, P1, P2) do { /* tracepoint name: j9mm.535 */ \
	if ((unsigned char) j9mm_UtActive[535] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((535u << 8) | j9mm_UtActive[535]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_AllocationContextTarok_Deprecated_acquireMPAOLRegionFromNode_setAllocationRegion(thr, P1, P2)   /* tracepoint name: j9mm.535 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ParallelDispatcher_adjustThreadCount_smallHeap(P1) do { /* tracepoint name: j9mm.536 */ \
	if ((unsigned char) j9mm_UtActive[536] != 0){ \
		j9mm_UtModuleInfo.intf->Trace((void *)NULL, &j9mm_UtModuleInfo, ((536u << 8) | j9mm_UtActive[536]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_ParallelDispatcher_adjustThreadCount_smallHeap(P1)   /* tracepoint name: j9mm.536 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ParallelScavenger_scavengeRememberedSetList_Entry(thr) do { /* tracepoint name: j9mm.538 */ \
	if ((unsigned char) j9mm_UtActive[538] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((538u << 8) | j9mm_UtActive[538]), NULL);} \
	} while(0)
#else
#define Trc_MM_ParallelScavenger_scavengeRememberedSetList_Entry(thr)   /* tracepoint name: j9mm.538 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ParallelScavenger_scavengeRememberedSetList_startPuddle(thr, P1) do { /* tracepoint name: j9mm.539 */ \
	if ((unsigned char) j9mm_UtActive[539] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((539u << 8) | j9mm_UtActive[539]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_ParallelScavenger_scavengeRememberedSetList_startPuddle(thr, P1)   /* tracepoint name: j9mm.539 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ParallelScavenger_scavengeRememberedSetList_donePuddle(thr, P1, P2) do { /* tracepoint name: j9mm.540 */ \
	if ((unsigned char) j9mm_UtActive[540] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((540u << 8) | j9mm_UtActive[540]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_ParallelScavenger_scavengeRememberedSetList_donePuddle(thr, P1, P2)   /* tracepoint name: j9mm.540 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ParallelScavenger_scavengeRememberedSetList_Exit(thr) do { /* tracepoint name: j9mm.541 */ \
	if ((unsigned char) j9mm_UtActive[541] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((541u << 8) | j9mm_UtActive[541]), NULL);} \
	} while(0)
#else
#define Trc_MM_ParallelScavenger_scavengeRememberedSetList_Exit(thr)   /* tracepoint name: j9mm.541 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SynchronizeGCThreadsAndReleaseSingleThread_Entry(thr, P1) do { /* tracepoint name: j9mm.542 */ \
	if ((unsigned char) j9mm_UtActive[542] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((542u << 8) | j9mm_UtActive[542]), "\377", P1);} \
	} while(0)
#else
#define Trc_MM_SynchronizeGCThreadsAndReleaseSingleThread_Entry(thr, P1)   /* tracepoint name: j9mm.542 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SynchronizeGCThreadsAndReleaseSingleThread_Exit(thr) do { /* tracepoint name: j9mm.543 */ \
	if ((unsigned char) j9mm_UtActive[543] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((543u << 8) | j9mm_UtActive[543]), NULL);} \
	} while(0)
#else
#define Trc_MM_SynchronizeGCThreadsAndReleaseSingleThread_Exit(thr)   /* tracepoint name: j9mm.543 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CollectionSetDelegate_selectRegionsForBudget(thr, P1, P2, P3, P4, P5) do { /* tracepoint name: j9mm.544 */ \
	if ((unsigned char) j9mm_UtActive[544] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((544u << 8) | j9mm_UtActive[544]), "\6\6\6\6\6", P1, P2, P3, P4, P5);} \
	} while(0)
#else
#define Trc_MM_CollectionSetDelegate_selectRegionsForBudget(thr, P1, P2, P3, P4, P5)   /* tracepoint name: j9mm.544 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ParallelScavenger_parallelStats(thr, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11) do { /* tracepoint name: j9mm.545 */ \
	if ((unsigned char) j9mm_UtActive[545] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((545u << 8) | j9mm_UtActive[545]), "\4\4\4\4\4\4\4\6\6\6\6", P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11);} \
	} while(0)
#else
#define Trc_MM_ParallelScavenger_parallelStats(thr, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11)   /* tracepoint name: j9mm.545 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ParallelMarkTask_parallelStats(thr, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11) do { /* tracepoint name: j9mm.546 */ \
	if ((unsigned char) j9mm_UtActive[546] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((546u << 8) | j9mm_UtActive[546]), "\4\4\4\4\4\4\4\6\6\6\6", P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11);} \
	} while(0)
#else
#define Trc_MM_ParallelMarkTask_parallelStats(thr, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11)   /* tracepoint name: j9mm.546 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_RealtimeMarkTask_parallelStats(thr, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11) do { /* tracepoint name: j9mm.547 */ \
	if ((unsigned char) j9mm_UtActive[547] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((547u << 8) | j9mm_UtActive[547]), "\4\4\4\4\4\4\4\6\6\6\6", P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11);} \
	} while(0)
#else
#define Trc_MM_RealtimeMarkTask_parallelStats(thr, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11)   /* tracepoint name: j9mm.547 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ParallelSweepTask_parallelStats(thr, P1, P2, P3, P4) do { /* tracepoint name: j9mm.548 */ \
	if ((unsigned char) j9mm_UtActive[548] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((548u << 8) | j9mm_UtActive[548]), "\4\4\6\4", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_MM_ParallelSweepTask_parallelStats(thr, P1, P2, P3, P4)   /* tracepoint name: j9mm.548 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_RealtimeSweepTask_parallelStats(thr, P1, P2, P3, P4) do { /* tracepoint name: j9mm.549 */ \
	if ((unsigned char) j9mm_UtActive[549] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((549u << 8) | j9mm_UtActive[549]), "\4\4\6\4", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_MM_RealtimeSweepTask_parallelStats(thr, P1, P2, P3, P4)   /* tracepoint name: j9mm.549 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ParallelSweepVLHGCTask_parallelStats(thr, P1, P2, P3, P4) do { /* tracepoint name: j9mm.550 */ \
	if ((unsigned char) j9mm_UtActive[550] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((550u << 8) | j9mm_UtActive[550]), "\4\4\6\4", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_MM_ParallelSweepVLHGCTask_parallelStats(thr, P1, P2, P3, P4)   /* tracepoint name: j9mm.550 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ParallelGlobalMarkTask_parallelStats(thr, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11) do { /* tracepoint name: j9mm.551 */ \
	if ((unsigned char) j9mm_UtActive[551] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((551u << 8) | j9mm_UtActive[551]), "\4\4\4\4\4\4\4\6\6\6\6", P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11);} \
	} while(0)
#else
#define Trc_MM_ParallelGlobalMarkTask_parallelStats(thr, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11)   /* tracepoint name: j9mm.551 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ParallelPartialMarkTask_parallelStats(thr, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11) do { /* tracepoint name: j9mm.552 */ \
	if ((unsigned char) j9mm_UtActive[552] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((552u << 8) | j9mm_UtActive[552]), "\4\4\4\4\4\4\4\6\6\6\6", P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11);} \
	} while(0)
#else
#define Trc_MM_ParallelPartialMarkTask_parallelStats(thr, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11)   /* tracepoint name: j9mm.552 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CopyForwardScheme_parallelStats(thr, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14) do { /* tracepoint name: j9mm.553 */ \
	if ((unsigned char) j9mm_UtActive[553] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((553u << 8) | j9mm_UtActive[553]), "\4\4\4\4\4\4\4\4\4\6\6\6\6\6", P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14);} \
	} while(0)
#else
#define Trc_MM_CopyForwardScheme_parallelStats(thr, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14)   /* tracepoint name: j9mm.553 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CopyForwardScheme_parallelStatsForAbort(thr, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13) do { /* tracepoint name: j9mm.554 */ \
	if ((unsigned char) j9mm_UtActive[554] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((554u << 8) | j9mm_UtActive[554]), "\4\4\4\4\4\4\4\4\4\6\6\6\6", P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13);} \
	} while(0)
#else
#define Trc_MM_CopyForwardScheme_parallelStatsForAbort(thr, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13)   /* tracepoint name: j9mm.554 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CopyForwardSchemeDepthFirst_parallelStats(thr, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14) do { /* tracepoint name: j9mm.555 */ \
	if ((unsigned char) j9mm_UtActive[555] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((555u << 8) | j9mm_UtActive[555]), "\4\4\4\4\4\4\4\4\4\6\6\6\6\6", P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14);} \
	} while(0)
#else
#define Trc_MM_CopyForwardSchemeDepthFirst_parallelStats(thr, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14)   /* tracepoint name: j9mm.555 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CopyForwardSchemeDepthFirst_parallelStatsForAbort(thr, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13) do { /* tracepoint name: j9mm.556 */ \
	if ((unsigned char) j9mm_UtActive[556] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((556u << 8) | j9mm_UtActive[556]), "\4\4\4\4\4\4\4\4\4\6\6\6\6", P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13);} \
	} while(0)
#else
#define Trc_MM_CopyForwardSchemeDepthFirst_parallelStatsForAbort(thr, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13)   /* tracepoint name: j9mm.556 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ReclaimDelegate_deriveCompactScore_Exit(thr, P1, P2, P3, P4, P5, P6, P7, P8) do { /* tracepoint name: j9mm.557 */ \
	if ((unsigned char) j9mm_UtActive[557] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((557u << 8) | j9mm_UtActive[557]), "\6\6\6\6\6\6\6\6", P1, P2, P3, P4, P5, P6, P7, P8);} \
	} while(0)
#else
#define Trc_MM_ReclaimDelegate_deriveCompactScore_Exit(thr, P1, P2, P3, P4, P5, P6, P7, P8)   /* tracepoint name: j9mm.557 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ReclaimDelegate_estimateReclaimableRegions_generationSummary(thr, P1, P2, P3, P4, P5, P6) do { /* tracepoint name: j9mm.558 */ \
	if ((unsigned char) j9mm_UtActive[558] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((558u << 8) | j9mm_UtActive[558]), "\6\6\6\6\6\6", P1, P2, P3, P4, P5, P6);} \
	} while(0)
#else
#define Trc_MM_ReclaimDelegate_estimateReclaimableRegions_generationSummary(thr, P1, P2, P3, P4, P5, P6)   /* tracepoint name: j9mm.558 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SchedulingDelegate_measureConsumptionForPartialGC_defragmentConsumptionRate(thr, P1, P2, P3, P4) do { /* tracepoint name: j9mm.559 */ \
	if ((unsigned char) j9mm_UtActive[559] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((559u << 8) | j9mm_UtActive[559]), "\6\6\6\7", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_MM_SchedulingDelegate_measureConsumptionForPartialGC_defragmentConsumptionRate(thr, P1, P2, P3, P4)   /* tracepoint name: j9mm.559 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_LocalGCEnd(thr, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16) do { /* tracepoint name: j9mm.560 */ \
	if ((unsigned char) j9mm_UtActive[560] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((560u << 8) | j9mm_UtActive[560]), "\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6", P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16);} \
	} while(0)
#else
#define Trc_MM_LocalGCEnd(thr, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16)   /* tracepoint name: j9mm.560 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SchedulingDelegate_measureScanRate_summary(thr, P1, P2, P3, P4, P5, P6) do { /* tracepoint name: j9mm.561 */ \
	if ((unsigned char) j9mm_UtActive[561] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((561u << 8) | j9mm_UtActive[561]), "\6\6\10\6\10\7", P1, P2, P3, P4, P5, P6);} \
	} while(0)
#else
#define Trc_MM_SchedulingDelegate_measureScanRate_summary(thr, P1, P2, P3, P4, P5, P6)   /* tracepoint name: j9mm.561 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SchedulingDelegate_currentGlobalMarkIncrementTimeMillis_summary(thr, P1) do { /* tracepoint name: j9mm.562 */ \
	if ((unsigned char) j9mm_UtActive[562] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((562u << 8) | j9mm_UtActive[562]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_SchedulingDelegate_currentGlobalMarkIncrementTimeMillis_summary(thr, P1)   /* tracepoint name: j9mm.562 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CopyForwardScheme_setRegionAsSurvivor(thr, P1, P2, P3, P4, P5) do { /* tracepoint name: j9mm.563 */ \
	if ((unsigned char) j9mm_UtActive[563] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((563u << 8) | j9mm_UtActive[563]), "\6\6\7\7\7", P1, P2, P3, P4, P5);} \
	} while(0)
#else
#define Trc_MM_CopyForwardScheme_setRegionAsSurvivor(thr, P1, P2, P3, P4, P5)   /* tracepoint name: j9mm.563 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CopyForwardScheme_reinitCache(thr, P1, P2, P3, P4) do { /* tracepoint name: j9mm.564 */ \
	if ((unsigned char) j9mm_UtActive[564] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((564u << 8) | j9mm_UtActive[564]), "\6\10\7\7", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_MM_CopyForwardScheme_reinitCache(thr, P1, P2, P3, P4)   /* tracepoint name: j9mm.564 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CopyForwardScheme_stopCopyingIntoCache(thr, P1, P2, P3, P4, P5, P6, P7) do { /* tracepoint name: j9mm.565 */ \
	if ((unsigned char) j9mm_UtActive[565] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((565u << 8) | j9mm_UtActive[565]), "\6\10\7\7\7\7\7", P1, P2, P3, P4, P5, P6, P7);} \
	} while(0)
#else
#define Trc_MM_CopyForwardScheme_stopCopyingIntoCache(thr, P1, P2, P3, P4, P5, P6, P7)   /* tracepoint name: j9mm.565 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CopyForwardScheme_setAllocationAgeForMergedRegion(thr, P1, P2, P3, P4, P5, P6, P7) do { /* tracepoint name: j9mm.566 */ \
	if ((unsigned char) j9mm_UtActive[566] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((566u << 8) | j9mm_UtActive[566]), "\6\6\7\7\7\7\7", P1, P2, P3, P4, P5, P6, P7);} \
	} while(0)
#else
#define Trc_MM_CopyForwardScheme_setAllocationAgeForMergedRegion(thr, P1, P2, P3, P4, P5, P6, P7)   /* tracepoint name: j9mm.566 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SchedulingDelegate_updateGMPStats(thr, P1, P2, P3, P4) do { /* tracepoint name: j9mm.567 */ \
	if ((unsigned char) j9mm_UtActive[567] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((567u << 8) | j9mm_UtActive[567]), "\10\10\6\6", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_MM_SchedulingDelegate_updateGMPStats(thr, P1, P2, P3, P4)   /* tracepoint name: j9mm.567 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SchedulingDelegate_copyForwardCompleted_efficiency(thr, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12) do { /* tracepoint name: j9mm.568 */ \
	if ((unsigned char) j9mm_UtActive[568] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((568u << 8) | j9mm_UtActive[568]), "\6\6\7\7\7\7\6\6\6\7\7\7", P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12);} \
	} while(0)
#else
#define Trc_MM_SchedulingDelegate_copyForwardCompleted_efficiency(thr, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12)   /* tracepoint name: j9mm.568 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SchedulingDelegate_calculatePGCCompactionRate_liveToFreeRatio(thr, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10) do { /* tracepoint name: j9mm.569 */ \
	if ((unsigned char) j9mm_UtActive[569] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((569u << 8) | j9mm_UtActive[569]), "\7\6\6\6\6\7\6\6\6\6", P1, P2, P3, P4, P5, P6, P7, P8, P9, P10);} \
	} while(0)
#else
#define Trc_MM_SchedulingDelegate_calculatePGCCompactionRate_liveToFreeRatio(thr, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10)   /* tracepoint name: j9mm.569 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CompactGroupPersistentStats_decayProjectedLiveBytesForRegions(thr, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10) do { /* tracepoint name: j9mm.570 */ \
	if ((unsigned char) j9mm_UtActive[570] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((570u << 8) | j9mm_UtActive[570]), "\6\7\7\6\7\7\7\7\7\6", P1, P2, P3, P4, P5, P6, P7, P8, P9, P10);} \
	} while(0)
#else
#define Trc_MM_CompactGroupPersistentStats_decayProjectedLiveBytesForRegions(thr, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10)   /* tracepoint name: j9mm.570 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CompactGroupPersistentStats_updateProjectedSurvivalRate_Entry(thr, P1, P2, P3, P4, P5, P6, P7) do { /* tracepoint name: j9mm.571 */ \
	if ((unsigned char) j9mm_UtActive[571] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((571u << 8) | j9mm_UtActive[571]), "\6\7\7\7\7\7\7", P1, P2, P3, P4, P5, P6, P7);} \
	} while(0)
#else
#define Trc_MM_CompactGroupPersistentStats_updateProjectedSurvivalRate_Entry(thr, P1, P2, P3, P4, P5, P6, P7)   /* tracepoint name: j9mm.571 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CompactGroupPersistentStats_updateProjectedSurvivalRate_eden(thr, P1, P2, P3, P4, P5, P6, P7, P8) do { /* tracepoint name: j9mm.572 */ \
	if ((unsigned char) j9mm_UtActive[572] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((572u << 8) | j9mm_UtActive[572]), "\7\7\7\7\7\7\7\6", P1, P2, P3, P4, P5, P6, P7, P8);} \
	} while(0)
#else
#define Trc_MM_CompactGroupPersistentStats_updateProjectedSurvivalRate_eden(thr, P1, P2, P3, P4, P5, P6, P7, P8)   /* tracepoint name: j9mm.572 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CompactGroupPersistentStats_updateProjectedSurvivalRate_nonEden(thr, P1, P2, P3, P4, P5, P6, P7, P8) do { /* tracepoint name: j9mm.573 */ \
	if ((unsigned char) j9mm_UtActive[573] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((573u << 8) | j9mm_UtActive[573]), "\7\7\7\7\7\7\7\6", P1, P2, P3, P4, P5, P6, P7, P8);} \
	} while(0)
#else
#define Trc_MM_CompactGroupPersistentStats_updateProjectedSurvivalRate_nonEden(thr, P1, P2, P3, P4, P5, P6, P7, P8)   /* tracepoint name: j9mm.573 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CompactGroupPersistentStats_updateProjectedSurvivalRate_Exit(thr, P1, P2, P3, P4, P5, P6, P7, P8) do { /* tracepoint name: j9mm.574 */ \
	if ((unsigned char) j9mm_UtActive[574] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((574u << 8) | j9mm_UtActive[574]), "\6\7\7\7\7\7\7\7", P1, P2, P3, P4, P5, P6, P7, P8);} \
	} while(0)
#else
#define Trc_MM_CompactGroupPersistentStats_updateProjectedSurvivalRate_Exit(thr, P1, P2, P3, P4, P5, P6, P7, P8)   /* tracepoint name: j9mm.574 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CompactGroupPersistentStats_calculateAgeGroupFractions(thr, P1, P2, P3, P4, P5) do { /* tracepoint name: j9mm.575 */ \
	if ((unsigned char) j9mm_UtActive[575] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((575u << 8) | j9mm_UtActive[575]), "\6\6\6\6\6", P1, P2, P3, P4, P5);} \
	} while(0)
#else
#define Trc_MM_CompactGroupPersistentStats_calculateAgeGroupFractions(thr, P1, P2, P3, P4, P5)   /* tracepoint name: j9mm.575 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_IncrementalGenerationalGC_incrementRegionAge(thr, P1, P2, P3, P4, P5, P6, P7, P8, P9) do { /* tracepoint name: j9mm.576 */ \
	if ((unsigned char) j9mm_UtActive[576] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((576u << 8) | j9mm_UtActive[576]), "\6\6\7\7\7\7\7\6\6", P1, P2, P3, P4, P5, P6, P7, P8, P9);} \
	} while(0)
#else
#define Trc_MM_IncrementalGenerationalGC_incrementRegionAge(thr, P1, P2, P3, P4, P5, P6, P7, P8, P9)   /* tracepoint name: j9mm.576 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ReclaimDelegate_calculateOptimalEmptinessRegionThreshold(thr, P1, P2, P3, P4, P5, P6, P7, P8) do { /* tracepoint name: j9mm.577 */ \
	if ((unsigned char) j9mm_UtActive[577] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((577u << 8) | j9mm_UtActive[577]), "\6\7\7\7\10\7\6\7", P1, P2, P3, P4, P5, P6, P7, P8);} \
	} while(0)
#else
#define Trc_MM_ReclaimDelegate_calculateOptimalEmptinessRegionThreshold(thr, P1, P2, P3, P4, P5, P6, P7, P8)   /* tracepoint name: j9mm.577 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SchedulingDelegate_getBytesToScanInNextGMPIncrement(thr, P1, P2, P3, P4) do { /* tracepoint name: j9mm.578 */ \
	if ((unsigned char) j9mm_UtActive[578] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((578u << 8) | j9mm_UtActive[578]), "\6\7\6\6", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_MM_SchedulingDelegate_getBytesToScanInNextGMPIncrement(thr, P1, P2, P3, P4)   /* tracepoint name: j9mm.578 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_LargeObjectAllocateStats_upSample(thr, P1, P2, P3, P4, P5, P6) do { /* tracepoint name: j9mm.579 */ \
	if ((unsigned char) j9mm_UtActive[579] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((579u << 8) | j9mm_UtActive[579]), "\6\6\6\6\7\6", P1, P2, P3, P4, P5, P6);} \
	} while(0)
#else
#define Trc_MM_LargeObjectAllocateStats_upSample(thr, P1, P2, P3, P4, P5, P6)   /* tracepoint name: j9mm.579 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AllocationContextBalanced_internalReplenishActiveRegion_convertedFreeRegion(thr, P1, P2) do { /* tracepoint name: j9mm.580 */ \
	if ((unsigned char) j9mm_UtActive[580] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((580u << 8) | j9mm_UtActive[580]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_AllocationContextBalanced_internalReplenishActiveRegion_convertedFreeRegion(thr, P1, P2)   /* tracepoint name: j9mm.580 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AllocationContextBalanced_internalReplenishActiveRegion_setAllocationRegion(thr, P1, P2) do { /* tracepoint name: j9mm.581 */ \
	if ((unsigned char) j9mm_UtActive[581] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((581u << 8) | j9mm_UtActive[581]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_AllocationContextBalanced_internalReplenishActiveRegion_setAllocationRegion(thr, P1, P2)   /* tracepoint name: j9mm.581 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AllocationContextBalanced_acquireMPBPRegionFromNode_Entry(thr, P1, P2) do { /* tracepoint name: j9mm.582 */ \
	if ((unsigned char) j9mm_UtActive[582] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((582u << 8) | j9mm_UtActive[582]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_AllocationContextBalanced_acquireMPBPRegionFromNode_Entry(thr, P1, P2)   /* tracepoint name: j9mm.582 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AllocationContextBalanced_acquireMPBPRegionFromNode_Exit(thr, P1) do { /* tracepoint name: j9mm.583 */ \
	if ((unsigned char) j9mm_UtActive[583] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((583u << 8) | j9mm_UtActive[583]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_AllocationContextBalanced_acquireMPBPRegionFromNode_Exit(thr, P1)   /* tracepoint name: j9mm.583 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AllocationContextBalanced_lockedReplenishAndAllocate_Entry(thr, P1, P2) do { /* tracepoint name: j9mm.584 */ \
	if ((unsigned char) j9mm_UtActive[584] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((584u << 8) | j9mm_UtActive[584]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_AllocationContextBalanced_lockedReplenishAndAllocate_Entry(thr, P1, P2)   /* tracepoint name: j9mm.584 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AllocationContextBalanced_lockedReplenishAndAllocate_acquiredFreeRegion(thr, P1) do { /* tracepoint name: j9mm.585 */ \
	if ((unsigned char) j9mm_UtActive[585] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((585u << 8) | j9mm_UtActive[585]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_AllocationContextBalanced_lockedReplenishAndAllocate_acquiredFreeRegion(thr, P1)   /* tracepoint name: j9mm.585 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AllocationContextBalanced_lockedReplenishAndAllocate_Success(thr) do { /* tracepoint name: j9mm.586 */ \
	if ((unsigned char) j9mm_UtActive[586] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((586u << 8) | j9mm_UtActive[586]), NULL);} \
	} while(0)
#else
#define Trc_MM_AllocationContextBalanced_lockedReplenishAndAllocate_Success(thr)   /* tracepoint name: j9mm.586 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AllocationContextBalanced_lockedReplenishAndAllocate_Failure(thr) do { /* tracepoint name: j9mm.587 */ \
	if ((unsigned char) j9mm_UtActive[587] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((587u << 8) | j9mm_UtActive[587]), NULL);} \
	} while(0)
#else
#define Trc_MM_AllocationContextBalanced_lockedReplenishAndAllocate_Failure(thr)   /* tracepoint name: j9mm.587 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AllocationContextBalanced_flushInternal_clearAllocationRegion(thr, P1) do { /* tracepoint name: j9mm.588 */ \
	if ((unsigned char) j9mm_UtActive[588] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((588u << 8) | j9mm_UtActive[588]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_AllocationContextBalanced_flushInternal_clearAllocationRegion(thr, P1)   /* tracepoint name: j9mm.588 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AllocationContextBalanced_lockedAllocateTLH_clearAllocationRegion(thr, P1) do { /* tracepoint name: j9mm.589 */ \
	if ((unsigned char) j9mm_UtActive[589] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((589u << 8) | j9mm_UtActive[589]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_AllocationContextBalanced_lockedAllocateTLH_clearAllocationRegion(thr, P1)   /* tracepoint name: j9mm.589 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AllocationContextBalanced_lockedAllocateTLH_setAllocationRegion(thr, P1, P2) do { /* tracepoint name: j9mm.590 */ \
	if ((unsigned char) j9mm_UtActive[590] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((590u << 8) | j9mm_UtActive[590]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_AllocationContextBalanced_lockedAllocateTLH_setAllocationRegion(thr, P1, P2)   /* tracepoint name: j9mm.590 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AllocationContextBalanced_lockedAllocateObject_clearAllocationRegion(thr, P1) do { /* tracepoint name: j9mm.591 */ \
	if ((unsigned char) j9mm_UtActive[591] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((591u << 8) | j9mm_UtActive[591]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_AllocationContextBalanced_lockedAllocateObject_clearAllocationRegion(thr, P1)   /* tracepoint name: j9mm.591 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AllocationContextBalanced_internalCollectorAcquireRegion_clearAllocationRegion(thr, P1) do { /* tracepoint name: j9mm.592 */ \
	if ((unsigned char) j9mm_UtActive[592] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((592u << 8) | j9mm_UtActive[592]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_AllocationContextBalanced_internalCollectorAcquireRegion_clearAllocationRegion(thr, P1)   /* tracepoint name: j9mm.592 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AllocationContextMultiTenant_internalReplenishActiveRegion_convertedFreeRegion(thr, P1, P2) do { /* tracepoint name: j9mm.593 */ \
	if ((unsigned char) j9mm_UtActive[593] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((593u << 8) | j9mm_UtActive[593]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_AllocationContextMultiTenant_internalReplenishActiveRegion_convertedFreeRegion(thr, P1, P2)   /* tracepoint name: j9mm.593 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AllocationContextMultiTenant_internalReplenishActiveRegion_setAllocationRegion(thr, P1, P2) do { /* tracepoint name: j9mm.594 */ \
	if ((unsigned char) j9mm_UtActive[594] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((594u << 8) | j9mm_UtActive[594]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_AllocationContextMultiTenant_internalReplenishActiveRegion_setAllocationRegion(thr, P1, P2)   /* tracepoint name: j9mm.594 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AllocationContextMultiTenant_lockedReplenishAndAllocate_Entry(thr, P1, P2) do { /* tracepoint name: j9mm.595 */ \
	if ((unsigned char) j9mm_UtActive[595] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((595u << 8) | j9mm_UtActive[595]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_AllocationContextMultiTenant_lockedReplenishAndAllocate_Entry(thr, P1, P2)   /* tracepoint name: j9mm.595 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AllocationContextMultiTenant_lockedReplenishAndAllocate_acquiredFreeRegion(thr, P1) do { /* tracepoint name: j9mm.596 */ \
	if ((unsigned char) j9mm_UtActive[596] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((596u << 8) | j9mm_UtActive[596]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_AllocationContextMultiTenant_lockedReplenishAndAllocate_acquiredFreeRegion(thr, P1)   /* tracepoint name: j9mm.596 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AllocationContextMultiTenant_lockedReplenishAndAllocate_Success(thr) do { /* tracepoint name: j9mm.597 */ \
	if ((unsigned char) j9mm_UtActive[597] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((597u << 8) | j9mm_UtActive[597]), NULL);} \
	} while(0)
#else
#define Trc_MM_AllocationContextMultiTenant_lockedReplenishAndAllocate_Success(thr)   /* tracepoint name: j9mm.597 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AllocationContextMultiTenant_lockedReplenishAndAllocate_Failure(thr) do { /* tracepoint name: j9mm.598 */ \
	if ((unsigned char) j9mm_UtActive[598] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((598u << 8) | j9mm_UtActive[598]), NULL);} \
	} while(0)
#else
#define Trc_MM_AllocationContextMultiTenant_lockedReplenishAndAllocate_Failure(thr)   /* tracepoint name: j9mm.598 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AllocationContextMultiTenant_flushInternal_clearAllocationRegion(thr, P1) do { /* tracepoint name: j9mm.599 */ \
	if ((unsigned char) j9mm_UtActive[599] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((599u << 8) | j9mm_UtActive[599]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_AllocationContextMultiTenant_flushInternal_clearAllocationRegion(thr, P1)   /* tracepoint name: j9mm.599 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AllocationContextMultiTenant_lockedAllocateTLH_clearAllocationRegion(thr, P1) do { /* tracepoint name: j9mm.600 */ \
	if ((unsigned char) j9mm_UtActive[600] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((600u << 8) | j9mm_UtActive[600]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_AllocationContextMultiTenant_lockedAllocateTLH_clearAllocationRegion(thr, P1)   /* tracepoint name: j9mm.600 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AllocationContextMultiTenant_lockedAllocateTLH_setAllocationRegion(thr, P1, P2) do { /* tracepoint name: j9mm.601 */ \
	if ((unsigned char) j9mm_UtActive[601] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((601u << 8) | j9mm_UtActive[601]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_AllocationContextMultiTenant_lockedAllocateTLH_setAllocationRegion(thr, P1, P2)   /* tracepoint name: j9mm.601 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AllocationContextMultiTenant_lockedAllocateObject_clearAllocationRegion(thr, P1) do { /* tracepoint name: j9mm.602 */ \
	if ((unsigned char) j9mm_UtActive[602] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((602u << 8) | j9mm_UtActive[602]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_AllocationContextMultiTenant_lockedAllocateObject_clearAllocationRegion(thr, P1)   /* tracepoint name: j9mm.602 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AllocationContextMultiTenant_internalCollectorAcquireRegion_clearAllocationRegion(thr, P1) do { /* tracepoint name: j9mm.603 */ \
	if ((unsigned char) j9mm_UtActive[603] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((603u << 8) | j9mm_UtActive[603]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_AllocationContextMultiTenant_internalCollectorAcquireRegion_clearAllocationRegion(thr, P1)   /* tracepoint name: j9mm.603 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_LargeObjectAllocateStats_estimateFragmentation_entry(thr, P1, P2, P3) do { /* tracepoint name: j9mm.604 */ \
	if ((unsigned char) j9mm_UtActive[604] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((604u << 8) | j9mm_UtActive[604]), "\6\6\7", P1, P2, P3);} \
	} while(0)
#else
#define Trc_MM_LargeObjectAllocateStats_estimateFragmentation_entry(thr, P1, P2, P3)   /* tracepoint name: j9mm.604 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_LargeObjectAllocateStats_estimateFragmentation_stride(thr, P1, P2, P3, P4, P5, P6, P7, P8) do { /* tracepoint name: j9mm.605 */ \
	if ((unsigned char) j9mm_UtActive[605] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((605u << 8) | j9mm_UtActive[605]), "\6\6\6\6\6\6\6\6", P1, P2, P3, P4, P5, P6, P7, P8);} \
	} while(0)
#else
#define Trc_MM_LargeObjectAllocateStats_estimateFragmentation_stride(thr, P1, P2, P3, P4, P5, P6, P7, P8)   /* tracepoint name: j9mm.605 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_LargeObjectAllocateStats_estimateFragmentation_exit(thr, P1, P2, P3, P4) do { /* tracepoint name: j9mm.606 */ \
	if ((unsigned char) j9mm_UtActive[606] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((606u << 8) | j9mm_UtActive[606]), "\6\6\6\6", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_MM_LargeObjectAllocateStats_estimateFragmentation_exit(thr, P1, P2, P3, P4)   /* tracepoint name: j9mm.606 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_LargeObjectAllocateStats_simulateAllocateObjects_entry(thr, P1, P2, P3, P4, P5) do { /* tracepoint name: j9mm.607 */ \
	if ((unsigned char) j9mm_UtActive[607] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((607u << 8) | j9mm_UtActive[607]), "\6\6\6\6\6", P1, P2, P3, P4, P5);} \
	} while(0)
#else
#define Trc_MM_LargeObjectAllocateStats_simulateAllocateObjects_entry(thr, P1, P2, P3, P4, P5)   /* tracepoint name: j9mm.607 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_LargeObjectAllocateStats_simulateAllocateObjects_availableBytes(thr, P1, P2, P3, P4, P5, P6) do { /* tracepoint name: j9mm.608 */ \
	if ((unsigned char) j9mm_UtActive[608] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((608u << 8) | j9mm_UtActive[608]), "\377\6\6\6\6\6", P1, P2, P3, P4, P5, P6);} \
	} while(0)
#else
#define Trc_MM_LargeObjectAllocateStats_simulateAllocateObjects_availableBytes(thr, P1, P2, P3, P4, P5, P6)   /* tracepoint name: j9mm.608 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_LargeObjectAllocateStats_simulateAllocateObjects_exit(thr, P1, P2, P3, P4, P5) do { /* tracepoint name: j9mm.609 */ \
	if ((unsigned char) j9mm_UtActive[609] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((609u << 8) | j9mm_UtActive[609]), "\6\6\6\6\6", P1, P2, P3, P4, P5);} \
	} while(0)
#else
#define Trc_MM_LargeObjectAllocateStats_simulateAllocateObjects_exit(thr, P1, P2, P3, P4, P5)   /* tracepoint name: j9mm.609 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_LargeObjectAllocateStats_simulateAllocateTLHs_entry(thr, P1, P2, P3, P4) do { /* tracepoint name: j9mm.610 */ \
	if ((unsigned char) j9mm_UtActive[610] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((610u << 8) | j9mm_UtActive[610]), "\6\6\6\6", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_MM_LargeObjectAllocateStats_simulateAllocateTLHs_entry(thr, P1, P2, P3, P4)   /* tracepoint name: j9mm.610 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_LargeObjectAllocateStats_simulateAllocateTLHs_availableBytes(thr, P1, P2, P3, P4) do { /* tracepoint name: j9mm.611 */ \
	if ((unsigned char) j9mm_UtActive[611] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((611u << 8) | j9mm_UtActive[611]), "\377\6\6\6", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_MM_LargeObjectAllocateStats_simulateAllocateTLHs_availableBytes(thr, P1, P2, P3, P4)   /* tracepoint name: j9mm.611 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_LargeObjectAllocateStats_simulateAllocateTLHs_exit(thr, P1, P2, P3, P4) do { /* tracepoint name: j9mm.612 */ \
	if ((unsigned char) j9mm_UtActive[612] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((612u << 8) | j9mm_UtActive[612]), "\6\6\6\6", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_MM_LargeObjectAllocateStats_simulateAllocateTLHs_exit(thr, P1, P2, P3, P4)   /* tracepoint name: j9mm.612 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_LargeObjectAllocateStats_simulateAllocateCommon_freeEntry_entry(thr, P1, P2, P3, P4, P5) do { /* tracepoint name: j9mm.613 */ \
	if ((unsigned char) j9mm_UtActive[613] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((613u << 8) | j9mm_UtActive[613]), "\377\377\6\6\6", P1, P2, P3, P4, P5);} \
	} while(0)
#else
#define Trc_MM_LargeObjectAllocateStats_simulateAllocateCommon_freeEntry_entry(thr, P1, P2, P3, P4, P5)   /* tracepoint name: j9mm.613 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_LargeObjectAllocateStats_simulateAllocateCommon_satisfy(thr, P1, P2, P3, P4) do { /* tracepoint name: j9mm.614 */ \
	if ((unsigned char) j9mm_UtActive[614] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((614u << 8) | j9mm_UtActive[614]), "\377\377\6\6", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_MM_LargeObjectAllocateStats_simulateAllocateCommon_satisfy(thr, P1, P2, P3, P4)   /* tracepoint name: j9mm.614 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_LargeObjectAllocateStats_simulateAllocateCommon_partial(thr, P1, P2, P3) do { /* tracepoint name: j9mm.615 */ \
	if ((unsigned char) j9mm_UtActive[615] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((615u << 8) | j9mm_UtActive[615]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_MM_LargeObjectAllocateStats_simulateAllocateCommon_partial(thr, P1, P2, P3)   /* tracepoint name: j9mm.615 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_LargeObjectAllocateStats_simulateAllocateCommon_full(thr, P1, P2, P3) do { /* tracepoint name: j9mm.616 */ \
	if ((unsigned char) j9mm_UtActive[616] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((616u << 8) | j9mm_UtActive[616]), "\6\6\7", P1, P2, P3);} \
	} while(0)
#else
#define Trc_MM_LargeObjectAllocateStats_simulateAllocateCommon_full(thr, P1, P2, P3)   /* tracepoint name: j9mm.616 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_LargeObjectAllocateStats_simulateAllocateCommon_adjustement(thr, P1, P2) do { /* tracepoint name: j9mm.617 */ \
	if ((unsigned char) j9mm_UtActive[617] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((617u << 8) | j9mm_UtActive[617]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_LargeObjectAllocateStats_simulateAllocateCommon_adjustement(thr, P1, P2)   /* tracepoint name: j9mm.617 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_LargeObjectAllocateStats_simulateAllocateCommon_remainder(thr, P1, P2, P3) do { /* tracepoint name: j9mm.618 */ \
	if ((unsigned char) j9mm_UtActive[618] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((618u << 8) | j9mm_UtActive[618]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_MM_LargeObjectAllocateStats_simulateAllocateCommon_remainder(thr, P1, P2, P3)   /* tracepoint name: j9mm.618 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_LargeObjectAllocateStats_simulateAllocateCommon_freeEntry_exit(thr, P1, P2, P3, P4) do { /* tracepoint name: j9mm.619 */ \
	if ((unsigned char) j9mm_UtActive[619] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((619u << 8) | j9mm_UtActive[619]), "\377\377\6\6", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_MM_LargeObjectAllocateStats_simulateAllocateCommon_freeEntry_exit(thr, P1, P2, P3, P4)   /* tracepoint name: j9mm.619 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Assert_MM_mustHaveVMAccess(P1) do { /* tracepoint name: j9mm.620 */ \
	if ((unsigned char) j9mm_UtActive[620] != 0){ \
		if ((P1)->publicFlags & J9_PUBLIC_FLAGS_VM_ACCESS) { /* assertion satisfied */ } else { \
			if (j9mm_UtModuleInfo.intf != NULL) { \
				j9mm_UtModuleInfo.intf->Trace((void *)NULL, &j9mm_UtModuleInfo, (UT_SPECIAL_ASSERTION | (620u << 8) | j9mm_UtActive[620]), "\377\4\377", __FILE__, __LINE__, UT_STR(((P1)->publicFlags & J9_PUBLIC_FLAGS_VM_ACCESS))); \
				Trace_Unreachable(); \
			} else { \
				fprintf(stderr, "** ASSERTION FAILED ** j9mm.620 at %s:%d Assert_MM_mustHaveVMAccess%s\n", __FILE__, __LINE__, UT_STR(((P1)->publicFlags & J9_PUBLIC_FLAGS_VM_ACCESS))); \
			} \
		}} \
	} while(0)
#else
#define Assert_MM_mustHaveVMAccess(P1)   /* tracepoint name: j9mm.620 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_AssertionWithMessage_outputMessage(thr, P1) do { /* tracepoint name: j9mm.621 */ \
	if ((unsigned char) j9mm_UtActive[621] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((621u << 8) | j9mm_UtActive[621]), "\377", P1);} \
	} while(0)
#else
#define Trc_MM_AssertionWithMessage_outputMessage(thr, P1)   /* tracepoint name: j9mm.621 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_cleanUpClassLoadersStart_triggerClassLoadersUnload(thr, P1) do { /* tracepoint name: j9mm.622 */ \
	if ((unsigned char) j9mm_UtActive[622] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((622u << 8) | j9mm_UtActive[622]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_cleanUpClassLoadersStart_triggerClassLoadersUnload(thr, P1)   /* tracepoint name: j9mm.622 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_StringTable_stringAddToInternTableFailed(thr, P1, P2, P3) do { /* tracepoint name: j9mm.623 */ \
	if ((unsigned char) j9mm_UtActive[623] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((623u << 8) | j9mm_UtActive[623]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_MM_StringTable_stringAddToInternTableFailed(thr, P1, P2, P3)   /* tracepoint name: j9mm.623 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_allocateAndConnectNonContiguousArraylet_Summary(thr, P1, P2, P3) do { /* tracepoint name: j9mm.624 */ \
	if ((unsigned char) j9mm_UtActive[624] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((624u << 8) | j9mm_UtActive[624]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_MM_allocateAndConnectNonContiguousArraylet_Summary(thr, P1, P2, P3)   /* tracepoint name: j9mm.624 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_RuntimeExecManager_forkAndExecNativeV8_Entry(thr) do { /* tracepoint name: j9mm.625 */ \
	if ((unsigned char) j9mm_UtActive[625] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((625u << 8) | j9mm_UtActive[625]), NULL);} \
	} while(0)
#else
#define Trc_MM_RuntimeExecManager_forkAndExecNativeV8_Entry(thr)   /* tracepoint name: j9mm.625 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_RuntimeExecManager_forkAndExecNativeV8_Exit(thr) do { /* tracepoint name: j9mm.626 */ \
	if ((unsigned char) j9mm_UtActive[626] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((626u << 8) | j9mm_UtActive[626]), NULL);} \
	} while(0)
#else
#define Trc_MM_RuntimeExecManager_forkAndExecNativeV8_Exit(thr)   /* tracepoint name: j9mm.626 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ParallelScavenger_completeScan_forceBackout(thr, P1, P2) do { /* tracepoint name: j9mm.627 */ \
	if ((unsigned char) j9mm_UtActive[627] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((627u << 8) | j9mm_UtActive[627]), "\6\377", P1, P2);} \
	} while(0)
#else
#define Trc_MM_ParallelScavenger_completeScan_forceBackout(thr, P1, P2)   /* tracepoint name: j9mm.627 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ParallelTask_handleNextWorkUnit_holdingThread(thr, P1, P2) do { /* tracepoint name: j9mm.628 */ \
	if ((unsigned char) j9mm_UtActive[628] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((628u << 8) | j9mm_UtActive[628]), "\6\377", P1, P2);} \
	} while(0)
#else
#define Trc_MM_ParallelTask_handleNextWorkUnit_holdingThread(thr, P1, P2)   /* tracepoint name: j9mm.628 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_cleanUpClassLoadersStart_triggerAnonymousClassesUnload(thr, P1) do { /* tracepoint name: j9mm.629 */ \
	if ((unsigned char) j9mm_UtActive[629] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((629u << 8) | j9mm_UtActive[629]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_cleanUpClassLoadersStart_triggerAnonymousClassesUnload(thr, P1)   /* tracepoint name: j9mm.629 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_GlobalCollector_isTimeForClassUnloading_anonClasses(P1, P2, P3) do { /* tracepoint name: j9mm.630 */ \
	if ((unsigned char) j9mm_UtActive[630] != 0){ \
		j9mm_UtModuleInfo.intf->Trace((void *)NULL, &j9mm_UtModuleInfo, ((630u << 8) | j9mm_UtActive[630]), "\6\6\7", P1, P2, P3);} \
	} while(0)
#else
#define Trc_MM_GlobalCollector_isTimeForClassUnloading_anonClasses(P1, P2, P3)   /* tracepoint name: j9mm.630 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_GlobalCollector_isTimeForGlobalGCKickoff_anonClasses(P1, P2, P3) do { /* tracepoint name: j9mm.631 */ \
	if ((unsigned char) j9mm_UtActive[631] != 0){ \
		j9mm_UtModuleInfo.intf->Trace((void *)NULL, &j9mm_UtModuleInfo, ((631u << 8) | j9mm_UtActive[631]), "\6\6\7", P1, P2, P3);} \
	} while(0)
#else
#define Trc_MM_GlobalCollector_isTimeForGlobalGCKickoff_anonClasses(P1, P2, P3)   /* tracepoint name: j9mm.631 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Assert_MM_invalidJNICall_internal() do { /* tracepoint name: j9mm.632 */ \
	if ((unsigned char) j9mm_UtActive[632] != 0){ \
		if ((false)) { /* assertion satisfied */ } else { \
			if (j9mm_UtModuleInfo.intf != NULL) { \
				j9mm_UtModuleInfo.intf->Trace((void *)NULL, &j9mm_UtModuleInfo, (UT_SPECIAL_ASSERTION | (632u << 8) | j9mm_UtActive[632]), "\377\4\377", __FILE__, __LINE__, UT_STR(((false)))); \
				Trace_Unreachable(); \
			} else { \
				fprintf(stderr, "** ASSERTION FAILED ** j9mm.632 at %s:%d Assert_MM_invalidJNICall_internal%s\n", __FILE__, __LINE__, UT_STR(((false)))); \
			} \
		}} \
	} while(0)
#else
#define Assert_MM_invalidJNICall_internal()   /* tracepoint name: j9mm.632 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_JNIReleasePrimitiveArrayCritical_invalid(thr, P1, P2, P3) do { /* tracepoint name: j9mm.633 */ \
	if ((unsigned char) j9mm_UtActive[633] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((633u << 8) | j9mm_UtActive[633]), "\6\6\6", P1, P2, P3);} \
	} while(0)
#else
#define Trc_MM_JNIReleasePrimitiveArrayCritical_invalid(thr, P1, P2, P3)   /* tracepoint name: j9mm.633 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ObjectAccessBarrier_printNativeMethod(thr, P1, P2, P3, P4, P5, P6, P7) do { /* tracepoint name: j9mm.634 */ \
	if ((unsigned char) j9mm_UtActive[634] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((634u << 8) | j9mm_UtActive[634]), "\6\12\377\12\377\12\377", P1, P2, P3, P4, P5, P6, P7);} \
	} while(0)
#else
#define Trc_MM_ObjectAccessBarrier_printNativeMethod(thr, P1, P2, P3, P4, P5, P6, P7)   /* tracepoint name: j9mm.634 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ObjectAccessBarrier_printNativeMethodUnknown(thr) do { /* tracepoint name: j9mm.635 */ \
	if ((unsigned char) j9mm_UtActive[635] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((635u << 8) | j9mm_UtActive[635]), NULL);} \
	} while(0)
#else
#define Trc_MM_ObjectAccessBarrier_printNativeMethodUnknown(thr)   /* tracepoint name: j9mm.635 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ConcurrentCardTable_activeTLHMarkMapCommitFailed(thr, P1, P2) do { /* tracepoint name: j9mm.636 */ \
	if ((unsigned char) j9mm_UtActive[636] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((636u << 8) | j9mm_UtActive[636]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_ConcurrentCardTable_activeTLHMarkMapCommitFailed(thr, P1, P2)   /* tracepoint name: j9mm.636 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ConcurrentCardTable_activeTLHMarkMapCommitFailureForced(thr) do { /* tracepoint name: j9mm.637 */ \
	if ((unsigned char) j9mm_UtActive[637] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((637u << 8) | j9mm_UtActive[637]), NULL);} \
	} while(0)
#else
#define Trc_MM_ConcurrentCardTable_activeTLHMarkMapCommitFailureForced(thr)   /* tracepoint name: j9mm.637 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ConcurrentCardTable_activeTLHMarkMapDecommitFailed(thr, P1, P2, P3, P4) do { /* tracepoint name: j9mm.638 */ \
	if ((unsigned char) j9mm_UtActive[638] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((638u << 8) | j9mm_UtActive[638]), "\6\6\6\6", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_MM_ConcurrentCardTable_activeTLHMarkMapDecommitFailed(thr, P1, P2, P3, P4)   /* tracepoint name: j9mm.638 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ConcurrentCardTable_activeTLHMarkMapDecommitFailureForced(thr) do { /* tracepoint name: j9mm.639 */ \
	if ((unsigned char) j9mm_UtActive[639] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((639u << 8) | j9mm_UtActive[639]), NULL);} \
	} while(0)
#else
#define Trc_MM_ConcurrentCardTable_activeTLHMarkMapDecommitFailureForced(thr)   /* tracepoint name: j9mm.639 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CardTable_cardTableCommitFailed(thr, P1, P2) do { /* tracepoint name: j9mm.640 */ \
	if ((unsigned char) j9mm_UtActive[640] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((640u << 8) | j9mm_UtActive[640]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_CardTable_cardTableCommitFailed(thr, P1, P2)   /* tracepoint name: j9mm.640 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CardTable_cardTableCommitFailureForced(thr) do { /* tracepoint name: j9mm.641 */ \
	if ((unsigned char) j9mm_UtActive[641] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((641u << 8) | j9mm_UtActive[641]), NULL);} \
	} while(0)
#else
#define Trc_MM_CardTable_cardTableCommitFailureForced(thr)   /* tracepoint name: j9mm.641 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CardTable_cardTableDecommitFailed(thr, P1, P2, P3, P4) do { /* tracepoint name: j9mm.642 */ \
	if ((unsigned char) j9mm_UtActive[642] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((642u << 8) | j9mm_UtActive[642]), "\6\6\6\6", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_MM_CardTable_cardTableDecommitFailed(thr, P1, P2, P3, P4)   /* tracepoint name: j9mm.642 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_CardTable_cardTableDecommitFailureForced(thr) do { /* tracepoint name: j9mm.643 */ \
	if ((unsigned char) j9mm_UtActive[643] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((643u << 8) | j9mm_UtActive[643]), NULL);} \
	} while(0)
#else
#define Trc_MM_CardTable_cardTableDecommitFailureForced(thr)   /* tracepoint name: j9mm.643 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_HeapMap_markMapCommitFailed(thr, P1, P2) do { /* tracepoint name: j9mm.644 */ \
	if ((unsigned char) j9mm_UtActive[644] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((644u << 8) | j9mm_UtActive[644]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_HeapMap_markMapCommitFailed(thr, P1, P2)   /* tracepoint name: j9mm.644 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_HeapMap_markMapCommitFailureForced(thr) do { /* tracepoint name: j9mm.645 */ \
	if ((unsigned char) j9mm_UtActive[645] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((645u << 8) | j9mm_UtActive[645]), NULL);} \
	} while(0)
#else
#define Trc_MM_HeapMap_markMapCommitFailureForced(thr)   /* tracepoint name: j9mm.645 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_HeapMap_markMapDecommitFailed(thr, P1, P2, P3, P4) do { /* tracepoint name: j9mm.646 */ \
	if ((unsigned char) j9mm_UtActive[646] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((646u << 8) | j9mm_UtActive[646]), "\6\6\6\6", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_MM_HeapMap_markMapDecommitFailed(thr, P1, P2, P3, P4)   /* tracepoint name: j9mm.646 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_HeapMap_markMapDecommitFailureForced(thr) do { /* tracepoint name: j9mm.647 */ \
	if ((unsigned char) j9mm_UtActive[647] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((647u << 8) | j9mm_UtActive[647]), NULL);} \
	} while(0)
#else
#define Trc_MM_HeapMap_markMapDecommitFailureForced(thr)   /* tracepoint name: j9mm.647 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SweepHeapSectioning_parallelSweepChunkArrayCommitFailed(thr, P1, P2) do { /* tracepoint name: j9mm.648 */ \
	if ((unsigned char) j9mm_UtActive[648] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((648u << 8) | j9mm_UtActive[648]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_SweepHeapSectioning_parallelSweepChunkArrayCommitFailed(thr, P1, P2)   /* tracepoint name: j9mm.648 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_SweepHeapSectioning_parallelSweepChunkArrayCommitFailureForced(thr) do { /* tracepoint name: j9mm.649 */ \
	if ((unsigned char) j9mm_UtActive[649] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((649u << 8) | j9mm_UtActive[649]), NULL);} \
	} while(0)
#else
#define Trc_MM_SweepHeapSectioning_parallelSweepChunkArrayCommitFailureForced(thr)   /* tracepoint name: j9mm.649 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ReferenceChainWalkerMarkMap_markMapCommitFailed(thr, P1, P2) do { /* tracepoint name: j9mm.650 */ \
	if ((unsigned char) j9mm_UtActive[650] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((650u << 8) | j9mm_UtActive[650]), "\6\6", P1, P2);} \
	} while(0)
#else
#define Trc_MM_ReferenceChainWalkerMarkMap_markMapCommitFailed(thr, P1, P2)   /* tracepoint name: j9mm.650 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ReferenceChainWalkerMarkMap_markMapCommitFailureForced(thr) do { /* tracepoint name: j9mm.651 */ \
	if ((unsigned char) j9mm_UtActive[651] != 0){ \
		j9mm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &j9mm_UtModuleInfo, ((651u << 8) | j9mm_UtActive[651]), NULL);} \
	} while(0)
#else
#define Trc_MM_ReferenceChainWalkerMarkMap_markMapCommitFailureForced(thr)   /* tracepoint name: j9mm.651 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Assert_MM_mustHaveJNICriticalRegion(P1) do { /* tracepoint name: j9mm.652 */ \
	if ((unsigned char) j9mm_UtActive[652] != 0){ \
		if ((P1)->publicFlags & J9_PUBLIC_FLAGS_JNI_CRITICAL_REGION) { /* assertion satisfied */ } else { \
			if (j9mm_UtModuleInfo.intf != NULL) { \
				j9mm_UtModuleInfo.intf->Trace((void *)NULL, &j9mm_UtModuleInfo, (UT_SPECIAL_ASSERTION | (652u << 8) | j9mm_UtActive[652]), "\377\4\377", __FILE__, __LINE__, UT_STR(((P1)->publicFlags & J9_PUBLIC_FLAGS_JNI_CRITICAL_REGION))); \
				Trace_Unreachable(); \
			} else { \
				fprintf(stderr, "** ASSERTION FAILED ** j9mm.652 at %s:%d Assert_MM_mustHaveJNICriticalRegion%s\n", __FILE__, __LINE__, UT_STR(((P1)->publicFlags & J9_PUBLIC_FLAGS_JNI_CRITICAL_REGION))); \
			} \
		}} \
	} while(0)
#else
#define Assert_MM_mustHaveJNICriticalRegion(P1)   /* tracepoint name: j9mm.652 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Assert_MM_inflateInvalidRange() do { /* tracepoint name: j9mm.653 */ \
	if ((unsigned char) j9mm_UtActive[653] != 0){ \
		if ((0 /* MM_PhysicalSubArenaVirtualMemorySemiSpace::inflate - bad address range */)) { /* assertion satisfied */ } else { \
			if (j9mm_UtModuleInfo.intf != NULL) { \
				j9mm_UtModuleInfo.intf->Trace((void *)NULL, &j9mm_UtModuleInfo, (UT_SPECIAL_ASSERTION | (653u << 8) | j9mm_UtActive[653]), "\377\4\377", __FILE__, __LINE__, UT_STR(((0 /* MM_PhysicalSubArenaVirtualMemorySemiSpace::inflate - bad address range */)))); \
				Trace_Unreachable(); \
			} else { \
				fprintf(stderr, "** ASSERTION FAILED ** j9mm.653 at %s:%d Assert_MM_inflateInvalidRange%s\n", __FILE__, __LINE__, UT_STR(((0 /* MM_PhysicalSubArenaVirtualMemorySemiSpace::inflate - bad address range */)))); \
			} \
		}} \
	} while(0)
#else
#define Assert_MM_inflateInvalidRange()   /* tracepoint name: j9mm.653 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_MM_ParallelDispatcher_adjustThreadCount_ReducedCPU(P1) do { /* tracepoint name: j9mm.654 */ \
	if ((unsigned char) j9mm_UtActive[654] != 0){ \
		j9mm_UtModuleInfo.intf->Trace((void *)NULL, &j9mm_UtModuleInfo, ((654u << 8) | j9mm_UtActive[654]), "\6", P1);} \
	} while(0)
#else
#define Trc_MM_ParallelDispatcher_adjustThreadCount_ReducedCPU(P1)   /* tracepoint name: j9mm.654 */
#endif

extern UtModuleInfo j9mm_UtModuleInfo;
extern unsigned char j9mm_UtActive[];

#ifndef UT_MODULE_INFO
#define UT_MODULE_INFO j9mm_UtModuleInfo
#endif /* UT_MODULE_INFO */

#ifndef UT_ACTIVE
#define UT_ACTIVE j9mm_UtActive
#endif /* UT_ACTIVE */

#ifdef __cplusplus
} /* extern "C" */
#endif
#endif /* UTE_J9MM_MODULE_HEADER */
/*
 * End of file
 */
