/*
 *  Do not edit this file 
 *  Generated by TraceGen
 */
#ifndef UTE_OMRMM_MODULE_HEADER
#define UTE_OMRMM_MODULE_HEADER
#include "ute_module.h"
#if !defined(UT_DIRECT_TRACE_REGISTRATION)
#include "jni.h"
#endif /* !defined(UT_DIRECT_TRACE_REGISTRATION) */
#ifndef UT_TRACE_OVERHEAD
#define UT_TRACE_OVERHEAD 1
#endif
#ifndef UT_THREAD
#define UT_THREAD(thr) (void *)thr
#endif /* UT_THREAD */
#ifndef UT_STR
#define UT_STR(arg) #arg
#endif
#ifdef __cplusplus
extern "C" {
#endif

#ifdef __clang__
#include <unistd.h>
#define Trace_Unreachable() _exit(-1)
#else
#define Trace_Unreachable()
#endif

#if defined(UT_DIRECT_TRACE_REGISTRATION)
int32_t registeromrmmWithTrace(UtInterface * utIntf, UtModuleInfo* containerName);
int32_t deregisteromrmmWithTrace(UtInterface * utIntf);
#define UT_MODULE_LOADED(utIntf) registeromrmmWithTrace((utIntf), NULL);
#define UT_MODULE_UNLOADED(utIntf) deregisteromrmmWithTrace((utIntf));
#define UT_OMRMM_MODULE_LOADED(utIntf) registeromrmmWithTrace((utIntf), NULL);
#define UT_OMRMM_MODULE_UNLOADED(utIntf) deregisteromrmmWithTrace((utIntf));
#else /* defined(UT_DIRECT_TRACE_REGISTRATION) */
int32_t registeromrmmWithTrace(JavaVM * vm, UtModuleInfo* containerName);
int32_t deregisteromrmmWithTrace(JavaVM * vm);
#define UT_MODULE_LOADED(vm) registeromrmmWithTrace((JavaVM *)(vm), NULL);
#define UT_MODULE_UNLOADED(vm) deregisteromrmmWithTrace((JavaVM *)(vm));
#define UT_OMRMM_MODULE_LOADED(vm) registeromrmmWithTrace((JavaVM *)(vm), NULL);
#define UT_OMRMM_MODULE_UNLOADED(vm) deregisteromrmmWithTrace((JavaVM *)(vm));
#endif /* defined(UT_DIRECT_TRACE_REGISTRATION) */

#if UT_TRACE_OVERHEAD >= 1
#define Trc_OMRMM_SystemGCStart(thr, P1, P2, P3, P4, P5, P6) do { /* tracepoint name: omrmm.0 */ \
	if ((unsigned char) omrmm_UtActive[0] != 0){ \
		omrmm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &omrmm_UtModuleInfo, ((0u << 8) | omrmm_UtActive[0]), "\6\6\6\6\6\6", P1, P2, P3, P4, P5, P6);} \
	} while(0)
#else
#define Trc_OMRMM_SystemGCStart(thr, P1, P2, P3, P4, P5, P6)   /* tracepoint name: omrmm.0 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_OMRMM_SystemGCEnd(thr, P1, P2, P3, P4, P5, P6) do { /* tracepoint name: omrmm.1 */ \
	if ((unsigned char) omrmm_UtActive[1] != 0){ \
		omrmm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &omrmm_UtModuleInfo, ((1u << 8) | omrmm_UtActive[1]), "\6\6\6\6\6\6", P1, P2, P3, P4, P5, P6);} \
	} while(0)
#else
#define Trc_OMRMM_SystemGCEnd(thr, P1, P2, P3, P4, P5, P6)   /* tracepoint name: omrmm.1 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_OMRMM_MemorySubSpace_percolateGarbageCollect_Exit1(thr, P1) do { /* tracepoint name: omrmm.2 */ \
	if ((unsigned char) omrmm_UtActive[2] != 0){ \
		omrmm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &omrmm_UtModuleInfo, ((2u << 8) | omrmm_UtActive[2]), "\377", P1);} \
	} while(0)
#else
#define Trc_OMRMM_MemorySubSpace_percolateGarbageCollect_Exit1(thr, P1)   /* tracepoint name: omrmm.2 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_OMRMM_MemorySubSpace_percolateGarbageCollect_Exit2(thr) do { /* tracepoint name: omrmm.3 */ \
	if ((unsigned char) omrmm_UtActive[3] != 0){ \
		omrmm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &omrmm_UtModuleInfo, ((3u << 8) | omrmm_UtActive[3]), NULL);} \
	} while(0)
#else
#define Trc_OMRMM_MemorySubSpace_percolateGarbageCollect_Exit2(thr)   /* tracepoint name: omrmm.3 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_OMRMM_MarkStart(thr) do { /* tracepoint name: omrmm.4 */ \
	if ((unsigned char) omrmm_UtActive[4] != 0){ \
		omrmm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &omrmm_UtModuleInfo, ((4u << 8) | omrmm_UtActive[4]), NULL);} \
	} while(0)
#else
#define Trc_OMRMM_MarkStart(thr)   /* tracepoint name: omrmm.4 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_OMRMM_MarkEnd(thr) do { /* tracepoint name: omrmm.5 */ \
	if ((unsigned char) omrmm_UtActive[5] != 0){ \
		omrmm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &omrmm_UtModuleInfo, ((5u << 8) | omrmm_UtActive[5]), NULL);} \
	} while(0)
#else
#define Trc_OMRMM_MarkEnd(thr)   /* tracepoint name: omrmm.5 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_OMRMM_SweepStart(thr) do { /* tracepoint name: omrmm.6 */ \
	if ((unsigned char) omrmm_UtActive[6] != 0){ \
		omrmm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &omrmm_UtModuleInfo, ((6u << 8) | omrmm_UtActive[6]), NULL);} \
	} while(0)
#else
#define Trc_OMRMM_SweepStart(thr)   /* tracepoint name: omrmm.6 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_OMRMM_SweepEnd(thr) do { /* tracepoint name: omrmm.7 */ \
	if ((unsigned char) omrmm_UtActive[7] != 0){ \
		omrmm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &omrmm_UtModuleInfo, ((7u << 8) | omrmm_UtActive[7]), NULL);} \
	} while(0)
#else
#define Trc_OMRMM_SweepEnd(thr)   /* tracepoint name: omrmm.7 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_OMRMM_LocalGCStart(thr, P1, P2, P3, P4, P5, P6) do { /* tracepoint name: omrmm.8 */ \
	if ((unsigned char) omrmm_UtActive[8] != 0){ \
		omrmm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &omrmm_UtModuleInfo, ((8u << 8) | omrmm_UtActive[8]), "\6\6\6\6\6\6", P1, P2, P3, P4, P5, P6);} \
	} while(0)
#else
#define Trc_OMRMM_LocalGCStart(thr, P1, P2, P3, P4, P5, P6)   /* tracepoint name: omrmm.8 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_OMRMM_LocalGCEnd(thr, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16) do { /* tracepoint name: omrmm.9 */ \
	if ((unsigned char) omrmm_UtActive[9] != 0){ \
		omrmm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &omrmm_UtModuleInfo, ((9u << 8) | omrmm_UtActive[9]), "\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6", P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16);} \
	} while(0)
#else
#define Trc_OMRMM_LocalGCEnd(thr, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16)   /* tracepoint name: omrmm.9 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_OMRMM_AllocationFailureStart(thr, P1, P2, P3, P4, P5, P6, P7) do { /* tracepoint name: omrmm.10 */ \
	if ((unsigned char) omrmm_UtActive[10] != 0){ \
		omrmm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &omrmm_UtModuleInfo, ((10u << 8) | omrmm_UtActive[10]), "\6\6\6\6\6\6\6", P1, P2, P3, P4, P5, P6, P7);} \
	} while(0)
#else
#define Trc_OMRMM_AllocationFailureStart(thr, P1, P2, P3, P4, P5, P6, P7)   /* tracepoint name: omrmm.10 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_OMRMM_AllocationFailureEnd(thr, P1, P2, P3, P4, P5, P6) do { /* tracepoint name: omrmm.11 */ \
	if ((unsigned char) omrmm_UtActive[11] != 0){ \
		omrmm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &omrmm_UtModuleInfo, ((11u << 8) | omrmm_UtActive[11]), "\6\6\6\6\6\6", P1, P2, P3, P4, P5, P6);} \
	} while(0)
#else
#define Trc_OMRMM_AllocationFailureEnd(thr, P1, P2, P3, P4, P5, P6)   /* tracepoint name: omrmm.11 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_OMRMM_AllocationFailureCycleStart(thr, P1, P2, P3, P4, P5, P6, P7) do { /* tracepoint name: omrmm.12 */ \
	if ((unsigned char) omrmm_UtActive[12] != 0){ \
		omrmm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &omrmm_UtModuleInfo, ((12u << 8) | omrmm_UtActive[12]), "\6\6\6\6\6\6\6", P1, P2, P3, P4, P5, P6, P7);} \
	} while(0)
#else
#define Trc_OMRMM_AllocationFailureCycleStart(thr, P1, P2, P3, P4, P5, P6, P7)   /* tracepoint name: omrmm.12 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_OMRMM_AllocationFailureCycleEnd(thr, P1, P2, P3, P4, P5, P6) do { /* tracepoint name: omrmm.13 */ \
	if ((unsigned char) omrmm_UtActive[13] != 0){ \
		omrmm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &omrmm_UtModuleInfo, ((13u << 8) | omrmm_UtActive[13]), "\6\6\6\6\6\6", P1, P2, P3, P4, P5, P6);} \
	} while(0)
#else
#define Trc_OMRMM_AllocationFailureCycleEnd(thr, P1, P2, P3, P4, P5, P6)   /* tracepoint name: omrmm.13 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_OMRMM_GlobalGCStart(thr, P1) do { /* tracepoint name: omrmm.14 */ \
	if ((unsigned char) omrmm_UtActive[14] != 0){ \
		omrmm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &omrmm_UtModuleInfo, ((14u << 8) | omrmm_UtActive[14]), "\6", P1);} \
	} while(0)
#else
#define Trc_OMRMM_GlobalGCStart(thr, P1)   /* tracepoint name: omrmm.14 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_OMRMM_GlobalGCEnd(thr, P1, P2, P3, P4) do { /* tracepoint name: omrmm.15 */ \
	if ((unsigned char) omrmm_UtActive[15] != 0){ \
		omrmm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &omrmm_UtModuleInfo, ((15u << 8) | omrmm_UtActive[15]), "\6\6\6\6", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_OMRMM_GlobalGCEnd(thr, P1, P2, P3, P4)   /* tracepoint name: omrmm.15 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_OMRMM_GlobalGCCollectComplete(thr) do { /* tracepoint name: omrmm.16 */ \
	if ((unsigned char) omrmm_UtActive[16] != 0){ \
		omrmm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &omrmm_UtModuleInfo, ((16u << 8) | omrmm_UtActive[16]), NULL);} \
	} while(0)
#else
#define Trc_OMRMM_GlobalGCCollectComplete(thr)   /* tracepoint name: omrmm.16 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_OMRMM_CompactStart(thr, P1) do { /* tracepoint name: omrmm.17 */ \
	if ((unsigned char) omrmm_UtActive[17] != 0){ \
		omrmm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &omrmm_UtModuleInfo, ((17u << 8) | omrmm_UtActive[17]), "\377", P1);} \
	} while(0)
#else
#define Trc_OMRMM_CompactStart(thr, P1)   /* tracepoint name: omrmm.17 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_OMRMM_CompactEnd(thr, P1) do { /* tracepoint name: omrmm.18 */ \
	if ((unsigned char) omrmm_UtActive[18] != 0){ \
		omrmm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &omrmm_UtModuleInfo, ((18u << 8) | omrmm_UtActive[18]), "\6", P1);} \
	} while(0)
#else
#define Trc_OMRMM_CompactEnd(thr, P1)   /* tracepoint name: omrmm.18 */
#endif

#if UT_TRACE_OVERHEAD >= 1
#define Trc_OMRMM_CompactScheme_evacuateSubArea_subAreaCompactedBFreeSpaceRemaining(thr, P1, P2, P3, P4) do { /* tracepoint name: omrmm.19 */ \
	if ((unsigned char) omrmm_UtActive[19] != 0){ \
		omrmm_UtModuleInfo.intf->Trace(UT_THREAD(thr), &omrmm_UtModuleInfo, ((19u << 8) | omrmm_UtActive[19]), "\6\6\6\6", P1, P2, P3, P4);} \
	} while(0)
#else
#define Trc_OMRMM_CompactScheme_evacuateSubArea_subAreaCompactedBFreeSpaceRemaining(thr, P1, P2, P3, P4)   /* tracepoint name: omrmm.19 */
#endif

extern UtModuleInfo omrmm_UtModuleInfo;
extern unsigned char omrmm_UtActive[];

#ifndef UT_MODULE_INFO
#define UT_MODULE_INFO omrmm_UtModuleInfo
#endif /* UT_MODULE_INFO */

#ifndef UT_ACTIVE
#define UT_ACTIVE omrmm_UtActive
#endif /* UT_ACTIVE */

#ifdef __cplusplus
} /* extern "C" */
#endif
#endif /* UTE_OMRMM_MODULE_HEADER */
/*
 * End of file
 */
